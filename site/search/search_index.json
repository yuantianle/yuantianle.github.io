{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table of Contents: \u00b6 {% include list.liquid all=true %}","title":"Home"},{"location":"#table-of-contents","text":"{% include list.liquid all=true %}","title":"Table of Contents:"},{"location":"1_Computer_Graphics/","text":":crystal_ball: Computer Graphics \u00b6 {% include list.liquid all=true %}","title":":crystal_ball: Computer Graphics"},{"location":"1_Computer_Graphics/#crystal_ball-computer-graphics","text":"{% include list.liquid all=true %}","title":":crystal_ball: Computer Graphics"},{"location":"1_Computer_Graphics/1.%20Thermal%20Dynamics/","text":"Thermal Dynamics \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Thermal Dynamics"},{"location":"1_Computer_Graphics/1.%20Thermal%20Dynamics/#thermal-dynamics","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Thermal Dynamics"},{"location":"1_Computer_Graphics/2.%20Lightning/","text":"Lightning \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Lightning"},{"location":"1_Computer_Graphics/2.%20Lightning/#lightning","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Lightning"},{"location":"1_Computer_Graphics/3.%20Three.js/","text":"Three.js \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Three.js"},{"location":"1_Computer_Graphics/3.%20Three.js/#threejs","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Three.js"},{"location":"2_Software_Engineering/","text":":rocket: Software Engineering \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":":rocket: Software Engineering"},{"location":"2_Software_Engineering/#rocket-software-engineering","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":":rocket: Software Engineering"},{"location":"2_Software_Engineering/Docker/","text":":whale: Docker \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} source: {{ page.path }}","title":":whale: Docker"},{"location":"2_Software_Engineering/Docker/#whale-docker","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} source: {{ page.path }}","title":":whale: Docker"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/","text":"A good model for Docker Image initialization \u00b6 From what we learned: Basic guidance of docker , we learned how to use Docker compose to run containers in parallel. In that learning, we directly use swiftlang/swift:nightly-focal from the Docker repo. Here, we will learn how to create and use our own Docker Image in the Docker compose. There are three steps: (1) Create a file named Dockerfile in your folder. About FROM, MAINTAINER, and RUN, learn from: What-is-dockerfile FROM swiftlang/swift:nightly-focal MAINTAINER simpli RUN apt-get update RUN apt update RUN apt -y install zsh RUN apt -y install curl RUN apt -y install vim RUN sh -c \" $( curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" RUN apt-get -y install -y language-pack-en RUN zsh (2) Then run docker build -t simpli_image [location of your dockerfile] to build a Docker Image. (3) Finally, the yml below as docker-compose run --rm dev : services: dev: image: simpli_image #\"swiftlang/swift:nightly-focal\" volumes: - your directory /swift:/code environment: - USER=your name Now you are using your own Docker Image in which zsh & oh-my-zsh have been pre-installed.","title":"A good model for Docker Image initialization"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/#a-good-model-for-docker-image-initialization","text":"From what we learned: Basic guidance of docker , we learned how to use Docker compose to run containers in parallel. In that learning, we directly use swiftlang/swift:nightly-focal from the Docker repo. Here, we will learn how to create and use our own Docker Image in the Docker compose. There are three steps: (1) Create a file named Dockerfile in your folder. About FROM, MAINTAINER, and RUN, learn from: What-is-dockerfile FROM swiftlang/swift:nightly-focal MAINTAINER simpli RUN apt-get update RUN apt update RUN apt -y install zsh RUN apt -y install curl RUN apt -y install vim RUN sh -c \" $( curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" RUN apt-get -y install -y language-pack-en RUN zsh (2) Then run docker build -t simpli_image [location of your dockerfile] to build a Docker Image. (3) Finally, the yml below as docker-compose run --rm dev : services: dev: image: simpli_image #\"swiftlang/swift:nightly-focal\" volumes: - your directory /swift:/code environment: - USER=your name Now you are using your own Docker Image in which zsh & oh-my-zsh have been pre-installed.","title":"A good model for Docker Image initialization"},{"location":"2_Software_Engineering/Docker/Basic/","text":"Basic guidance of docker \u00b6 Docker is a useful tool with CI and backend work. Especially there are some cases that we need to test code in different system. Let's take swift as an example. We make it works on Windows 10. Step 1. Install Docker Desktop We can download [Links][Docker Desktop]https://docs.docker.com/get-docker/ from the website and install it on your Windows 10. Step 2. Create a docker-compose.yml file services: dev: image: \"swiftlang/swift:nightly-focal\" #Default setting package for your system volumes: - /Users/<YOUR_DIC_TO_INSTALL_SWIFT>/swift:/code environment: - USER=<YOUR_NAME> Step 3. Launch the dev Docker service created in Step 2 Turn on your Docker Desktop. Then run the code below: docker-compose run --rm dev Once inside your docker container, cd code . From \\code directory you can run the swift command.","title":"Basic guidance of docker"},{"location":"2_Software_Engineering/Docker/Basic/#basic-guidance-of-docker","text":"Docker is a useful tool with CI and backend work. Especially there are some cases that we need to test code in different system. Let's take swift as an example. We make it works on Windows 10. Step 1. Install Docker Desktop We can download [Links][Docker Desktop]https://docs.docker.com/get-docker/ from the website and install it on your Windows 10. Step 2. Create a docker-compose.yml file services: dev: image: \"swiftlang/swift:nightly-focal\" #Default setting package for your system volumes: - /Users/<YOUR_DIC_TO_INSTALL_SWIFT>/swift:/code environment: - USER=<YOUR_NAME> Step 3. Launch the dev Docker service created in Step 2 Turn on your Docker Desktop. Then run the code below: docker-compose run --rm dev Once inside your docker container, cd code . From \\code directory you can run the swift command.","title":"Basic guidance of docker"},{"location":"2_Software_Engineering/Swift/","text":"Swift \u00b6 {% include list.liquid all=true %}","title":"Swift"},{"location":"2_Software_Engineering/Swift/#swift","text":"{% include list.liquid all=true %}","title":"Swift"},{"location":"2_Software_Engineering/Swift/Notes/","text":"Swift Learning \u00b6 {% include list.liquid all=true %}","title":"Swift Learning"},{"location":"2_Software_Engineering/Swift/Notes/#swift-learning","text":"{% include list.liquid all=true %}","title":"Swift Learning"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/","text":"Swift on Windows 10 \u00b6 {% include list.liquid all=true %}","title":"Swift on Windows 10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/#swift-on-windows-10","text":"{% include list.liquid all=true %}","title":"Swift on Windows 10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/TL_DR/","text":"TL;DR \u00b6 VS Code + Docker. Especially useful on Windows, but can be handy on MacOS too. For a step-by-step guide, see VS Code-Docker for editing Swift on Win10 . Here is Tianle Yuan\u2019s own summary from Slack. Install the extensions of the swift, docker, and dev containers in vs code. run docker run vs code and click the docker logo on the left sidebar. run the image in vscode terminal and open the swift image in the container as u did in the docker desktop For testing ur swift code: ctrl + shift + p in command window at the top, enter: docker containers: attach shell swift test in your terminal For example: Moreover, you can even get the following instead, which looks more like what you get in Xcode: See VS Code - Docker for a nice Swift edition on Windows10 for more details.","title":"TL;DR"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/TL_DR/#tldr","text":"VS Code + Docker. Especially useful on Windows, but can be handy on MacOS too. For a step-by-step guide, see VS Code-Docker for editing Swift on Win10 . Here is Tianle Yuan\u2019s own summary from Slack. Install the extensions of the swift, docker, and dev containers in vs code. run docker run vs code and click the docker logo on the left sidebar. run the image in vscode terminal and open the swift image in the container as u did in the docker desktop For testing ur swift code: ctrl + shift + p in command window at the top, enter: docker containers: attach shell swift test in your terminal For example: Moreover, you can even get the following instead, which looks more like what you get in Xcode: See VS Code - Docker for a nice Swift edition on Windows10 for more details.","title":"TL;DR"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/","text":"VS Code-Docker for editing Swift on Win10 \u00b6 As a student who is also confused about using Swift on Windows10, I can understand how hard you are if you cannot afford a Macbook :joy:. Let's get started and prove that we can do the same thing as a Windows pioneer! There are several steps here for you to reach a slightly friendly interface: Software preparation. Set up Swift image on your local machine. Use Docker Container in your VS Code. Edit Swift code and do testing. [Not enough syntax highlighting and no autocomplete] An updated way to do Swift code editing and testing. [syntax highlighting and autocomplete] Please feel free to extend the content of the page. Window10 students need your contributions! \ud83e\udde0\ud83e\udde0 1. Software Preparation \u00b6 By default, make sure your system has already been installed: (1) Git Bash ( https://git-scm.com/downloads ); This requirement is optional. Since this course requires you to use the git command, Git Bash is the incident software for installing git on windows. You can also use your cmd or PowerShell. (2) VScode ( https://code.visualstudio.com/Download ). Then download and install: (3) Swift ( https://www.swift.org/download/ Windows10 x86_ 64 ). This step will help you automatically set up a swift command in your terminal. (4) Docker desktop ( https://docs.docker.com/desktop/install/windows-install/ ). 2. Set up Swift image on your local machine \u00b6 After installing Swift and Docker desktop, you create a swift image described in Docker . ### Try it now :point_down: In your hw folder, run the following: `cd MyLibrary/` `swift package init -- type library` `cd ..` `docker-compose run --rm dev` You probably will see the picture shown below: At this moment, you are running an image in Docker. Let\u2019s check your Docker desktop and click the item that is running: #### Try it now (Optional) :point_down: Let\u2019s decorate the bad terminal interface! Here we will use \u201coh-my-zsh\u201c. Follow the steps: `apt update` `apt install zsh` `apt install curl` `apt install vim` `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` Then go to edit the format plug-in in the `.zshrc` file: `cd ~` `vim .zshrc` Then change `ZSH_THEME=\"agnoster\"`. Restart your terminal in Docker and run `zsh` A better way is do as shown in [A good model of Docker Image](https://oregonstate-innovationlab.atlassian.net/wiki/spaces/CS561/pages/74350864/A+good+model+of+Docker+Image) , so you do not have to set the environment everytime! After the decoration, you will see the terminal as shown below: This beautiful terminal highlight will also be seen in the VS Code terminal later. :thumbsup: 3. Use Docker Container in your VS Code To make VS Code your swift code editor, install the extensions: swift , Docker , and dev containers . #### Try it now :point_down: 1. Now you run your docker desktop; Go back to VS Code and click the docker logo on the left sidebar: Make sure your local terminal is running docker-compose run --rm dev . Run the image in the VS Code terminal and also open the swift image in your terminal by: (a) ctrl + shift + p (b) in the command window at the top, enter: Docker Containers: Attach Shell (c) zsh : You see! The terminal shows the same beautiful highlighting as we saw in the docker desktop terminal. :thumbsup: 4. Edit Swift code and do testing Finally, let\u2019s see how I use the VS Code to edit Swift codes. Firstly, git fork the code from the repo ( https://github.com/oregon-state-innovation-lab/cs561-swift ). Then git clone the forked folder into your code folder in the terminal: Checkout to async-await branch: Open swift files by clicking the content on the left side directory: #### Try it now :point_down: Let\u2019s do the testing of the test folder: Check the code coverage llvm-cov report ... : 5. An updated way to do Swift code editing and testing \u00b6 I think you have found that using the extension in the Docker logo can not help us realize the full function of syntax highlighting and there is no autocomplete. Here I provide a way to furtherly realize the function of editing Swift code on VS Code. Rather than using the extension of the whale (squared by red), we are going to use the remote extension (squared by green) as shown above. Choose the Containers in the remote explorer: Right-click the image that is running and chooses Attach in New Window : In the new window, \ud83d\udcc2 Open Folders in the parent directory / (not the /root ), then Enter using your keyboard. Now you can see your files: We still cannot see the full highlight. Let\u2019s open the extension window in the remote interface. Click the Install in Container swiftlang/swift-nightly-focal (.....) button and install it in your container: Now you can see the variables that can show up in the extension. Also, click the Conical flask extension and run the Test codes: Here is the result (with variable detection, definition tracking, autocomplete, and testing): Nice nice!!!! There are no differences between Windows VS Code and macOS Xcode now!! Bazinga :beers: :muscle: Now you're a pro in Windows 10 swift programming\u2026 Feel free to add more cool stuff here! Tianle Yuan \u2013 10/14/2022","title":"VS Code-Docker for editing Swift on Win10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#vs-code-docker-for-editing-swift-on-win10","text":"As a student who is also confused about using Swift on Windows10, I can understand how hard you are if you cannot afford a Macbook :joy:. Let's get started and prove that we can do the same thing as a Windows pioneer! There are several steps here for you to reach a slightly friendly interface: Software preparation. Set up Swift image on your local machine. Use Docker Container in your VS Code. Edit Swift code and do testing. [Not enough syntax highlighting and no autocomplete] An updated way to do Swift code editing and testing. [syntax highlighting and autocomplete] Please feel free to extend the content of the page. Window10 students need your contributions! \ud83e\udde0\ud83e\udde0","title":"VS Code-Docker for editing Swift on Win10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#1-software-preparation","text":"By default, make sure your system has already been installed: (1) Git Bash ( https://git-scm.com/downloads ); This requirement is optional. Since this course requires you to use the git command, Git Bash is the incident software for installing git on windows. You can also use your cmd or PowerShell. (2) VScode ( https://code.visualstudio.com/Download ). Then download and install: (3) Swift ( https://www.swift.org/download/ Windows10 x86_ 64 ). This step will help you automatically set up a swift command in your terminal. (4) Docker desktop ( https://docs.docker.com/desktop/install/windows-install/ ).","title":"1. Software Preparation"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#2-set-up-swift-image-on-your-local-machine","text":"After installing Swift and Docker desktop, you create a swift image described in Docker . ### Try it now :point_down: In your hw folder, run the following: `cd MyLibrary/` `swift package init -- type library` `cd ..` `docker-compose run --rm dev` You probably will see the picture shown below: At this moment, you are running an image in Docker. Let\u2019s check your Docker desktop and click the item that is running: #### Try it now (Optional) :point_down: Let\u2019s decorate the bad terminal interface! Here we will use \u201coh-my-zsh\u201c. Follow the steps: `apt update` `apt install zsh` `apt install curl` `apt install vim` `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` Then go to edit the format plug-in in the `.zshrc` file: `cd ~` `vim .zshrc` Then change `ZSH_THEME=\"agnoster\"`. Restart your terminal in Docker and run `zsh` A better way is do as shown in [A good model of Docker Image](https://oregonstate-innovationlab.atlassian.net/wiki/spaces/CS561/pages/74350864/A+good+model+of+Docker+Image) , so you do not have to set the environment everytime! After the decoration, you will see the terminal as shown below: This beautiful terminal highlight will also be seen in the VS Code terminal later. :thumbsup: 3. Use Docker Container in your VS Code To make VS Code your swift code editor, install the extensions: swift , Docker , and dev containers . #### Try it now :point_down: 1. Now you run your docker desktop; Go back to VS Code and click the docker logo on the left sidebar: Make sure your local terminal is running docker-compose run --rm dev . Run the image in the VS Code terminal and also open the swift image in your terminal by: (a) ctrl + shift + p (b) in the command window at the top, enter: Docker Containers: Attach Shell (c) zsh : You see! The terminal shows the same beautiful highlighting as we saw in the docker desktop terminal. :thumbsup: 4. Edit Swift code and do testing Finally, let\u2019s see how I use the VS Code to edit Swift codes. Firstly, git fork the code from the repo ( https://github.com/oregon-state-innovation-lab/cs561-swift ). Then git clone the forked folder into your code folder in the terminal: Checkout to async-await branch: Open swift files by clicking the content on the left side directory: #### Try it now :point_down: Let\u2019s do the testing of the test folder: Check the code coverage llvm-cov report ... :","title":"2. Set up Swift image on your local machine"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#5-an-updated-way-to-do-swift-code-editing-and-testing","text":"I think you have found that using the extension in the Docker logo can not help us realize the full function of syntax highlighting and there is no autocomplete. Here I provide a way to furtherly realize the function of editing Swift code on VS Code. Rather than using the extension of the whale (squared by red), we are going to use the remote extension (squared by green) as shown above. Choose the Containers in the remote explorer: Right-click the image that is running and chooses Attach in New Window : In the new window, \ud83d\udcc2 Open Folders in the parent directory / (not the /root ), then Enter using your keyboard. Now you can see your files: We still cannot see the full highlight. Let\u2019s open the extension window in the remote interface. Click the Install in Container swiftlang/swift-nightly-focal (.....) button and install it in your container: Now you can see the variables that can show up in the extension. Also, click the Conical flask extension and run the Test codes: Here is the result (with variable detection, definition tracking, autocomplete, and testing): Nice nice!!!! There are no differences between Windows VS Code and macOS Xcode now!! Bazinga :beers: :muscle: Now you're a pro in Windows 10 swift programming\u2026 Feel free to add more cool stuff here! Tianle Yuan \u2013 10/14/2022","title":"5. An updated way to do Swift code editing and testing"},{"location":"2_Software_Engineering/Terminal/","text":"Terminal \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Terminal"},{"location":"2_Software_Engineering/Terminal/#terminal","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Terminal"},{"location":"2_Software_Engineering/VS_Code/","text":"VS Code \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"VS Code"},{"location":"2_Software_Engineering/VS_Code/#vs-code","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"VS Code"},{"location":"3_C%2B%2B/","text":"\ud83d\udee0\ufe0f: C++ \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"\ud83d\udee0\ufe0f: C++"},{"location":"3_C%2B%2B/#-c","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"\ud83d\udee0\ufe0f: C++"},{"location":"4_Math/","text":":chart_with_upwards_trend: Math \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":":chart_with_upwards_trend: Math"},{"location":"4_Math/#chart_with_upwards_trend-math","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":":chart_with_upwards_trend: Math"},{"location":"5_Casual_Literary_Notes/","text":":speech_balloon: Casual Literary Notes \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":":speech_balloon: Casual Literary Notes"},{"location":"5_Casual_Literary_Notes/#speech_balloon-casual-literary-notes","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":":speech_balloon: Casual Literary Notes"},{"location":"6_Guitar_Garage/","text":":guitar: Guitar Garage \u00b6 {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":":guitar: Guitar Garage"},{"location":"6_Guitar_Garage/#guitar-guitar-garage","text":"{% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":":guitar: Guitar Garage"}]}