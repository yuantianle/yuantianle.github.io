{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Intro"},{"location":"1_Computer_Graphics/","text":"Computer Graphics \u2693\ufe0e My exploration of Computer Graphics stems from my love of art, programming, and scientific equations. This chapter is split into three sections: \u2693\ufe0e Sciences behind CG : the math and physics behind CG. CG tools learning : useful tools for CG. Art Topics : generated arts topics from CG.","title":"**:crystal_ball: Computer Graphics**"},{"location":"1_Computer_Graphics/#computer-graphics","text":"My exploration of Computer Graphics stems from my love of art, programming, and scientific equations.","title":"Computer Graphics"},{"location":"1_Computer_Graphics/Art/","text":"Computer-generated art topics \u2693\ufe0e Table of contents: \u2693\ufe0e","title":"**Computer-generated art topics**"},{"location":"1_Computer_Graphics/Art/#computer-generated-art-topics","text":"","title":"Computer-generated art topics"},{"location":"1_Computer_Graphics/CGtech/","text":"Computer Graphics tools learning \u2693\ufe0e Table of contents: \u2693\ufe0e OpenCV . Shader . Three.js . Unity . Unreal Engine . Vulkan .","title":"**Computer Graphics tools learning**"},{"location":"1_Computer_Graphics/CGtech/#computer-graphics-tools-learning","text":"","title":"Computer Graphics tools learning"},{"location":"1_Computer_Graphics/CGtech/OpenCV/","text":"OpenCV \u2693\ufe0e","title":"OpenCV"},{"location":"1_Computer_Graphics/CGtech/OpenCV/#opencv","text":"","title":"OpenCV"},{"location":"1_Computer_Graphics/CGtech/Shader/","text":"Shader Language \u2693\ufe0e","title":"Shader"},{"location":"1_Computer_Graphics/CGtech/Shader/#shader-language","text":"","title":"Shader Language"},{"location":"1_Computer_Graphics/CGtech/Threejs/","text":"Three.js \u2693\ufe0e","title":"Three.js"},{"location":"1_Computer_Graphics/CGtech/Threejs/#threejs","text":"","title":"Three.js"},{"location":"1_Computer_Graphics/CGtech/Unity/","text":"Unity \u2693\ufe0e","title":"Unity"},{"location":"1_Computer_Graphics/CGtech/Unity/#unity","text":"","title":"Unity"},{"location":"1_Computer_Graphics/CGtech/Unreal/","text":"Unreal Engine \u2693\ufe0e","title":"Unreal Engine"},{"location":"1_Computer_Graphics/CGtech/Unreal/#unreal-engine","text":"","title":"Unreal Engine"},{"location":"1_Computer_Graphics/CGtech/Vulkan/","text":"Vulkan \u2693\ufe0e","title":"Vulkan"},{"location":"1_Computer_Graphics/CGtech/Vulkan/#vulkan","text":"","title":"Vulkan"},{"location":"1_Computer_Graphics/Science/","text":"Science behind Computer Graphics \u2693\ufe0e Table of contents: \u2693\ufe0e Thermal Dynamics . Noise . Lighting .","title":"**Science behind Computer Graphics**"},{"location":"1_Computer_Graphics/Science/#science-behind-computer-graphics","text":"","title":"Science behind Computer Graphics"},{"location":"1_Computer_Graphics/Science/Light/","text":"Lightning \u2693\ufe0e","title":"Lighting"},{"location":"1_Computer_Graphics/Science/Light/#lightning","text":"","title":"Lightning"},{"location":"1_Computer_Graphics/Science/Noise/","text":"","title":"Noise"},{"location":"1_Computer_Graphics/Science/Thermal/","text":"Thermal Dynamics \u2693\ufe0e This section shows the implicit method of thermal transfering with FDE. Problem background \u2693\ufe0e Think about the 2D case. Considering the continuum of the whole wall material, heat conduction is the major way to transfer heat. We use heat diffusion as our heat conduction method. Assuming that \\(X\\) is the domain of a 2D plane, \\(T\\) is the temperature at point \\(p\\) , and \\(\\alpha\\) is the thermal diffusivity, then we have the Equation: \\[ \\begin{equation} \\frac{\\partial T}{\\partial t} = \\alpha \\Delta T(p) = \\alpha\\left(\\frac{\\partial^2 T}{\\partial x^2}+\\frac{\\partial^2 T} {\\partial y^2}\\right),\\quad \\forall p=(x,y)\\in X \\label{eq:thermal_diffuse} \\end{equation} \\] Take \\(f(p)\\) as a function relates to point \\(p\\) , which we set is as a constant function. Dirichlet boundary condition is: \\[ \\begin{equation} \\left\\{ \\begin{array}{ll} \\Delta T(p) =0,\\quad\\forall p\\in X \\\\ \\\\ T(p) =f(p),\\quad\\forall p\\in \\partial X \\end{array} \\right. \\label{eq:Dirichlet_boundary_condition} \\end{equation} \\] Neumann boundary condition is: \\[ \\begin{equation} \\left\\{ \\begin{array}{ll} \\Delta T(p) =0,\\quad\\forall p\\in X \\\\ \\\\ \\dfrac{\\partial T(p)}{\\partial n} =f(p),\\quad\\forall p\\in \\partial X \\end{array} \\right. \\label{eq:Neumann_boundary_condition} \\end{equation} \\] Five-point stencil discretization \u2693\ufe0e To visualize the phenomenon on a computer, we need to have temperature grids. The grid is used for the discretization of the whole 2D plane. Five-point stencil difference is the method we use to express derivation for the heat partial differential equations. The corresponding temperature grid with a Five-point stencil can be seen in the picture shown below: The continuous differential form, shown in the Problem background , is further rewritten into a discrete form by the temperature grid, as shown in the equation below. The sparse matrix system will be solved in an implicit way. \\[ \\begin{equation} \\begin{aligned} \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = & \\alpha\\left[\\frac{T^{n+1}_{i+1,j}-2T^{n+1}_{i,j}+T^{n+1}_{i-1,j}} {\\Delta x^2}+\\frac{T^{n+1}_{i,j+1}-2T^{n+1}_{i,j}+T^{n+1}_{i,j-1}}{\\Delta y^2}\\right] \\\\ &+O(\\Delta t,\\Delta x^2),\\quad \\forall (x,y)\\in X \\label{eq:thermal_diffuse_discrete} \\end{aligned} \\end{equation} \\] Where \\(i\\) and \\(j\\) are the spacial indices on the temperature grid, \\(n\\) is the temporal index, which monotonically increases over time, and \\(o\\) is infinitesimal in space and time. We also do the same discretized processing for the two boundary conditions. We get the expression of Dirichlet B.C. and Neumann B.C. shown in below two equations [Neil 2015]. \\[ \\begin{equation} T^{n}_{i,j} = C,\\quad \\forall (x,y)\\in \\partial X \\label{eq:Dirichlet_boundary_condition_discrete} \\end{equation} \\] \\[ \\begin{equation} \\left\\{ \\begin{array}{ll} \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i+1,j}-2T^{n+1}_{i,j}-2\\Delta xC} {\\Delta x^2}\\right),\\quad\\forall i,\\; (i,j)\\in \\partial X_{left} \\\\ \\\\ \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i-1,j}-2T^{n+1}_{i,j}-2\\Delta xC} {\\Delta x^2}\\right),\\quad\\forall i,\\; (i,j)\\in \\partial X_{right} \\\\ \\\\ \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i,j+1}-2T^{n+1}_{i,j}-2\\Delta yC} {\\Delta y^2}\\right),\\quad\\forall j,\\; (i,j)\\in \\partial X_{top} \\\\ \\\\ \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i,j-1}-2T^{n+1}_{i,j}-2\\Delta yC} {\\Delta y^2}\\right),\\quad\\forall j,\\; (i,j)\\in \\partial X_{bottom} \\end{array} \\right. \\label{eq:Neumann_boundary_condition_discrete} \\end{equation} \\] Usually, the Five-point stencil discretization with an explicit method will need to be limited by some step length constraints. However, based on our implementation using the implicit method, our iteration step can be far longer than the explicit method, which means the temperature transferring can be sped up by increasing the length of the iteration step. Final Results \u2693\ufe0e After setting the initial conditions (I.C.) of temperature and boundary conditions (B.C.), we start iterating the equation system until the solution converges to a stable status. The different iteration processes can be seen below. Case 1: Dirichlet B.C: top, right Neumann B.C: bottom, left High temperature I.C: top, right Low temperature I.C: rest of map Case 2: Dirichlet B.C: top Neumann B.C: bottom, left, right High temperature I.C: top Low temperature I.C: rest of map Case 3: Dirichlet B.C: top, right Neumann B.C: bottom, left High temperature I.C: top, right Low temperature I.C: rest of map Case 4: Dirichlet B.C: top Neumann B.C: bottom, left, right High temperature I.C: top Low temperature I.C: rest of map References \u2693\ufe0e \u201cFinite difference methods,\u201d Neil Balmforth's webpage. [Online]. Available: https://personal.math.ubc.ca/~njb/fd. [Accessed: 14-Nov-2022].","title":"Thermal Dynamics"},{"location":"1_Computer_Graphics/Science/Thermal/#thermal-dynamics","text":"This section shows the implicit method of thermal transfering with FDE.","title":"Thermal Dynamics"},{"location":"1_Computer_Graphics/Science/Thermal/#problem-background","text":"Think about the 2D case. Considering the continuum of the whole wall material, heat conduction is the major way to transfer heat. We use heat diffusion as our heat conduction method. Assuming that \\(X\\) is the domain of a 2D plane, \\(T\\) is the temperature at point \\(p\\) , and \\(\\alpha\\) is the thermal diffusivity, then we have the Equation: \\[ \\begin{equation} \\frac{\\partial T}{\\partial t} = \\alpha \\Delta T(p) = \\alpha\\left(\\frac{\\partial^2 T}{\\partial x^2}+\\frac{\\partial^2 T} {\\partial y^2}\\right),\\quad \\forall p=(x,y)\\in X \\label{eq:thermal_diffuse} \\end{equation} \\] Take \\(f(p)\\) as a function relates to point \\(p\\) , which we set is as a constant function. Dirichlet boundary condition is: \\[ \\begin{equation} \\left\\{ \\begin{array}{ll} \\Delta T(p) =0,\\quad\\forall p\\in X \\\\ \\\\ T(p) =f(p),\\quad\\forall p\\in \\partial X \\end{array} \\right. \\label{eq:Dirichlet_boundary_condition} \\end{equation} \\] Neumann boundary condition is: \\[ \\begin{equation} \\left\\{ \\begin{array}{ll} \\Delta T(p) =0,\\quad\\forall p\\in X \\\\ \\\\ \\dfrac{\\partial T(p)}{\\partial n} =f(p),\\quad\\forall p\\in \\partial X \\end{array} \\right. \\label{eq:Neumann_boundary_condition} \\end{equation} \\]","title":"Problem background"},{"location":"1_Computer_Graphics/Science/Thermal/#five-point-stencil-discretization","text":"To visualize the phenomenon on a computer, we need to have temperature grids. The grid is used for the discretization of the whole 2D plane. Five-point stencil difference is the method we use to express derivation for the heat partial differential equations. The corresponding temperature grid with a Five-point stencil can be seen in the picture shown below: The continuous differential form, shown in the Problem background , is further rewritten into a discrete form by the temperature grid, as shown in the equation below. The sparse matrix system will be solved in an implicit way. \\[ \\begin{equation} \\begin{aligned} \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = & \\alpha\\left[\\frac{T^{n+1}_{i+1,j}-2T^{n+1}_{i,j}+T^{n+1}_{i-1,j}} {\\Delta x^2}+\\frac{T^{n+1}_{i,j+1}-2T^{n+1}_{i,j}+T^{n+1}_{i,j-1}}{\\Delta y^2}\\right] \\\\ &+O(\\Delta t,\\Delta x^2),\\quad \\forall (x,y)\\in X \\label{eq:thermal_diffuse_discrete} \\end{aligned} \\end{equation} \\] Where \\(i\\) and \\(j\\) are the spacial indices on the temperature grid, \\(n\\) is the temporal index, which monotonically increases over time, and \\(o\\) is infinitesimal in space and time. We also do the same discretized processing for the two boundary conditions. We get the expression of Dirichlet B.C. and Neumann B.C. shown in below two equations [Neil 2015]. \\[ \\begin{equation} T^{n}_{i,j} = C,\\quad \\forall (x,y)\\in \\partial X \\label{eq:Dirichlet_boundary_condition_discrete} \\end{equation} \\] \\[ \\begin{equation} \\left\\{ \\begin{array}{ll} \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i+1,j}-2T^{n+1}_{i,j}-2\\Delta xC} {\\Delta x^2}\\right),\\quad\\forall i,\\; (i,j)\\in \\partial X_{left} \\\\ \\\\ \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i-1,j}-2T^{n+1}_{i,j}-2\\Delta xC} {\\Delta x^2}\\right),\\quad\\forall i,\\; (i,j)\\in \\partial X_{right} \\\\ \\\\ \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i,j+1}-2T^{n+1}_{i,j}-2\\Delta yC} {\\Delta y^2}\\right),\\quad\\forall j,\\; (i,j)\\in \\partial X_{top} \\\\ \\\\ \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i,j-1}-2T^{n+1}_{i,j}-2\\Delta yC} {\\Delta y^2}\\right),\\quad\\forall j,\\; (i,j)\\in \\partial X_{bottom} \\end{array} \\right. \\label{eq:Neumann_boundary_condition_discrete} \\end{equation} \\] Usually, the Five-point stencil discretization with an explicit method will need to be limited by some step length constraints. However, based on our implementation using the implicit method, our iteration step can be far longer than the explicit method, which means the temperature transferring can be sped up by increasing the length of the iteration step.","title":"Five-point stencil discretization"},{"location":"1_Computer_Graphics/Science/Thermal/#final-results","text":"After setting the initial conditions (I.C.) of temperature and boundary conditions (B.C.), we start iterating the equation system until the solution converges to a stable status. The different iteration processes can be seen below. Case 1: Dirichlet B.C: top, right Neumann B.C: bottom, left High temperature I.C: top, right Low temperature I.C: rest of map Case 2: Dirichlet B.C: top Neumann B.C: bottom, left, right High temperature I.C: top Low temperature I.C: rest of map Case 3: Dirichlet B.C: top, right Neumann B.C: bottom, left High temperature I.C: top, right Low temperature I.C: rest of map Case 4: Dirichlet B.C: top Neumann B.C: bottom, left, right High temperature I.C: top Low temperature I.C: rest of map","title":"Final Results"},{"location":"2_Software_Engineering/","text":"Software Engineering \u2693\ufe0e Being a software engineer requires an understanding of the various technologies used in the industry. This chapter is split into 7 sections: \u2693\ufe0e Git and GitHub : version control. Docker : lightweight virtual machine. Swift : Mac OS language. AWS : Amazon web services. Terminal : Linux command VS Code : magic IDE with bunches of great extensions. Others : random topics waiting to be classified.","title":"**:rocket: Software Engineering**"},{"location":"2_Software_Engineering/#software-engineering","text":"Being a software engineer requires an understanding of the various technologies used in the industry.","title":"Software Engineering"},{"location":"2_Software_Engineering/AWS/","text":"AWS \u2693\ufe0e For AWS Developer Associate Certification There are 2 sections in this chapter: \u2693\ufe0e Basic concepts in AWS . AWS application .","title":"**:simple-amazonaws:{.e_swift} AWS**"},{"location":"2_Software_Engineering/AWS/#aws","text":"For AWS Developer Associate Certification","title":" AWS"},{"location":"2_Software_Engineering/AWS/Application/","text":"Application 1: a Decrypter service \u2693\ufe0e Situation Now, you want to make a Decrypter service. And below is the pipeline. How could you make it using AWS components? : Store the data somewhere (e.g. on disk). Load the data from somewhere (e.g. from disk) into a dictionary (hopefully just once). Look up a password in a dictionary (each time someone wants to decrypt). Expose the functionality through a public API. Solution The picture below shows the efficient way to simulate the Decrypter service on AWS. Details in the Solution Remember ECS with Load Balancer structure. Let's draw the details between Lambda and Database parts:","title":"Application"},{"location":"2_Software_Engineering/AWS/Application/#application-1-a-decrypter-service","text":"Situation Now, you want to make a Decrypter service. And below is the pipeline. How could you make it using AWS components? : Store the data somewhere (e.g. on disk). Load the data from somewhere (e.g. from disk) into a dictionary (hopefully just once). Look up a password in a dictionary (each time someone wants to decrypt). Expose the functionality through a public API. Solution The picture below shows the efficient way to simulate the Decrypter service on AWS. Details in the Solution Remember ECS with Load Balancer structure. Let's draw the details between Lambda and Database parts:","title":" Application 1: a Decrypter service"},{"location":"2_Software_Engineering/AWS/Basic/","text":"Basic AWS concepts \u2693\ufe0e Table of Contents: \u2693\ufe0e IAM . EC2 . Elastic Load Balancing and Auto Scaling . S3 . ECS and Docker Containers . Serverless Application . Availbility Zone and Region . References: \u2693\ufe0e Digital Cloud Training","title":"**:fontawesome-brands-aws: Basic AWS concepts**"},{"location":"2_Software_Engineering/AWS/Basic/#basic-aws-concepts","text":"","title":" Basic AWS concepts"},{"location":"2_Software_Engineering/AWS/Basic/EC2/","text":"EC2 \u2693\ufe0e What? EC2 is Amazon Elastic Compute Cloud . EC2 allows you to run virtual servers in the cloud. The concept of EC2 can be seen in the picture below: The pipeline of launching an EC2 instance: Why do we choose EC2? Fast , high administration , DIY combination , robust , safe , and cheap ! References: \u2693\ufe0e Digital Cloud Training","title":"EC2"},{"location":"2_Software_Engineering/AWS/Basic/EC2/#ec2","text":"What? EC2 is Amazon Elastic Compute Cloud . EC2 allows you to run virtual servers in the cloud. The concept of EC2 can be seen in the picture below: The pipeline of launching an EC2 instance: Why do we choose EC2? Fast , high administration , DIY combination , robust , safe , and cheap !","title":" EC2"},{"location":"2_Software_Engineering/AWS/Basic/ECS/","text":"Docker Containers and ECS \u2693\ufe0e What is Docker Container and What is Kubernetes ? Docker Container is an alternative to traditional virtual machines. It can be understood as the Light-weight VM that we can run our applications with fewer underlying resources and dependencies . Docker Container is very quick to start up and very good for microservices -based applications . Kubernetes is a platform for running and managing container s from many container runtimes. The relationship between Virtual Machine , Container , and Kubernetes can be seen in the picture (which comes from \" Docker or Kubernetes: Which one is right for you? \" in Kubernetes vs. Docker ), as shown below : Do you remember EC2 ? What are ECS and EKS ? EC2 , the Amazon Elastic Compute Cloud we discussed in the previous section , is actually a virtual machine . ECS is Amazon Elastic Container Service for you to use container in the AWS cloud. It also provides a fully managed serverless platform or partially self-managed platform for users. EKS , the Amazon Elastic Kubernetes , is also offered by AWS to use Kubernetes in the cloud. Below is the structure of ECS service: Here is the definition of each concept shown in the picture above: ECS EC2 Cluster v.s. ECS Fargate Cluster : ECS with Load Balancer : References: \u2693\ufe0e Digital Cloud Training Kubernetes vs. Docker","title":"ECS & Docker Container"},{"location":"2_Software_Engineering/AWS/Basic/ECS/#docker-containers-and-ecs","text":"What is Docker Container and What is Kubernetes ? Docker Container is an alternative to traditional virtual machines. It can be understood as the Light-weight VM that we can run our applications with fewer underlying resources and dependencies . Docker Container is very quick to start up and very good for microservices -based applications . Kubernetes is a platform for running and managing container s from many container runtimes. The relationship between Virtual Machine , Container , and Kubernetes can be seen in the picture (which comes from \" Docker or Kubernetes: Which one is right for you? \" in Kubernetes vs. Docker ), as shown below : Do you remember EC2 ? What are ECS and EKS ? EC2 , the Amazon Elastic Compute Cloud we discussed in the previous section , is actually a virtual machine . ECS is Amazon Elastic Container Service for you to use container in the AWS cloud. It also provides a fully managed serverless platform or partially self-managed platform for users. EKS , the Amazon Elastic Kubernetes , is also offered by AWS to use Kubernetes in the cloud. Below is the structure of ECS service: Here is the definition of each concept shown in the picture above: ECS EC2 Cluster v.s. ECS Fargate Cluster : ECS with Load Balancer :","title":" Docker Containers and ECS"},{"location":"2_Software_Engineering/AWS/Basic/IAM/","text":"IAM \u2693\ufe0e What? IAM is Identity and Access Management . IAM can be used to create user , groups , roles , and policies , to AVOID using the Root account to access to AWS resources. The relations between the four concepts can be seen in the picture below: References: \u2693\ufe0e Digital Cloud Training","title":"IAM"},{"location":"2_Software_Engineering/AWS/Basic/IAM/#iam","text":"What? IAM is Identity and Access Management . IAM can be used to create user , groups , roles , and policies , to AVOID using the Root account to access to AWS resources. The relations between the four concepts can be seen in the picture below:","title":" IAM"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/","text":"Elastic Load Balancing and Auto Scaling \u2693\ufe0e What demand? How can we make sure that our applications have enough capacity and enough EC2 instances available? How can we distribute incoming connections to those EC2 instances? How? Auto Scaling helps to make sure that you have the right number of EC2 instances to service the demand of your application. Then, put Elastic Load Balancing in front of your application. ELB will distribute incoming connections across the pool of instances that are managed by the Auto Scaling Group . All in all, those two technologies above enable you to have elastic and fault-tolerant applications. Elasticity: Scaling Up v.s. Out \u2693\ufe0e Assume that we have an EC2 instance for our application now: Let's see what is Scaling Up ( Vertical Scaling ): Let's see what is Scaling Out ( Horizontal Scaling ): Amazon EC2 Auto Scaling \u2693\ufe0e Amazon EC2 Auto Scaling is horizontal scaling (scales out), which dynamically launches and terminates instances. CloudWatch metrics and EC2 status checks will process the responsed information from EC2 Auto Scaling . The pipeline to realize the elasticity and scalability can be seen below\uff1a Load Balancing and High Availability \u2693\ufe0e From EC2 Auto Scaling , we end up with lots of different instances of the same application. How? How do we direct traffic to those instances ? Load Balancer As you can see in the pictures below, Load Balancer can not only provide high availability (Availability Zones) if some server is in the crash. Load Balancer can also increase fault tolerance when the system has redundant components (more than one server or more than one hardware). Let's see the case we combine EC2 Auto Scaling and Load Balancer together: Types of Elastic Load Balancer \u2693\ufe0e There are four types of Elastic Load Balancer : Here are some use cases for different types of ELB : The details about ALB and NLB focus on the URL they use: References: \u2693\ufe0e Digital Cloud Training","title":"Load Balancer & Scaling"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#elastic-load-balancing-and-auto-scaling","text":"What demand? How can we make sure that our applications have enough capacity and enough EC2 instances available? How can we distribute incoming connections to those EC2 instances? How? Auto Scaling helps to make sure that you have the right number of EC2 instances to service the demand of your application. Then, put Elastic Load Balancing in front of your application. ELB will distribute incoming connections across the pool of instances that are managed by the Auto Scaling Group . All in all, those two technologies above enable you to have elastic and fault-tolerant applications.","title":" Elastic Load Balancing and Auto Scaling"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#elasticity-scaling-up-vs-out","text":"Assume that we have an EC2 instance for our application now: Let's see what is Scaling Up ( Vertical Scaling ): Let's see what is Scaling Out ( Horizontal Scaling ):","title":"Elasticity: Scaling Up v.s. Out"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#amazon-ec2-auto-scaling","text":"Amazon EC2 Auto Scaling is horizontal scaling (scales out), which dynamically launches and terminates instances. CloudWatch metrics and EC2 status checks will process the responsed information from EC2 Auto Scaling . The pipeline to realize the elasticity and scalability can be seen below\uff1a","title":"Amazon EC2 Auto Scaling"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#load-balancing-and-high-availability","text":"From EC2 Auto Scaling , we end up with lots of different instances of the same application. How? How do we direct traffic to those instances ? Load Balancer As you can see in the pictures below, Load Balancer can not only provide high availability (Availability Zones) if some server is in the crash. Load Balancer can also increase fault tolerance when the system has redundant components (more than one server or more than one hardware). Let's see the case we combine EC2 Auto Scaling and Load Balancer together:","title":"Load Balancing and High Availability"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#types-of-elastic-load-balancer","text":"There are four types of Elastic Load Balancer : Here are some use cases for different types of ELB : The details about ALB and NLB focus on the URL they use:","title":"Types of Elastic Load Balancer"},{"location":"2_Software_Engineering/AWS/Basic/S3/","text":"S3 \u2693\ufe0e What and For? S3 is an object-based storage system . You can use API to access the objects S3 bucket (container) storage. Below are the characters of the storage service: The basic structure of S3 bucket: To reach the objects in the bucket by using the URL: To reach the bucket by using the URL: Different types of S3 storage classes : If you want to transfer one object from one S3 class into the other class, you should follow the following hierarchy: References: \u2693\ufe0e Digital Cloud Training","title":"S3"},{"location":"2_Software_Engineering/AWS/Basic/S3/#s3","text":"What and For? S3 is an object-based storage system . You can use API to access the objects S3 bucket (container) storage. Below are the characters of the storage service: The basic structure of S3 bucket: To reach the objects in the bucket by using the URL: To reach the bucket by using the URL: Different types of S3 storage classes : If you want to transfer one object from one S3 class into the other class, you should follow the following hierarchy:","title":" S3"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/","text":"Serverless Application \u2693\ufe0e Serverless Services \u2693\ufe0e What are serverless technologies? Definition : AWS offers Serverless technologies for running code , managing data , and integrating applications , all without managing servers. Serverless technologies feature automatic scaling, built-in high availability, and a pay-for-use billing model to increase agility and optimize costs. What should I do with serverless services? All you have to do is start using the service and writing code that serves your customers . You really don't have to manage anything underneath the platform at all (e.g. you don't need to manage EC2 instances, and you don't have to install patches, do provisioning or update software). Who are AWS serverless services? Remember the Application 1: a Decrypter service ? According to that implementation pipeline, we classify the serverless services into three classes: I. Data store: AWS S3 , Amazon Simple Storage Service , a serverless, fully elastic file system for builders that makes it easy to set up, scale, and cost-optimize highly available shared storage. ( S3 is not a database *, S3 is object storage\u2014it stores files. (It does not block storage though, so not quite that low level.) So in a sense, it\u2019s a \u201clightweight database\u201d the way Docker is a \u201clightweight virtual machine\u201d.) AWS DynamoDB , a key-value and document database service, delivering single-digit millisecond performance at any scale. II. Compute: AWS Lambda , allows you to run your code as compute functions. AWS Fargate , a serverless compute engine that works with Amazon Elastic Container Service (ECS) and Amazon Elastic Kubernetes Service (EKS). III. Application integration: AWS API Gateway , a fully-managed service that allows you to be able to connect to an application via REST API or HTTP API. AWS SQS , Amazon Simple Queue Service is a message queuing service enabling you to decouple and scale microservices, distributed systems, and serverless applications. AWS SNS , Amazon Simple Notification Service is a fully managed messaging service for both application-to-application (A2A) and application-to-person (A2P) communication. For more, check Serverless on AWS . An example of using Serverless Services \u2693\ufe0e Details about Serverless Services \u2693\ufe0e Lambda \u2693\ufe0e SQS \u2693\ufe0e SNS \u2693\ufe0e API Gateway \u2693\ufe0e References: \u2693\ufe0e Digital Cloud Training Serverless on AWS","title":"Serverless Application"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#serverless-application","text":"","title":" Serverless Application"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#serverless-services","text":"What are serverless technologies? Definition : AWS offers Serverless technologies for running code , managing data , and integrating applications , all without managing servers. Serverless technologies feature automatic scaling, built-in high availability, and a pay-for-use billing model to increase agility and optimize costs. What should I do with serverless services? All you have to do is start using the service and writing code that serves your customers . You really don't have to manage anything underneath the platform at all (e.g. you don't need to manage EC2 instances, and you don't have to install patches, do provisioning or update software). Who are AWS serverless services? Remember the Application 1: a Decrypter service ? According to that implementation pipeline, we classify the serverless services into three classes: I. Data store: AWS S3 , Amazon Simple Storage Service , a serverless, fully elastic file system for builders that makes it easy to set up, scale, and cost-optimize highly available shared storage. ( S3 is not a database *, S3 is object storage\u2014it stores files. (It does not block storage though, so not quite that low level.) So in a sense, it\u2019s a \u201clightweight database\u201d the way Docker is a \u201clightweight virtual machine\u201d.) AWS DynamoDB , a key-value and document database service, delivering single-digit millisecond performance at any scale. II. Compute: AWS Lambda , allows you to run your code as compute functions. AWS Fargate , a serverless compute engine that works with Amazon Elastic Container Service (ECS) and Amazon Elastic Kubernetes Service (EKS). III. Application integration: AWS API Gateway , a fully-managed service that allows you to be able to connect to an application via REST API or HTTP API. AWS SQS , Amazon Simple Queue Service is a message queuing service enabling you to decouple and scale microservices, distributed systems, and serverless applications. AWS SNS , Amazon Simple Notification Service is a fully managed messaging service for both application-to-application (A2A) and application-to-person (A2P) communication. For more, check Serverless on AWS .","title":"Serverless Services"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#an-example-of-using-serverless-services","text":"","title":"An example of using Serverless Services"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#details-about-serverless-services","text":"","title":"Details about Serverless Services"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/","text":"Avalibility Zone and Region \u2693\ufe0e What is Region ? A region in AWS represents a separate geographic area. If you have used AWS before, you must have seen this picture: Each AWS region is isolated and operates independently from other regions . What is Availability Zone ? Availability zones are highly available data centers within each AWS region . Each availability zone has independent power , cooling and networking . The availability zones within each region are connected via low-latency links to provide replication and fault tolerance . The relationship between Region and Availability Zone can be seen in the picture below: References: \u2693\ufe0e AWS Availability Zones, Regions, & Placement Groups Explained","title":"Avalibility Zone and Region"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#avalibility-zone-and-region","text":"What is Region ? A region in AWS represents a separate geographic area. If you have used AWS before, you must have seen this picture: Each AWS region is isolated and operates independently from other regions . What is Availability Zone ? Availability zones are highly available data centers within each AWS region . Each availability zone has independent power , cooling and networking . The availability zones within each region are connected via low-latency links to provide replication and fault tolerance . The relationship between Region and Availability Zone can be seen in the picture below:","title":" Avalibility Zone and Region"},{"location":"2_Software_Engineering/Docker/","text":"Docker \u2693\ufe0e Docker container is a \"lightweight\" VM. The benifit of using container is that we do not need to care much about hardware level as real virtual machine. Instead, we only focus on the levels above operating system. Also, like WSL2, Docker's operating system can garantee file's real-time real-write synchronization between docker container folder and host folder This sub-chapter can be split into 4 sections: \u2693\ufe0e Basic guidance of docker container for start using Docker. A good model for Docker Image initialization . Docker Compose and it's application . Docker command line .","title":"**:simple-docker:{.e_docker} Docker**"},{"location":"2_Software_Engineering/Docker/#docker","text":"Docker container is a \"lightweight\" VM. The benifit of using container is that we do not need to care much about hardware level as real virtual machine. Instead, we only focus on the levels above operating system. Also, like WSL2, Docker's operating system can garantee file's real-time real-write synchronization between docker container folder and host folder","title":" Docker"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/","text":"A good model for Docker Image initialization \u2693\ufe0e From what we learned: Basic guidance of docker , we learned how to use Docker compose to run containers in parallel. In that learning, we directly use swiftlang/swift:nightly-focal from the Docker repo. Here, we will learn how to create and use our own Docker Image in the Docker compose. There are three steps: \u2693\ufe0e Create a file named Dockerfile in your folder. About FROM, MAINTAINER, and RUN, learn from: What-is-dockerfile .dockerfile FROM swiftlang/swift:nightly-focal MAINTAINER simpli RUN apt-get update RUN apt update RUN apt -y install zsh RUN apt -y install curl RUN apt -y install vim RUN sh -c \" $( curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" RUN apt-get -y install -y language-pack-en RUN zsh Then run docker build -t simpli_image [location of your dockerfile] to build a Docker Image. Finally, the yml below as docker-compose run --rm dev : .yml services: dev: image: simpli_image #\"swiftlang/swift:nightly-focal\" volumes: - your directory /swift:/code environment: - USER=your name Now you are using your own Docker Image in which zsh & oh-my-zsh have been pre-installed.","title":"Docker Image (DIY)"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/#a-good-model-for-docker-image-initialization","text":"From what we learned: Basic guidance of docker , we learned how to use Docker compose to run containers in parallel. In that learning, we directly use swiftlang/swift:nightly-focal from the Docker repo. Here, we will learn how to create and use our own Docker Image in the Docker compose.","title":"A good model for Docker Image initialization"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/#there-are-three-steps","text":"Create a file named Dockerfile in your folder. About FROM, MAINTAINER, and RUN, learn from: What-is-dockerfile .dockerfile FROM swiftlang/swift:nightly-focal MAINTAINER simpli RUN apt-get update RUN apt update RUN apt -y install zsh RUN apt -y install curl RUN apt -y install vim RUN sh -c \" $( curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" RUN apt-get -y install -y language-pack-en RUN zsh Then run docker build -t simpli_image [location of your dockerfile] to build a Docker Image. Finally, the yml below as docker-compose run --rm dev : .yml services: dev: image: simpli_image #\"swiftlang/swift:nightly-focal\" volumes: - your directory /swift:/code environment: - USER=your name Now you are using your own Docker Image in which zsh & oh-my-zsh have been pre-installed.","title":"There are three steps:"},{"location":"2_Software_Engineering/Docker/Docker_Command/","text":"Docker command line \u2693\ufe0e Useful link for understanding Docker concepts: What Is a Dockerfile: Everything You Need to Know Top Docker Commands That You Need to Master I. Docker Image \u2693\ufe0e Create an image: \u2693\ufe0e Create a Docker file: .dockerfile mkdir Docker_images cd Docker_images vi Dockerfile FROM ubuntu MAINTAINER simpli RUN apt-get update CMD [ \"echo\" , \"Welcome to Simplilearn\" ] Build a Docker Image with Dockerfile and tag: Git Bash docker build -t simpli_image /D/Docker_images = > [ location of your dockerfile ] Check the images we have: \u2693\ufe0e Delete some image: \u2693\ufe0e II. Docker Container \u2693\ufe0e Create a container based on the image: \u2693\ufe0e Git Bash docker run --name simpli_container simpli_image Display a list of launched containers: \u2693\ufe0e Git Bash docker ps -a Rename an existing container: \u2693\ufe0e Git Bash docker rename [ CONTAINER_NAME ] [ NEW_CONTAINER_NAME ] Pause a running container: \u2693\ufe0e Git Bash docker pause [ CONTAINER_NAME ] Stop a running container: \u2693\ufe0e (somehow directly deleted the container) Git Bash docker stop [ CONTAINER_NAME ] Restart a running container: \u2693\ufe0e (somehow directly clear the setting of container) Git Bash docker stop [ CONTAINER_NAME ] Removes all the stopped containers: \u2693\ufe0e Git Bash docker container prune [ OPTIONS ] Quit and delete the running containers: \u2693\ufe0e Git Bash exit Remove an existing container: \u2693\ufe0e Git Bash docker rm [ CONTAINER ] Create a new image from a container\u2019s file changes: \u2693\ufe0e Git Bash docker container commit [ OPTIONS ] [ CONTAINER_ID ] [ NEW_IMAGE_NAME ] The sub-explanation of Docker Compose: What is Docker Compose: Example, Benefits and Basic Commands","title":"Command Line"},{"location":"2_Software_Engineering/Docker/Docker_Command/#docker-command-line","text":"Useful link for understanding Docker concepts: What Is a Dockerfile: Everything You Need to Know Top Docker Commands That You Need to Master","title":"Docker command line"},{"location":"2_Software_Engineering/Docker/Docker_Command/#i-docker-image","text":"","title":"I. Docker Image"},{"location":"2_Software_Engineering/Docker/Docker_Command/#ii-docker-container","text":"","title":"II. Docker Container"},{"location":"2_Software_Engineering/Docker/Docker_compose/","text":"Docker Compose and it's application \u2693\ufe0e We have already touched Docker Compose from Guidance . Now it is time to do some advance behaviors based on Docker Compose ! Docker Compose is a way to handle more than one DocKer Container . That is setting communiation between DocKer Container s. In this section, we will iterate all the situation between Server and Host combination to finally reach the goal of DocKer Container communications. Assume our mock server looks like this: mockapi.js const express = require ( ' express ' ) const app = express () const port = 3000 var path = require ( ' path ' ) var bodyParser = require ( ' body - parser ' ) app . use ( express . static ( path . join ( __dirname , ' build ' ))); var WeatherDataController = require ( ' . / REST_API / weather ' ); app . get ( ' / data / 2.5 / weather ' , WeatherDataController . getData ); // //app.get('/data/2.5/weather', (req, res) => { // res.json({\"coord\":{\"lon\":123.262,\"lat\":44.5646},\"weather\":[{\"id\":801,\"main\":\"Clouds\",\"description\":\"few clouds\",\"icon\":\"02d\"}],\"base\":\"stations\",\"main\":{\"temp\":285.23,\"feels_like\":284.95,\"temp_min\":285.23,\"temp_max\":285.23,\"pressure\":1014,\"humidity\":94,\"sea_level\":1014,\"grnd_level\":997},\"visibility\":10000,\"wind\":{\"speed\":3.41,\"deg\":190,\"gust\":9.72},\"clouds\":{\"all\":18},\"dt\":1664661306,\"sys\":{\"country\":\"CN\",\"sunrise\":1664660711,\"sunset\":1664702853},\"timezone\":28800,\"id\":2036338,\"name\":\"Kaitong\",\"cod\":200}) //}) app . listen ( port , () => { console . log ( ` Example app listening on port $ { port } ` ) }) 1. Server and client in the same Docker container \u2693\ufe0e Concept Diagram? S_d&C_d.yml services : server : image : \"swiftlang/swift:nightly-focal\" #simpli_image volumes : - \"C:/CS561_WEEK8:/code\" environment : - USER=ytl_5 command : bash -c \"apt-get update && apt-get install -y nodejs && node /code/myapp/app.js\" Bash #Host: docker-compose run --rm --name myserver server #Docker: curl localhost:3000/data/2.5/Weather 2. Server in Docker container, client on host \u2693\ufe0e Concept Diagram? S_d&C_h.yml services : server : image : \"swiftlang/swift:nightly-focal\" #simpli_image volumes : - \"C:/CS561_WEEK8:/code\" environment : - USER=ytl_5 command : bash -c \"apt-get update && apt-get install -y nodejs && node /code/myapp/app.js\" ports : -\"3000:3000\" Bash #Host: docker-compose run --rm --service-ports server #Host: curl localhost:3000/data/2.5/Weather 3. Server on host, client in Docker container \u2693\ufe0e Concept Diagram? S_h&C_d.yml services : client : image : \"swiftlang/swift:nightly-focal\" #simpli_image volumes : - \"C:/CS561_WEEK8:/code\" environment : - USER=ytl_5 command : bash -c \"apt-get update && apt-get install -y nodejs && node /code/myapp/app.js\" Bash #Host: docker-compose run --rm client #Docker Container: curl host.docker.internal:3000/data/2.5/weather 4. Server in Docker container, client in another Docker container \u2693\ufe0e Concept Diagram? S_d&C_another_d.yml services : server : image : \"swiftlang/swift:nightly-focal\" volumes : - \"C:/CS561_WEEK8:/code\" environment : - USER=ytl_5 command : bash -c \"apt-get update && apt-get install -y nodejs && node /code/myapp/app.js\" client : image : \"swiftlang/swift:nightly-focal\" volumes : - \"C:/CS561_WEEK8:/code\" - USER=ytl_5 Bash #Host: docker-compose run --rm --name myserver server docker inspect myserver | grep IPAddress docker-compose run --rm --name myclient client docker inspect myclient | grep IPAddress #Docker Container: curl <server ip address>:3000/data/2.5/weather","title":"Docker Compose"},{"location":"2_Software_Engineering/Docker/Docker_compose/#docker-compose-and-its-application","text":"We have already touched Docker Compose from Guidance . Now it is time to do some advance behaviors based on Docker Compose ! Docker Compose is a way to handle more than one DocKer Container . That is setting communiation between DocKer Container s. In this section, we will iterate all the situation between Server and Host combination to finally reach the goal of DocKer Container communications. Assume our mock server looks like this: mockapi.js const express = require ( ' express ' ) const app = express () const port = 3000 var path = require ( ' path ' ) var bodyParser = require ( ' body - parser ' ) app . use ( express . static ( path . join ( __dirname , ' build ' ))); var WeatherDataController = require ( ' . / REST_API / weather ' ); app . get ( ' / data / 2.5 / weather ' , WeatherDataController . getData ); // //app.get('/data/2.5/weather', (req, res) => { // res.json({\"coord\":{\"lon\":123.262,\"lat\":44.5646},\"weather\":[{\"id\":801,\"main\":\"Clouds\",\"description\":\"few clouds\",\"icon\":\"02d\"}],\"base\":\"stations\",\"main\":{\"temp\":285.23,\"feels_like\":284.95,\"temp_min\":285.23,\"temp_max\":285.23,\"pressure\":1014,\"humidity\":94,\"sea_level\":1014,\"grnd_level\":997},\"visibility\":10000,\"wind\":{\"speed\":3.41,\"deg\":190,\"gust\":9.72},\"clouds\":{\"all\":18},\"dt\":1664661306,\"sys\":{\"country\":\"CN\",\"sunrise\":1664660711,\"sunset\":1664702853},\"timezone\":28800,\"id\":2036338,\"name\":\"Kaitong\",\"cod\":200}) //}) app . listen ( port , () => { console . log ( ` Example app listening on port $ { port } ` ) })","title":"Docker Compose and it's application"},{"location":"2_Software_Engineering/Docker/Docker_compose/#1--server-and-client-in-the-same-docker-container","text":"Concept Diagram? S_d&C_d.yml services : server : image : \"swiftlang/swift:nightly-focal\" #simpli_image volumes : - \"C:/CS561_WEEK8:/code\" environment : - USER=ytl_5 command : bash -c \"apt-get update && apt-get install -y nodejs && node /code/myapp/app.js\" Bash #Host: docker-compose run --rm --name myserver server #Docker: curl localhost:3000/data/2.5/Weather","title":"1.  Server and client in the same Docker container"},{"location":"2_Software_Engineering/Docker/Docker_compose/#2--server-in-docker-container-client-on-host","text":"Concept Diagram? S_d&C_h.yml services : server : image : \"swiftlang/swift:nightly-focal\" #simpli_image volumes : - \"C:/CS561_WEEK8:/code\" environment : - USER=ytl_5 command : bash -c \"apt-get update && apt-get install -y nodejs && node /code/myapp/app.js\" ports : -\"3000:3000\" Bash #Host: docker-compose run --rm --service-ports server #Host: curl localhost:3000/data/2.5/Weather","title":"2.  Server in Docker container, client on host"},{"location":"2_Software_Engineering/Docker/Docker_compose/#3--server-on-host-client-in-docker-container","text":"Concept Diagram? S_h&C_d.yml services : client : image : \"swiftlang/swift:nightly-focal\" #simpli_image volumes : - \"C:/CS561_WEEK8:/code\" environment : - USER=ytl_5 command : bash -c \"apt-get update && apt-get install -y nodejs && node /code/myapp/app.js\" Bash #Host: docker-compose run --rm client #Docker Container: curl host.docker.internal:3000/data/2.5/weather","title":"3.  Server on host, client in Docker container"},{"location":"2_Software_Engineering/Docker/Docker_compose/#4--server-in-docker-container-client-in-another-docker-container","text":"Concept Diagram? S_d&C_another_d.yml services : server : image : \"swiftlang/swift:nightly-focal\" volumes : - \"C:/CS561_WEEK8:/code\" environment : - USER=ytl_5 command : bash -c \"apt-get update && apt-get install -y nodejs && node /code/myapp/app.js\" client : image : \"swiftlang/swift:nightly-focal\" volumes : - \"C:/CS561_WEEK8:/code\" - USER=ytl_5 Bash #Host: docker-compose run --rm --name myserver server docker inspect myserver | grep IPAddress docker-compose run --rm --name myclient client docker inspect myclient | grep IPAddress #Docker Container: curl <server ip address>:3000/data/2.5/weather","title":"4.  Server in Docker container, client in another Docker container"},{"location":"2_Software_Engineering/Docker/Guidance/","text":"Basic guidance of docker container \u2693\ufe0e Docker is a useful tool with CI and backend work. Especially there are some cases that we need to test code in different system. Let's take swift as an example. We make it works on Windows 10. Step 1. Install Docker Desktop \u2693\ufe0e We can download Docker Desktop from the website and install it on your Windows 10. Step 2. Run Docker Container \u2693\ufe0e To run Docker Container , firstly you need to have a Docker Image . There are two ways to have an Image : Create an Image by using dockerfile (see in A good model for Docker Image initialization ). Git clone an Image from Docker Hub. After you have the Docker Image as the system mirror settings, you can create a Docker Container as an realization of the system. There are two ways to create the Docker Container : Docker run . Docker compose .","title":"**Basic guidance of docker container**"},{"location":"2_Software_Engineering/Docker/Guidance/#basic-guidance-of-docker-container","text":"Docker is a useful tool with CI and backend work. Especially there are some cases that we need to test code in different system. Let's take swift as an example. We make it works on Windows 10.","title":"Basic guidance of docker container"},{"location":"2_Software_Engineering/Docker/Guidance/docker_compose/","text":"Run container by using docker compse \u2693\ufe0e Step 1. Create a docker-compose.yml file \u2693\ufe0e docker-compose.yml services : dev : image : \"swiftlang/swift:nightly-focal\" #Default setting package for your system volumes : - /Users/<YOUR_DIC_TO_INSTALL_SWIFT>/swift:/code environment : - USER=<YOUR_NAME> Step 2. Launch the dev Docker service created in Step 2 \u2693\ufe0e Turn on your Docker Desktop. Then run the code below. Once inside your docker container, cd code . From \\code directory you can run the swift command. Git Bash docker-compose run --rm dev","title":"Compose -> Container"},{"location":"2_Software_Engineering/Docker/Guidance/docker_compose/#run-container-by-using-docker-compse","text":"","title":"Run container by using docker compse"},{"location":"2_Software_Engineering/Docker/Guidance/docker_run/","text":"Run container by using docker run \u2693\ufe0e Safely running Docker Container \u2693\ufe0e Instead of running docker run --rm dev in the terminal, I suggest directly using Docker Desktop to run docker image that you cloned from the Docker Hub or the one created by yourself ( see in A good model for Docker Image initialization or in Confluence ) If you close your terminal window that ran docker run --rm dev , it will somewhat pause your container then you can not re- start the docker container you created again because you have already closed your terminal process. (This case also equals to you pause your container in Docker Desktop, and you suddenly turn Docker Desktop off. If you reopen the Docker engine again and try to start the container, you are forbidden to do it. I struggled with this lots of times at the start.) Instead, I directly run the image I have in Docker Desktop. And once I want to stop my container (save all the installed files in it and run again in the future) and shut down my laptop, I directly click stop of the container and turn off the Docker Desktop engine for next time use. Danger (It doesn't mean you cannot run the terminal anymore. After you run the container through the Docker Desktop engine, you can open any terminal to edit your container status. Just at this time. closing the terminal will not affect your container process.)","title":"Run -> Container"},{"location":"2_Software_Engineering/Docker/Guidance/docker_run/#run-container-by-using-docker-run","text":"","title":"Run container by using docker run"},{"location":"2_Software_Engineering/Github/","text":"Git & Github \u2693\ufe0e Version control is important especially when we are collaborating with others for a big project. Git is one of the tools for version control. GitHub is a cloud service for uploading and storing repos you edit locally. This section is split into below sections: \u2693\ufe0e Git theory for understanding Git essence (\ud83d\udcaf Highly recommend reading first before using the command line). Git commands for a start using Git commands. GitHub Action for CI.","title":"**:simple-git:{.e_swift} Git & :simple-github:{.e_github} Github**"},{"location":"2_Software_Engineering/Github/#git---github","text":"Version control is important especially when we are collaborating with others for a big project. Git is one of the tools for version control. GitHub is a cloud service for uploading and storing repos you edit locally.","title":" Git &amp;  Github"},{"location":"2_Software_Engineering/Github/action/","text":"GitHub Action \u2693\ufe0e","title":"GitHub Action"},{"location":"2_Software_Engineering/Github/action/#github-action","text":"","title":" GitHub Action"},{"location":"2_Software_Engineering/Github/commands/","text":"Git Basic Commands \u2693\ufe0e Initialize Git repo \u2693\ufe0e Initialize the local repository by using: git init Check status \u2693\ufe0e Create a README.md file: Check the status of the local repo by using: git status Add changes \u2693\ufe0e Add changes into the staging area by using: git add . or git add * Recheck the status : Commit to the local repo \u2693\ufe0e Commit the new snapshot to the local repo: git commit -m \"<mesage>\" Recheck the status : Rename branch name \u2693\ufe0e Rename the main branch named from master into main by using: git branch -m master main Recheck the status : Create a branch and switch \u2693\ufe0e Create a new branch by using: git branch m_branch_1 Then switch to the new branch : git checkout m_branch_1 Or you can do one step instead of the above to command lines: git checkout -b m_branch_1 Recheck the status : Merge changes into main \u2693\ufe0e Edit the README.md file by: vim README.md Commit the new branch : git commit -a -m 'Added encourage sentence' Switch back to the main branch and merge the new branch into the main branch : git merge m_branch_1 Check the commit history \u2693\ufe0e Take a look at git log: git log Use graph selection in git log: git log --graph --oneline --decorate --all More details: git log --graph --abbrev-commit --decorate --date=relative --all In Sourcetree : Rebase branch \u2693\ufe0e We rebase main branch into m_branch_2 : git rebase m_branch_2 Check the folder in different branches: Warning Even though we rebase the main branch onto (or on top of ) m_branch_2 , since we cannot delete the main branch , there is NO DIFFERENCE WITH rebasing m_branch_2 onto the main branch : Squash and merge \u2693\ufe0e Look at the commit history below; we want to squash the last three commits on m_branch2 into one: We use this rebase command with interactive selection: git rebase -i HEAD~3 ; Do the edition as below: Before After Then it will automatically commit . You should add some commit messages: Before After After finishing squash , the terminal will return: The commit history will look like this: Finally, We merge the m_branch_2 into the main : Automatically commit and ask for a commit message: The commit history now looks like the below:","title":"Git Commands"},{"location":"2_Software_Engineering/Github/commands/#git-basic-commands","text":"","title":" Git Basic Commands"},{"location":"2_Software_Engineering/Github/commands/#initialize-git-repo","text":"Initialize the local repository by using: git init","title":"Initialize Git repo"},{"location":"2_Software_Engineering/Github/commands/#check-status","text":"Create a README.md file: Check the status of the local repo by using: git status","title":"Check status"},{"location":"2_Software_Engineering/Github/commands/#add-changes","text":"Add changes into the staging area by using: git add . or git add * Recheck the status :","title":"Add changes"},{"location":"2_Software_Engineering/Github/commands/#commit-to-the-local-repo","text":"Commit the new snapshot to the local repo: git commit -m \"<mesage>\" Recheck the status :","title":"Commit to the local repo"},{"location":"2_Software_Engineering/Github/commands/#rename-branch-name","text":"Rename the main branch named from master into main by using: git branch -m master main Recheck the status :","title":"Rename branch name"},{"location":"2_Software_Engineering/Github/commands/#create-a-branch-and-switch","text":"Create a new branch by using: git branch m_branch_1 Then switch to the new branch : git checkout m_branch_1 Or you can do one step instead of the above to command lines: git checkout -b m_branch_1 Recheck the status :","title":"Create a branch and switch"},{"location":"2_Software_Engineering/Github/commands/#merge-changes-into-main","text":"Edit the README.md file by: vim README.md Commit the new branch : git commit -a -m 'Added encourage sentence' Switch back to the main branch and merge the new branch into the main branch : git merge m_branch_1","title":"Merge changes into main"},{"location":"2_Software_Engineering/Github/commands/#check-the-commit-history","text":"Take a look at git log: git log Use graph selection in git log: git log --graph --oneline --decorate --all More details: git log --graph --abbrev-commit --decorate --date=relative --all In Sourcetree :","title":"Check the commit history"},{"location":"2_Software_Engineering/Github/commands/#rebase-branch","text":"We rebase main branch into m_branch_2 : git rebase m_branch_2 Check the folder in different branches: Warning Even though we rebase the main branch onto (or on top of ) m_branch_2 , since we cannot delete the main branch , there is NO DIFFERENCE WITH rebasing m_branch_2 onto the main branch :","title":"Rebase branch"},{"location":"2_Software_Engineering/Github/commands/#squash-and-merge","text":"Look at the commit history below; we want to squash the last three commits on m_branch2 into one: We use this rebase command with interactive selection: git rebase -i HEAD~3 ; Do the edition as below: Before After Then it will automatically commit . You should add some commit messages: Before After After finishing squash , the terminal will return: The commit history will look like this: Finally, We merge the m_branch_2 into the main : Automatically commit and ask for a commit message: The commit history now looks like the below:","title":"Squash and merge"},{"location":"2_Software_Engineering/Github/theory/","text":"Git Theory \u2693\ufe0e When you are first using Git, you must feel confused about the questions shown below Question How does Git help us do version control? What is commit essentially? What is branch essentially? What is diff essentially? Does committing equal patching ? What is rebase essentially? I hope this section can help you to understand Git behaviors deeply. Git objects \u2693\ufe0e Git repository is constructed by Git objects . Git references each object by using their object ID (OID for short). Note Git objects has three types: blob , tree , and commit . They have below functions: blob file contents tree directory listings commit snapshots Commands and commit history that we will use The command that we can retrieve the OID of Git objects : git rev-parse <ref>\u200b <ref> will be the parameters below: HEAD : the currently checked-out branch's latest commit. HEAD^{tree} : the root tree of the currently checked-out branch's latest commit. HEAD:<file path> : the file content at the moment of the currently checked-out branch's latest commit. The command that we decrypt the OID SHA-1 hash into plain-text files: git rev-parse <ref>\u200b In the commit history, please focus on the commit hash: Git file content storage: blob \u2693\ufe0e blobs contain file contents . Let's use the command lines: git rev-parse HEAD:README.md and git cat-file -p <OID> | head -n 8 The contents at HEAD:README.md matches the README.md file contents in the current working directory : Git directory: tree \u2693\ufe0e We should notice that blobs only contain file contents. However, trees record files' names and their directories . The concept can be seen in the graph as shown below: Let's use the command lines: git rev-parse HEAD^{tree} and git cat-file -p <OID> | head -n 15 As shown below, a tree is an ordered column list of: file modes , paired with object types , the OID , and path entries for the object at that path. Reminding The objects shown in the list are all blobs . But the objects can also be trees . When some objects in the tree are trees , they are subdirectories . Trees can point to other trees! \ud83d\ude0e Git history snapshot: commit \u2693\ufe0e The tree itself doesn\u2019t know where it exists within the repository; that is the role of the objects pointing to the tree. The object role is the commit ! To understand the commit more straightforward, firstly, let's use the command lines: git rev-parse HEAD and git cat-file -p <OID> Combining the concept map below, each commit contains: A pointer to its root tree , representing the state of the working directory at that time. A list of parent commits corresponding to the previous snapshots (commits). A commit with no parents is a root commit, and a commit with multiple parents is a merge commit. Commits also contain Metadata describing the snapshot. Such as: Author and committer's name, email address, and date A commit message. The commit message is an opportunity for the commit author to describe the purpose of that commit with respect to the parents. All in all, we call commit a snapshot in time. Remember the commit history from Sourcetree . The snapshot is a \"slice\" of your local repo at some node point in time. Snapshot is to a repository, as a screenshot is to a video. Git branch \u2693\ufe0e In Git, we use branches as pointers to the commits to move around the Git history and make changes instead of directly referring to OIDs most of the time. In other words, the branch file contains the OID of a commit. Don't believe me? Let's see what is a main branch in the working directory: .git/refs/heads : Directory Sourcetree Familiar with the OID 0d49b6d5afa5762d5e8a261008b14f574bbc1f01 ? Check the OID shown in the terminal of Git history snapshot: commit ! Yes, right now main branch points to the same OID that HEAD points to: Tip Branches are significantly different from Git objects we talked before: Commits , trees , and blobs CANNOT change their contents once created (immutable). Branches can be moved to track a specific commit branch (like the \" tail \" of the link list ). E.g: if we update the current branch by creating new commits, both HEAD and the branch main will update to point to that new commit! Big graph \u2693\ufe0e From what we have learned from Git objects and Git branchs , we can treat the local repo as the objects diagram shown below: Hierarchy branches commits commits other commits their root trees trees \u2003\u2003 other trees blobs blobs \u2003\u2002 nothing. Important conclusions Time moves from left to right . Commit dependencies are from right to left . Each commit has a single root tree . Same blobs are reachable from multiple root trees . Since these trees reference trees and blobs by their OID, these snapshots DON'T need multiple copies . of the same data. Git diff \u2693\ufe0e So far, we know that Git stores series of commits . But why doesn't Git store data as a series of changesets or differences ? In fact, sometimes the commits use the function of the diff , but not all the time. According to Derrick Stolee 's favorite analogies, think of commits as having a wave/partical duality in physics, where sometimes they are treated like snapshots and other times they are treated like diffs . Simply, we can have following formula: \\[ commits = diffs \\cup snapshots \\] So, what is the diff ? The diff is dynamically generated from the snapshot data (blobs) by comparing the root trees of the commit and its parent. Git can compare ANY two snapshots in time, not just adjacent commits. The comparison starts with the root trees , which are always different. The Git performs a depth-first-search (DFS) on the subtrees by following pairs when paths for the current tree have different OIDs . Take the diagram as an example shown below: Let's do DFS following pairs! The root trees have different values for the docs , so we recurse into those two trees. Those trees have different values for M.md : so those two blobs are compared line-by-line ; and that diff is shown. Still, within docs , N.md is the same, so that is skipped, and we pop back to the root tree. The root tree then sees that the things directories have equal OIDs as well as the README.md entries. In the diagram above, we notice that the things tree is never visited, and so none of its reachable objects are visited. This way, the cost of computing a diff is relative to the number of paths with different content . Notice!\u2003 commit, \u274c patch With commit , parent information, including differences, has been stored. That's why Git does not choose the patch as the functional implementation. Patch only implements the diff part but cannot traverse commit history. Snapshots record the commit history in time. Two commands implementing diff \u2693\ufe0e git cherry-pick \u2693\ufe0e The git cherry-pick <OID> command creates a new commit with an identical diff (arbitrary diff between two neighbor commits) to the new commit whose parent is the current commit. Steps of cherry-pick : Compute the diff between the commit and its parent. Apply that diff to the current HEAD. Create a new commit whose root tree matches the new working directory and whose parent is the commit at HEAD. Move the ref at HEAD to that new commit. Important! We didn\u2019t \u201cmove\u201d the commit to be on top of our current HEAD; We created a new commit whose diff matches the old commit. git rebase \u2693\ufe0e The git rebase command in the most basic form is like a series of git cherry-pick commands, replaying diffs on top of a different commit. Steps of rebase : In default, git rebase <target> will discover the list of commits that are reachable from HEAD but not reachable from <target> . [Example]: the common base P is computed to determine the commit list A , B , and C . Then, the rebase command navigates to the <target> location and performs git cherry-pick commands on this commit list , starting from the oldest commits. [Example]: then cherry-picked on top of the target to construct new commits in sequence: A' , B' , and C' . Important! The commits A' , B' , and C' are brand new commits that share a lot of information with A , B , and C , but are distinct new objects (their OIDs are totally different). In fact, the old commits still exist in your repository until garbage collection runs . git add and git commit \u2693\ufe0e Known the basic theory of Git, let's go back to the two basic Git command: git add and git commit . The diagram shown below is the design of them two. git add \u2693\ufe0e What do git add do? git add create blobs for newly added files and append index for both creating and editing blob. Let's directly create a new file named intro.txt in the main branch and git add . : If we directly check the index file under ./.git , it shows messy code. We use the command line to check what is in the index: git ls-files --stage We can see; now an OID has been added to the index list for mapping intro.txt . Let's check the OID: 659096bbe255c5137a9020740d077a5071b13ff7 Oh yeah! It is the new file's content! Combining the knowledge in Git blob , you are 100% sure: The OID (or hash index/key) was appended in the index folder because we have also created a blob file when we do git add . Explore OID: 659096bbe255c5137a9020740d077a5071b13ff7 Let's check the folder: ./.git/objects . REMEMBER: OID above is 65 + 9096bbe255c5137a9020740d077a5071b13ff7 We select the folder named 65 since We see the file with the hash of the second part of the OID: 9096bbe255c5137a9020740d077a5071b13ff7 In fact, we can directly use the first 7 digits of the OID to check the object's type and content: git commit \u2693\ufe0e What do git commit do? git commit based on the blobs in the local repo, furtherly create a new commit and it's root tree for them. Let's git commit -m \"added intro.txt\" : Go into the ./.git/objects folder. We can see the two created folders: ce b9 Now you are 100% sure: there is one object tree and another commit . Explore folder ce and b9 By combining the contents in the fold file's hash, we can get two OIDs: OID1: ce + bc14637e116de809cfb39fc6d021f5ba54d015 = cebc14637e116de809cfb39fc6d021f5ba54d015 OID2: b9 + 56ad5fbafbfc0050d73a7289661ceb764f5a8f = b956ad5fbafbfc0050d73a7289661ceb764f5a8f As we concluded at the end of git add , we only use the first 7 digits and use git cat-file -t <OID> and git cat-file -p <OID> : Yeah! cebc146 is the commit object! Yeah! b956ad5 is the tree object! Git functions looks easy but there are some concepts are confusing. I have spent a whole week figuring out what was going on in deep. Then I spent two days for the conclusion in this section. If you check this article in details, I believe, you will treat Git in different angle! \ud83c\udfd6\ufe0f\ud83c\udf7b Also don't forget to check if you can answer the questions at the start of this article. \ud83d\udcaf\ud83e\udd34 References: \u2693\ufe0e Commits are snapshots, not diffs","title":"Git Theory"},{"location":"2_Software_Engineering/Github/theory/#git-theory","text":"When you are first using Git, you must feel confused about the questions shown below Question How does Git help us do version control? What is commit essentially? What is branch essentially? What is diff essentially? Does committing equal patching ? What is rebase essentially? I hope this section can help you to understand Git behaviors deeply.","title":" Git Theory"},{"location":"2_Software_Engineering/Github/theory/#git-objects","text":"Git repository is constructed by Git objects . Git references each object by using their object ID (OID for short). Note Git objects has three types: blob , tree , and commit . They have below functions: blob file contents tree directory listings commit snapshots Commands and commit history that we will use The command that we can retrieve the OID of Git objects : git rev-parse <ref>\u200b <ref> will be the parameters below: HEAD : the currently checked-out branch's latest commit. HEAD^{tree} : the root tree of the currently checked-out branch's latest commit. HEAD:<file path> : the file content at the moment of the currently checked-out branch's latest commit. The command that we decrypt the OID SHA-1 hash into plain-text files: git rev-parse <ref>\u200b In the commit history, please focus on the commit hash:","title":"Git objects"},{"location":"2_Software_Engineering/Github/theory/#git-branch","text":"In Git, we use branches as pointers to the commits to move around the Git history and make changes instead of directly referring to OIDs most of the time. In other words, the branch file contains the OID of a commit. Don't believe me? Let's see what is a main branch in the working directory: .git/refs/heads : Directory Sourcetree Familiar with the OID 0d49b6d5afa5762d5e8a261008b14f574bbc1f01 ? Check the OID shown in the terminal of Git history snapshot: commit ! Yes, right now main branch points to the same OID that HEAD points to: Tip Branches are significantly different from Git objects we talked before: Commits , trees , and blobs CANNOT change their contents once created (immutable). Branches can be moved to track a specific commit branch (like the \" tail \" of the link list ). E.g: if we update the current branch by creating new commits, both HEAD and the branch main will update to point to that new commit!","title":"Git branch"},{"location":"2_Software_Engineering/Github/theory/#big-graph","text":"From what we have learned from Git objects and Git branchs , we can treat the local repo as the objects diagram shown below: Hierarchy branches commits commits other commits their root trees trees \u2003\u2003 other trees blobs blobs \u2003\u2002 nothing. Important conclusions Time moves from left to right . Commit dependencies are from right to left . Each commit has a single root tree . Same blobs are reachable from multiple root trees . Since these trees reference trees and blobs by their OID, these snapshots DON'T need multiple copies . of the same data.","title":"Big graph"},{"location":"2_Software_Engineering/Github/theory/#git-diff","text":"So far, we know that Git stores series of commits . But why doesn't Git store data as a series of changesets or differences ? In fact, sometimes the commits use the function of the diff , but not all the time. According to Derrick Stolee 's favorite analogies, think of commits as having a wave/partical duality in physics, where sometimes they are treated like snapshots and other times they are treated like diffs . Simply, we can have following formula: \\[ commits = diffs \\cup snapshots \\] So, what is the diff ? The diff is dynamically generated from the snapshot data (blobs) by comparing the root trees of the commit and its parent. Git can compare ANY two snapshots in time, not just adjacent commits. The comparison starts with the root trees , which are always different. The Git performs a depth-first-search (DFS) on the subtrees by following pairs when paths for the current tree have different OIDs . Take the diagram as an example shown below: Let's do DFS following pairs! The root trees have different values for the docs , so we recurse into those two trees. Those trees have different values for M.md : so those two blobs are compared line-by-line ; and that diff is shown. Still, within docs , N.md is the same, so that is skipped, and we pop back to the root tree. The root tree then sees that the things directories have equal OIDs as well as the README.md entries. In the diagram above, we notice that the things tree is never visited, and so none of its reachable objects are visited. This way, the cost of computing a diff is relative to the number of paths with different content . Notice!\u2003 commit, \u274c patch With commit , parent information, including differences, has been stored. That's why Git does not choose the patch as the functional implementation. Patch only implements the diff part but cannot traverse commit history. Snapshots record the commit history in time.","title":"Git diff"},{"location":"2_Software_Engineering/Github/theory/#two-commands-implementing-diff","text":"","title":"Two commands implementing diff"},{"location":"2_Software_Engineering/Github/theory/#git-add-and-git-commit","text":"Known the basic theory of Git, let's go back to the two basic Git command: git add and git commit . The diagram shown below is the design of them two.","title":"git add and git commit"},{"location":"2_Software_Engineering/Others/","text":"Others \u2693\ufe0e Section with topics waiting for being classified.","title":"**Others**"},{"location":"2_Software_Engineering/Others/#others","text":"Section with topics waiting for being classified.","title":"Others"},{"location":"2_Software_Engineering/Others/Concurrency/","text":"Concurrency v.s. Parallelism \u2693\ufe0e Look at the picture shown below (from Concurrency vs Parallelism ) to understand the difference between concurrency and parallelism:","title":"Concurrency v.s. Parallelism"},{"location":"2_Software_Engineering/Others/Concurrency/#concurrency-vs-parallelism","text":"Look at the picture shown below (from Concurrency vs Parallelism ) to understand the difference between concurrency and parallelism:","title":"Concurrency v.s. Parallelism"},{"location":"2_Software_Engineering/Others/Lock_mutex_semaphore/","text":"Lock, Mutex, and Semaphore \u2693\ufe0e","title":"Lock, mutex, and Semaphore"},{"location":"2_Software_Engineering/Others/Lock_mutex_semaphore/#lock-mutex-and-semaphore","text":"","title":"Lock, Mutex, and Semaphore"},{"location":"2_Software_Engineering/Others/SSH/","text":"","title":"SSH"},{"location":"2_Software_Engineering/Others/Self_documenting_code/","text":"\ud83d\ude0e Self-documenting Code \u2693\ufe0e About the topic \u2693\ufe0e Let's look at the code case shown below: Question What does the code below for? question.c++ float a , b , c ; a = 9.81 ; b = 5 ; c = .5 * a * ( b ^ 2 ); Of course, it is hard to read and understand the code above. Let's see the self-documenting version of the last code block: Self-documenting version improved_1.c++ const float gravitationalForce = 9.81 ; float timeInSeconds = 5 ; float displacement = ( 1 / 2 ) * gravitationalForce * ( timeInSeconds ^ 2 ); Now, you can feel that self-documenting is a good code-writing habit for code understanding and development, even if we do not have comments. But! If your self-documenting is too complex, the variable name itself will cause code smell, which affects the readability of codes. So why not also add comments! Self-documenting + Comment version improved_2.c++ /* compute displacement with Newton's equation x = v\u2092t + \u00bdat\u00b2 */ const float gravitationalForce = 9.81 ; float timeInSeconds = 5 ; float displacement = ( 1 / 2 ) * gravitationalForce * ( timeInSeconds ^ 2 ); But do not add comments on each line: Bad Comment example bad.c++ const float a = 9.81 ; //gravitational force float b = 5 ; //time in seconds float c = ( 1 / 2 ) * a * ( b ^ 2 ) //multiply the time and gravity together to get displacement. If your team requires zero comments coding style, transfer your code block with comments into function closure : Self-documenting + Function closure version improved_3.c++ float computeDisplacement ( float timeInSeconds ) { const float gravitationalForce = 9.81 ; float displacement = ( 1 / 2 ) * gravitationalForce * ( timeInSeconds ^ 2 ); return displacement ; } Self-documenting in Swift \u2693\ufe0e Let's see how to do self-documenting in Swift : Question question.swift import Foundation func greet ( _ s1 : String , _ s2 : String ) -> String { return \"Hello \\( s1 ) ! Glad you could visit from \\( s2 ) .\" } assert ( greet ( \"Will\" , \"Portland\" ) == \"Hello Will! Glad you could visit from Portland.\" ) Notice! Swift restricts the parameter name before each argument input when we implement the function, i.e., you are not encouraged to run greet(\"Bill\", \"Cupertino\") unless you use _ ( Omitting Argument Labels ) before parameter name in the function signature . This semantic diminishes ambiguities when compiler compiling. In Swift , each function parameter has both a parameter name and an argument label . The parameter name is used in the implementation of the function (in function signature ). The argument label is used when calling the function ; each argument is written in the function call with its argument label before it (in call site ). So we do self-documenting firstly based on refining parameter name . Self-documenting in Swift improved_1.swift import Foundation func greet ( person : String , hometown : String ) -> String { return \"Hello \\( person ) ! Glad you could visit from \\( hometown ) .\" } assert ( greet ( person : \"Will\" , hometown : \"Portland\" ) == \"Hello Will! Glad you could visit from Portland.\" ) You can observe that when implementing the function, greet(person: \"Will\", hometown: \"Portland\") still reads not like natural language. Let's add argument label ! Self-documenting in Swift + Argument label improved_1.swift import Foundation func greet ( person : String , from hometown : String ) -> String { return \"Hello \\( person ) ! Glad you could visit from \\( hometown ) .\" } assert ( greet ( person : \"Will\" , from : \"Portland\" ) == \"Hello Will! Glad you could visit from Portland.\" ) Thanks, Prof. Will always visits us from Portland! References: \u2693\ufe0e What is self-documenting code and can it replace well documented code? [closed] Function Argument Labels and Parameter Names","title":"Self-documenting code"},{"location":"2_Software_Engineering/Others/Self_documenting_code/#-self-documenting-code","text":"","title":"\ud83d\ude0e Self-documenting Code"},{"location":"2_Software_Engineering/Others/Self_documenting_code/#about-the-topic","text":"Let's look at the code case shown below: Question What does the code below for? question.c++ float a , b , c ; a = 9.81 ; b = 5 ; c = .5 * a * ( b ^ 2 ); Of course, it is hard to read and understand the code above. Let's see the self-documenting version of the last code block: Self-documenting version improved_1.c++ const float gravitationalForce = 9.81 ; float timeInSeconds = 5 ; float displacement = ( 1 / 2 ) * gravitationalForce * ( timeInSeconds ^ 2 ); Now, you can feel that self-documenting is a good code-writing habit for code understanding and development, even if we do not have comments. But! If your self-documenting is too complex, the variable name itself will cause code smell, which affects the readability of codes. So why not also add comments! Self-documenting + Comment version improved_2.c++ /* compute displacement with Newton's equation x = v\u2092t + \u00bdat\u00b2 */ const float gravitationalForce = 9.81 ; float timeInSeconds = 5 ; float displacement = ( 1 / 2 ) * gravitationalForce * ( timeInSeconds ^ 2 ); But do not add comments on each line: Bad Comment example bad.c++ const float a = 9.81 ; //gravitational force float b = 5 ; //time in seconds float c = ( 1 / 2 ) * a * ( b ^ 2 ) //multiply the time and gravity together to get displacement. If your team requires zero comments coding style, transfer your code block with comments into function closure : Self-documenting + Function closure version improved_3.c++ float computeDisplacement ( float timeInSeconds ) { const float gravitationalForce = 9.81 ; float displacement = ( 1 / 2 ) * gravitationalForce * ( timeInSeconds ^ 2 ); return displacement ; }","title":"About the topic"},{"location":"2_Software_Engineering/Others/Self_documenting_code/#self-documenting-in-swift","text":"Let's see how to do self-documenting in Swift : Question question.swift import Foundation func greet ( _ s1 : String , _ s2 : String ) -> String { return \"Hello \\( s1 ) ! Glad you could visit from \\( s2 ) .\" } assert ( greet ( \"Will\" , \"Portland\" ) == \"Hello Will! Glad you could visit from Portland.\" ) Notice! Swift restricts the parameter name before each argument input when we implement the function, i.e., you are not encouraged to run greet(\"Bill\", \"Cupertino\") unless you use _ ( Omitting Argument Labels ) before parameter name in the function signature . This semantic diminishes ambiguities when compiler compiling. In Swift , each function parameter has both a parameter name and an argument label . The parameter name is used in the implementation of the function (in function signature ). The argument label is used when calling the function ; each argument is written in the function call with its argument label before it (in call site ). So we do self-documenting firstly based on refining parameter name . Self-documenting in Swift improved_1.swift import Foundation func greet ( person : String , hometown : String ) -> String { return \"Hello \\( person ) ! Glad you could visit from \\( hometown ) .\" } assert ( greet ( person : \"Will\" , hometown : \"Portland\" ) == \"Hello Will! Glad you could visit from Portland.\" ) You can observe that when implementing the function, greet(person: \"Will\", hometown: \"Portland\") still reads not like natural language. Let's add argument label ! Self-documenting in Swift + Argument label improved_1.swift import Foundation func greet ( person : String , from hometown : String ) -> String { return \"Hello \\( person ) ! Glad you could visit from \\( hometown ) .\" } assert ( greet ( person : \"Will\" , from : \"Portland\" ) == \"Hello Will! Glad you could visit from Portland.\" ) Thanks, Prof. Will always visits us from Portland!","title":"Self-documenting in Swift"},{"location":"2_Software_Engineering/Swift/","text":"Swift \u2693\ufe0e Although I am using Windows 10 and Linux, I never know when I will need to build projects for Mac OS. Time to learn! This sub-chapter can be separated into two sections: \u2693\ufe0e Swift environment installation on Win10 for running Swift on Windows 10. Language Notes for the questions record my practice.","title":"**:material-language-swift:{.e_swift} Swift**"},{"location":"2_Software_Engineering/Swift/#swift","text":"Although I am using Windows 10 and Linux, I never know when I will need to build projects for Mac OS. Time to learn!","title":" Swift"},{"location":"2_Software_Engineering/Swift/Notes/","text":"Notes for Swift learning \u2693\ufe0e Table of contents: \u2693\ufe0e Dispatch queue and Dead lock Map, Filter and Reduce","title":"**:material-language-swift: Notes for Swift learning**"},{"location":"2_Software_Engineering/Swift/Notes/#notes-for-swift-learning","text":"","title":" Notes for Swift learning"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/","text":"Dispatch queue and Dead lock \u2693\ufe0e I. Dispatch queue (from Prof. Will Braynen, OSU) \u2693\ufe0e 1\ufe0f\u20e3 What? \u2693\ufe0e A dispatch queue is an object-like structure that manages the tasks you submit to it. All dispatch queues are first-in, first-out (FIFO) data structures. Thus, the tasks you add to a queue are always started in the same order that they were added.\u201d (source: Apple documentation ). That\u2019s important. 2\ufe0f\u20e3 For? \u2693\ufe0e Well, it\u2019s a way to run multi-threaded code without using threads directly. It\u2019s not as low level as working with threads. 3\ufe0f\u20e3 Diff with threads? \u2693\ufe0e A dispatch queue can manage its own pool thread , etc, and ultimately the point of a dispatch queue is to keep track of what instruction to execute next while giving you a higher-level API instead of dealing with threads directly Whereas you can think of a thread as where instructions actually execute ; for example, a thread might have start , stop , and sleep methods. A thread is short for a thread of execution and is the smallest sequence of programmed instructions that can be managed independently by a scheduler, which is typically [but not always] a part of the operating system \u201d ( wikipedia ). II. Serial queue, Concurrent queue, Main dispatch queue and Thread \u2693\ufe0e \ud83e\udd0f Grammar and Properties \u2693\ufe0e The table below shows how to use the dispatch queue, and in what situation: DQueue type Grammar Properties Serial queue DispatchQueue(lablel:\"..\").sync/.async { \u2026 } Private, conccurrent Concurrent queue DispatchQueue(lablel:\"..\", attributes: .concurrent).sync/.async { \u2026 } Global, parallel Main dispatch queue DispatchQueue.main.sync { \u2026 } Global, conccurrent \ud83d\udc6f\u200d\u2640\ufe0f Dispatch Queue v.s. Thread \u2693\ufe0e The table below concludes the relationship between: D.Queue type / Thread Main thread Other thread Task Processing Type Serial queue sync : main thread N/A N/A async : multiple threads [ serial ] [ concurrent ] Concurrent queue N/A multiple threads [ parallel ] Main dispatch queue main thread N/A [ serial ] Q&A If it is the first time your call let myQueue = DispatchQueue(label:\"test queue\") and sync , how many queues will app have for main thread? Which queue will tasks in sync code block be queuing? Two. One is main queue. Another one is private queue created by let myQueue = DispatchQueue(label:\"test queue\") . Tasks in sync code block will be queuing in the new created private queue. You can also feel the answer from the figure in \"No dead lock case (serial queue with sync)\" What queue will tasks in sync block be on? When you call let myQueue = DispatchQueue(label:\"test queue\") , you will send the code in the block of sync to some other queue besides existing queue (such as main queue). No matter in serial, concurrent or parallel processing, you can always have multiple queues (* but not for threads). What thread will tasks in sync block be on? Remember: Context-switching between threads is expensive. Cheaper to stay on the same thread if you can. Anytime you call sync , even if you do not do DispatchQueue.main.sync { \u2026 } (to send the work to the main dispatch queue) and instead synchronously dispatch to some other queue, even a private queue you created, the task you submitted might still execute on the main thread. What queue and thread will tasks in DispatchQueue.main.sync { \u2026 } block be on? Main queue. Main thread. Deadlock condition? Same thread & serial queue & sync ---> deadlock. III. Dead lock in dispatch queue \u2693\ufe0e To understand dead lock happends in dispatch queue processing, we firstly need to know what is the Concurrency . Dead lock case 1 (dispatch queue) \u2693\ufe0e Code dl_1.swift import Foundation let myQueue = DispatchQueue ( label : \"test queue\" ) print ( \"1\" ) myQueue . async { print ( \"2\" ) myQueue . sync { print ( \"3\" ) } print ( \"4\" ) } print ( \"5\" ) Output Text Only 1 5 2 Explaination Picture Dead lock case 2 (serial queue) \u2693\ufe0e Code dl_2.swift import Foundation print ( \"1\" ) DispatchQueue . main . sync { print ( \"2\" ) } print ( \"3\" ) Output Text Only 1 Explaination Picture Be careful!! Please DISTINGUISH the difference between DispatchQueue.main.sync{...} and myQueue.sync{...} by take a look at the case shown below No dead lock case (serial queue with sync ) \u2693\ufe0e Code ndl.swift import Foundation let myQueue = DispatchQueue ( label : \"test queue\" ) print ( \"1\" ) myQueue . sync { print ( \"2\" ) } print ( \"3\" ) Output Text Only 1 2 3 Explaination Picture Application of Dispatch Queue \u2693\ufe0e The example shown below indicates that we can use Dispatch Queue as a \"thread lock\" to protect the thread processing for a code block from interrupted by other thread. application.swift import Foundation // Read-write pattern - using a serial dispatch queue protocol DataProvider { func getValue ( _ key : String ) -> Int ? func updateValue ( _ key : String , _ value : Int ) } class MockData : DataProvider { func getValue ( _ key : String ) -> Int ? { return 6 } func updateValue ( _ key : String , _ value : Int ) {} } /// A thread-safe data provider class Data : DataProvider { // singleton pattern static let shared = Data () private init () {} private var lookupTable : [ String : Int ] = [:] // Dispatch queue lock for protecting read and write behaviors private let lock = DispatchQueue ( label : \"edu.oregonstate.data-provider-lock\" ) // read func getValue ( _ key : String ) -> Int ? { lock . sync { return lookupTable [ key ] } } // write func updateValue ( _ key : String , _ value : Int ) { lock . async { self . lookupTable [ key ] = value } } } // Thread 1 - reader if ( Data . shared . getValue ( \"a\" ) ?? 0 ) < 5 { // do important stuff } // Thread 2 - writer Data . shared . updateValue ( \"a\" , 5 )","title":"Dispatch queue"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#dispatch-queue-and-dead-lock","text":"","title":"Dispatch queue and Dead lock"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#i-dispatch-queue-from-prof-will-braynen-osu","text":"","title":"I. Dispatch queue (from Prof. Will Braynen, OSU)"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#ii-serial-queue-concurrent-queue-main-dispatch-queue-and-thread","text":"","title":"II. Serial queue, Concurrent queue, Main dispatch queue and Thread"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#iii-dead-lock-in-dispatch-queue","text":"To understand dead lock happends in dispatch queue processing, we firstly need to know what is the Concurrency .","title":"III. Dead lock in dispatch queue"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/","text":"Map, Filter and Reduce \u2693\ufe0e Grammar \u2693\ufe0e Text Only map(function(type1 -> type1)) Text Only filter (function(type1 -> bool)) Text Only reduce(init_val(type3), function(type1, type 2-> type3)) Way1: Function \u2693\ufe0e Example \u2693\ufe0e Steven Luscher on Twitter Code \u2693\ufe0e way1.swift import Foundation func cook ( food : String ) -> String { var transformedFood = \"\" switch food { case \"\ud83c\udf3d\" : transformedFood = \"\ud83c\udf7f\" print ( 1 ) case \"\ud83d\udc2e\" : transformedFood = \"\ud83c\udf54\" print ( 2 ) case \"\ud83d\udc14\" : transformedFood = \"\ud83c\udf73\" print ( 3 ) default : transformedFood = food // remains uncooked } return transformedFood } func eat ( food1 : String , food2 : String ) -> String { var transformedFood = \"\ud83d\udca9\" return transformedFood } func isVegetarian ( dish : String ) -> Bool { return dish == \"\ud83c\udf73\" } //Map let meals = [ \"\ud83c\udf3d\" , \"\ud83d\udc2e\" , \"\ud83d\udc14\" ]. map ( cook ) //Filter let filtered_meals = meals . filter ( isVegetarian ) //Reduce let result = filtered_meals . reduce ( \"\" , eat ) //Print print ( meals ) print ( filtered_meals ) print ( result ) Result \u2693\ufe0e Way2: Closure \u2693\ufe0e Example \u2693\ufe0e Realize the assert shown below with closure: Q2.swift for _ in 0. .. 5 { let foodNames = [ \"\ud83c\udf54\" : \"hamburger\" , \"\ud83c\udf5f\" : \"french fries\" , \"\ud83c\udf3d\" : \"popcorn\" ] var outcome = foodNames . map ({...}). filter ({}). reduce (...,{...}) outcome . removeFirst () assert ( outcome == \"Hamburger Popcorn\" || outcome == \"Popcorn Hamburger\" ) } Code \u2693\ufe0e way2.swift import Foundation for _ in 0. .. 5 { let foodNames = [ \"\ud83c\udf54\" : \"hamburger\" , \"\ud83c\udf5f\" : \"french fries\" , \"\ud83c\udf3d\" : \"popcorn\" ] //Map var mapped = foodNames . map ({( key , value ) -> String in return value . capitalized }) //Filter var filterred = mapped . filter ({( food : String ) -> Bool in return ! ( food == \"French Fries\" )}) //Reduce var reduced = filterred . reduce ( \"\" ,{ a , b in a + \" \" + b }) reduced . removeFirst () var outcome = reduced assert ( outcome == \"Hamburger Popcorn\" || outcome == \"Popcorn Hamburger\" ) } Result \u2693\ufe0e Way3: Using the built-in operator \u2693\ufe0e Example \u2693\ufe0e Realize the assert shown below with built-in operator: Q3.swift let outcome = [ 2 , 3 , 5 , 8 ]. map ({...}). filter ({...}). reduce (...,...) assert ( outcome == 108 ) Code \u2693\ufe0e way3.swift import Foundation let outcome = [ 2 , 3 , 5 , 8 ]. map ( { $0 + 1 } ). filter ( { $0 != 5 } ). reduce ( 1 , * ) assert ( outcome == 108 ) Result \u2693\ufe0e","title":"Map-Reduce"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#map-filter-and-reduce","text":"","title":"Map, Filter and Reduce"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#grammar","text":"Text Only map(function(type1 -> type1)) Text Only filter (function(type1 -> bool)) Text Only reduce(init_val(type3), function(type1, type 2-> type3))","title":"Grammar"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way1-function","text":"","title":"Way1: Function"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way2-closure","text":"","title":"Way2: Closure"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way3-using-the-built-in-operator","text":"","title":"Way3: Using the built-in operator"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/","text":"Swift on Windows 10 \u2693\ufe0e There are two sections in this chapter: \u2693\ufe0e TL;DR . VS Code-Docker for editing Swift on Win10 .","title":"**:material-language-swift: Swift on Windows 10**"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/#swift-on-windows-10","text":"","title":" Swift on Windows 10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/TL_DR/","text":"TL;DR \u2693\ufe0e VS Code + Docker. Especially useful on Windows, but can be handy on MacOS too. For a step-by-step guide, see VS Code-Docker for editing Swift on Win10 . Here is Tianle Yuan\u2019s own summary from Slack. Install the extensions of the swift, docker, and dev containers in vs code. run docker run vs code and click the docker logo on the left sidebar. run the image in vscode terminal and open the swift image in the container as u did in the docker desktop For testing ur swift code: ctrl + shift + p in command window at the top, enter: docker containers: attach shell swift test in your terminal For example: Moreover, you can even get the following instead, which looks more like what you get in Xcode: See VS Code - Docker for a nice Swift edition on Windows10 for more details.","title":"TL;DR"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/TL_DR/#tldr","text":"VS Code + Docker. Especially useful on Windows, but can be handy on MacOS too. For a step-by-step guide, see VS Code-Docker for editing Swift on Win10 . Here is Tianle Yuan\u2019s own summary from Slack. Install the extensions of the swift, docker, and dev containers in vs code. run docker run vs code and click the docker logo on the left sidebar. run the image in vscode terminal and open the swift image in the container as u did in the docker desktop For testing ur swift code: ctrl + shift + p in command window at the top, enter: docker containers: attach shell swift test in your terminal For example: Moreover, you can even get the following instead, which looks more like what you get in Xcode: See VS Code - Docker for a nice Swift edition on Windows10 for more details.","title":"TL;DR"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/","text":"VS Code-Docker for editing Swift on Win10 \u2693\ufe0e As a student who is also confused about using Swift on Windows10, I can understand how hard you are if you cannot afford a Macbook . Let's get started and prove that we can do the same thing as a Windows pioneer! There are several steps here for you to reach a slightly friendly interface: Software preparation. Set up Swift image on your local machine. Use Docker Container in your VS Code. Edit Swift code and do testing. [Not enough syntax highlighting and no autocomplete] An updated way to do Swift code editing and testing. [syntax highlighting and autocomplete] Text Only Please feel free to extend the content of the page. Window10 students need your contributions! \ud83e\udde0\ud83e\udde0 1. Software Preparation \u2693\ufe0e By default, make sure your system has already been installed: (1) Git Bash ( https://git-scm.com/downloads ); This requirement is optional. Since this course requires you to use the git command, Git Bash is the incident software for installing git on windows. You can also use your cmd or PowerShell. (2) VScode ( https://code.visualstudio.com/Download ). Then download and install: (3) Swift ( https://www.swift.org/download/ Windows10 x86_ 64 ). This step will help you automatically set up a swift command in your terminal. (4) Docker desktop ( https://docs.docker.com/desktop/install/windows-install/ ). 2. Set up Swift image on your local machine \u2693\ufe0e After installing Swift and Docker desktop, you create a swift image described in Docker . Text Only ### Try it now :point_down: In your hw folder, run the following: `cd MyLibrary/` `swift package init -- type library` `cd ..` `docker-compose run --rm dev` You probably will see the picture shown below: Text Only At this moment, you are running an image in Docker. Let\u2019s check your Docker desktop and click the item that is running: Text Only #### Try it now (Optional) :point_down: Let\u2019s decorate the bad terminal interface! Here we will use \u201coh-my-zsh\u201c. Follow the steps: `apt update` `apt install zsh` `apt install curl` `apt install vim` `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` Then go to edit the format plug-in in the `.zshrc` file: `cd ~` `vim .zshrc` Then change `ZSH_THEME=\"agnoster\"`. Restart your terminal in Docker and run `zsh` Text Only A better way is do as shown in [A good model of Docker Image](https://oregonstate-innovationlab.atlassian.net/wiki/spaces/CS561/pages/74350864/A+good+model+of+Docker+Image) , so you do not have to set the environment everytime! After the decoration, you will see the terminal as shown below: Text Only This beautiful terminal highlight will also be seen in the VS Code terminal later. :thumbsup: 3. Use Docker Container in your VS Code To make VS Code your swift code editor, install the extensions: swift , Docker , and dev containers . Text Only #### Try it now :point_down: 1. Now you run your docker desktop; Go back to VS Code and click the docker logo on the left sidebar: Make sure your local terminal is running docker-compose run --rm dev . Run the image in the VS Code terminal and also open the swift image in your terminal by: (a) ctrl + shift + p (b) in the command window at the top, enter: Docker Containers: Attach Shell \u00a9 zsh : Text Only You see! The terminal shows the same beautiful highlighting as we saw in the docker desktop terminal. :thumbsup: 4. Edit Swift code and do testing Finally, let\u2019s see how I use the VS Code to edit Swift codes. Firstly, git fork the code from the repo ( https://github.com/oregon-state-innovation-lab/cs561-swift ). Then git clone the forked folder into your code folder in the terminal: Checkout to async-await branch: Open swift files by clicking the content on the left side directory: Text Only #### Try it now :point_down: Let\u2019s do the testing of the test folder: Check the code coverage llvm-cov report ... : 5. An updated way to do Swift code editing and testing \u2693\ufe0e I think you have found that using the extension in the Docker logo can not help us realize the full function of syntax highlighting and there is no autocomplete. Here I provide a way to furtherly realize the function of editing Swift code on VS Code. Rather than using the extension of the whale (squared by red), we are going to use the remote extension (squared by green) as shown above. Choose the Containers in the remote explorer: Right-click the image that is running and chooses Attach in New Window : In the new window, \ud83d\udcc2 Open Folders in the parent directory / (not the /root ), then Enter using your keyboard. Now you can see your files: We still cannot see the full highlight. Let\u2019s open the extension window in the remote interface. Click the Install in Container swiftlang/swift-nightly-focal (.....) button and install it in your container: Now you can see the variables that can show up in the extension. Also, click the Conical flask extension and run the Test codes: Here is the result (with variable detection, definition tracking, autocomplete, and testing): Nice nice!!!! There are no differences between Windows VS Code and macOS Xcode now!! Bazinga Now you're a pro in Windows 10 swift programming\u2026 Feel free to add more cool stuff here! Tianle Yuan \u2013 10/14/2022","title":"VS Code-Docker for Swift on Win10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#vs-code-docker-for-editing-swift-on-win10","text":"As a student who is also confused about using Swift on Windows10, I can understand how hard you are if you cannot afford a Macbook . Let's get started and prove that we can do the same thing as a Windows pioneer! There are several steps here for you to reach a slightly friendly interface: Software preparation. Set up Swift image on your local machine. Use Docker Container in your VS Code. Edit Swift code and do testing. [Not enough syntax highlighting and no autocomplete] An updated way to do Swift code editing and testing. [syntax highlighting and autocomplete] Text Only Please feel free to extend the content of the page. Window10 students need your contributions! \ud83e\udde0\ud83e\udde0","title":"VS Code-Docker for editing Swift on Win10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#1-software-preparation","text":"By default, make sure your system has already been installed: (1) Git Bash ( https://git-scm.com/downloads ); This requirement is optional. Since this course requires you to use the git command, Git Bash is the incident software for installing git on windows. You can also use your cmd or PowerShell. (2) VScode ( https://code.visualstudio.com/Download ). Then download and install: (3) Swift ( https://www.swift.org/download/ Windows10 x86_ 64 ). This step will help you automatically set up a swift command in your terminal. (4) Docker desktop ( https://docs.docker.com/desktop/install/windows-install/ ).","title":"1. Software Preparation"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#2-set-up-swift-image-on-your-local-machine","text":"After installing Swift and Docker desktop, you create a swift image described in Docker . Text Only ### Try it now :point_down: In your hw folder, run the following: `cd MyLibrary/` `swift package init -- type library` `cd ..` `docker-compose run --rm dev` You probably will see the picture shown below: Text Only At this moment, you are running an image in Docker. Let\u2019s check your Docker desktop and click the item that is running: Text Only #### Try it now (Optional) :point_down: Let\u2019s decorate the bad terminal interface! Here we will use \u201coh-my-zsh\u201c. Follow the steps: `apt update` `apt install zsh` `apt install curl` `apt install vim` `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` Then go to edit the format plug-in in the `.zshrc` file: `cd ~` `vim .zshrc` Then change `ZSH_THEME=\"agnoster\"`. Restart your terminal in Docker and run `zsh` Text Only A better way is do as shown in [A good model of Docker Image](https://oregonstate-innovationlab.atlassian.net/wiki/spaces/CS561/pages/74350864/A+good+model+of+Docker+Image) , so you do not have to set the environment everytime! After the decoration, you will see the terminal as shown below: Text Only This beautiful terminal highlight will also be seen in the VS Code terminal later. :thumbsup: 3. Use Docker Container in your VS Code To make VS Code your swift code editor, install the extensions: swift , Docker , and dev containers . Text Only #### Try it now :point_down: 1. Now you run your docker desktop; Go back to VS Code and click the docker logo on the left sidebar: Make sure your local terminal is running docker-compose run --rm dev . Run the image in the VS Code terminal and also open the swift image in your terminal by: (a) ctrl + shift + p (b) in the command window at the top, enter: Docker Containers: Attach Shell \u00a9 zsh : Text Only You see! The terminal shows the same beautiful highlighting as we saw in the docker desktop terminal. :thumbsup: 4. Edit Swift code and do testing Finally, let\u2019s see how I use the VS Code to edit Swift codes. Firstly, git fork the code from the repo ( https://github.com/oregon-state-innovation-lab/cs561-swift ). Then git clone the forked folder into your code folder in the terminal: Checkout to async-await branch: Open swift files by clicking the content on the left side directory: Text Only #### Try it now :point_down: Let\u2019s do the testing of the test folder: Check the code coverage llvm-cov report ... :","title":"2. Set up Swift image on your local machine"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#5-an-updated-way-to-do-swift-code-editing-and-testing","text":"I think you have found that using the extension in the Docker logo can not help us realize the full function of syntax highlighting and there is no autocomplete. Here I provide a way to furtherly realize the function of editing Swift code on VS Code. Rather than using the extension of the whale (squared by red), we are going to use the remote extension (squared by green) as shown above. Choose the Containers in the remote explorer: Right-click the image that is running and chooses Attach in New Window : In the new window, \ud83d\udcc2 Open Folders in the parent directory / (not the /root ), then Enter using your keyboard. Now you can see your files: We still cannot see the full highlight. Let\u2019s open the extension window in the remote interface. Click the Install in Container swiftlang/swift-nightly-focal (.....) button and install it in your container: Now you can see the variables that can show up in the extension. Also, click the Conical flask extension and run the Test codes: Here is the result (with variable detection, definition tracking, autocomplete, and testing): Nice nice!!!! There are no differences between Windows VS Code and macOS Xcode now!! Bazinga Now you're a pro in Windows 10 swift programming\u2026 Feel free to add more cool stuff here! Tianle Yuan \u2013 10/14/2022","title":"5. An updated way to do Swift code editing and testing"},{"location":"2_Software_Engineering/Terminal/","text":"Terminal \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"**:octicons-terminal-16:{.e_terminal} Terminal**"},{"location":"2_Software_Engineering/Terminal/#terminal","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":" Terminal"},{"location":"2_Software_Engineering/VS_Code/","text":"VS Code \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"**:material-microsoft-visual-studio-code:{.e_vscode} VS Code**"},{"location":"2_Software_Engineering/VS_Code/#vs-code","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":" VS Code"},{"location":"3_C%2B%2B/","text":"C++ \u2693\ufe0e Basic OOP learning with C++ This chapter can be separated into below sections: \u2693\ufe0e Before C++98 (basic functions): Inheritance . Template . After C++98 (new & updated functions): C++ 11/14/17/20 .","title":"**:simple-cplusplus:{.e_cpp} C++**"},{"location":"3_C%2B%2B/#c","text":"Basic OOP learning with C++","title":" C++"},{"location":"3_C%2B%2B/C%2B%2BNEW/","text":"C++ 11/14/17/20 \u2693\ufe0e Table of contents \u2693\ufe0e C++11 C++14 C++17 C++20 References: \u2693\ufe0e Functional in C++17 and C++20","title":"**:simple-cplusplus: C++ 11/14/17/20**"},{"location":"3_C%2B%2B/C%2B%2BNEW/#c-11141720","text":"","title":" C++ 11/14/17/20"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/","text":"C++11 \u2693\ufe0e Table of contents \u2693\ufe0e auto & decltype","title":"**:simple-cplusplus: C++11**"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/#c11","text":"","title":" C++11"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/","text":"auto & decltype \u2693\ufe0e auto type \u2693\ufe0e auto type can help the compiler to derivate the type of a variable from the right side of = when it is in the compiling stage . auto.cpp auto m_int = 10 ; // since 10 is int type, the type of `m_int` has been automatially derivated as `int` decltype(exp) type \u2693\ufe0e decltype(exp) can be understood as: \"declare type\" from expression. decltype can derivate the type of the variable from the expression exp . It does not care about what is showing on the right side of = . decltype.cpp int m_variable = 0 ; decltype ( m_variable ) m_test1 = 1 ; //`m_test1` has been derivated to `int` decltype ( 10.8 ) m_test2 = 5.5 ; //`m_test2` has been derivated to `double` decltype ( m_test2 + 100 ) m_test3 ; //`m_test3` has been derivated to `double` Watch out! auto requires the initialization of the variable. decltype do not. decltype can process any complex expression. But! the result of the exp should not be void . decltype(exp) type [advance] \u2693\ufe0e Before we go in advance, let's figure out lvalue and rvalue : \\[lvalue = rvalue\\] lvalue : data that persists after the expression is executed, that is, persistent data . We can retrieve the data by referring to its address. rvalue : data that no longer exists at the end of the expression execution, that is, temporary data . Three principles for compiler processing the decltype(exp) : If exp is any of the cases below, the type of decltype(exp) is the same as exp . an expression not surrounded by parentheses () ; an expression to access a class member ; a single variable. If exp is any of the cases below, the type of decltype(exp) is the same as exp 's reference (i.e if T exp , then T& decltype(exp) ). an lvalue; an expression surrounded by parentheses () . If exp is a function call , then the type of decltype(exp) is the same as the type of the value returned by the function. Case 1 case1.cpp #include <string> using namespace std ; class Student { public : static int m_ID ; string m_name ; }; int Student :: m_ID = 0 ; int main (){ Student Daming ; int n_int = 0 ; const int & n_refint = n_int ; decltype ( n_int ) test1 = n_int ; //`n_int` is of type `int`, and `test1` is derived as type `int` decltype ( n_refint ) test2 = test1 ; //`n_refint` is of type `const int&`, and `test2` is derived as type `const int&` decltype ( Student :: m_ID ) test3 = 0 ; //`total` is a member variable of type `int` of class `Student`, and `test3` is derived from typing `int` decltype ( Daming . m_name ) test4 = \"Daming\" ; //`total` is a string member variable of class `Student`, and `test4` is derived as a `string` return 0 ; } Case 2 case2.cpp #include <string> using namespace std ; int main (){ int & func_int_r ( int , char ); //the type of return is: int& int && func_int_rr ( void ); //the type of return is: int&& int func_int ( double ); //the type of return is: int const int & fun_cint_r ( int , int , int ); //the type of return is: const int& const int && func_cint_rr ( void ); //the type of return is: const int&& int n = 100 ; decltype ( func_int_r ( 100 , 'A' )) a = n ; //a's type is `int&` decltype ( func_int_rr ()) b = 0 ; //b's type `int&&` decltype ( func_int ( 10.5 )) c = 0 ; //c's type `int` decltype ( fun_cint_r ( 1 , 2 , 3 )) x = n ; //x's type const `int&` decltype ( func_cint_rr ()) y = 0 ; //y's type const `int&&` } Case 3 case3.cpp using namespace std ; class Base { public : int m_x ; }; int main (){ const Base obj ; decltype ( obj . m_x ) a = 0 ; //`obj.m_x` is an access expression for a class member, which follows principle 1. The type of `a` is `int` decltype (( obj . m_x )) b = a ; //`obj.m_x` includes `()`, which follows principle 3. The type of `b` is `int&` int n = 0 , m = 0 ; decltype ( n + m ) c = 0 ; //`n+m` get a rvalue, which follows principle 1, thus type is `int` decltype ( n = n + m ) d = c ; //`n=n+m` get a lvalue, , which follows principle 3, thus type is `int&` return 0 ; } References: \u2693\ufe0e Tencent Cloud C++11","title":"auto & decltype"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#auto--decltype","text":"","title":" auto &amp; decltype"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#auto-type","text":"auto type can help the compiler to derivate the type of a variable from the right side of = when it is in the compiling stage . auto.cpp auto m_int = 10 ; // since 10 is int type, the type of `m_int` has been automatially derivated as `int`","title":"auto type"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#decltypeexp-type","text":"decltype(exp) can be understood as: \"declare type\" from expression. decltype can derivate the type of the variable from the expression exp . It does not care about what is showing on the right side of = . decltype.cpp int m_variable = 0 ; decltype ( m_variable ) m_test1 = 1 ; //`m_test1` has been derivated to `int` decltype ( 10.8 ) m_test2 = 5.5 ; //`m_test2` has been derivated to `double` decltype ( m_test2 + 100 ) m_test3 ; //`m_test3` has been derivated to `double` Watch out! auto requires the initialization of the variable. decltype do not. decltype can process any complex expression. But! the result of the exp should not be void .","title":"decltype(exp) type"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#decltypeexp-type-advance","text":"Before we go in advance, let's figure out lvalue and rvalue : \\[lvalue = rvalue\\] lvalue : data that persists after the expression is executed, that is, persistent data . We can retrieve the data by referring to its address. rvalue : data that no longer exists at the end of the expression execution, that is, temporary data . Three principles for compiler processing the decltype(exp) : If exp is any of the cases below, the type of decltype(exp) is the same as exp . an expression not surrounded by parentheses () ; an expression to access a class member ; a single variable. If exp is any of the cases below, the type of decltype(exp) is the same as exp 's reference (i.e if T exp , then T& decltype(exp) ). an lvalue; an expression surrounded by parentheses () . If exp is a function call , then the type of decltype(exp) is the same as the type of the value returned by the function. Case 1 case1.cpp #include <string> using namespace std ; class Student { public : static int m_ID ; string m_name ; }; int Student :: m_ID = 0 ; int main (){ Student Daming ; int n_int = 0 ; const int & n_refint = n_int ; decltype ( n_int ) test1 = n_int ; //`n_int` is of type `int`, and `test1` is derived as type `int` decltype ( n_refint ) test2 = test1 ; //`n_refint` is of type `const int&`, and `test2` is derived as type `const int&` decltype ( Student :: m_ID ) test3 = 0 ; //`total` is a member variable of type `int` of class `Student`, and `test3` is derived from typing `int` decltype ( Daming . m_name ) test4 = \"Daming\" ; //`total` is a string member variable of class `Student`, and `test4` is derived as a `string` return 0 ; } Case 2 case2.cpp #include <string> using namespace std ; int main (){ int & func_int_r ( int , char ); //the type of return is: int& int && func_int_rr ( void ); //the type of return is: int&& int func_int ( double ); //the type of return is: int const int & fun_cint_r ( int , int , int ); //the type of return is: const int& const int && func_cint_rr ( void ); //the type of return is: const int&& int n = 100 ; decltype ( func_int_r ( 100 , 'A' )) a = n ; //a's type is `int&` decltype ( func_int_rr ()) b = 0 ; //b's type `int&&` decltype ( func_int ( 10.5 )) c = 0 ; //c's type `int` decltype ( fun_cint_r ( 1 , 2 , 3 )) x = n ; //x's type const `int&` decltype ( func_cint_rr ()) y = 0 ; //y's type const `int&&` } Case 3 case3.cpp using namespace std ; class Base { public : int m_x ; }; int main (){ const Base obj ; decltype ( obj . m_x ) a = 0 ; //`obj.m_x` is an access expression for a class member, which follows principle 1. The type of `a` is `int` decltype (( obj . m_x )) b = a ; //`obj.m_x` includes `()`, which follows principle 3. The type of `b` is `int&` int n = 0 , m = 0 ; decltype ( n + m ) c = 0 ; //`n+m` get a rvalue, which follows principle 1, thus type is `int` decltype ( n = n + m ) d = c ; //`n=n+m` get a lvalue, , which follows principle 3, thus type is `int&` return 0 ; }","title":"decltype(exp) type [advance]"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/","text":"C++14 \u2693\ufe0e Table of contents \u2693\ufe0e C++14","title":"**:simple-cplusplus: C++14**"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/#c14","text":"","title":" C++14"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/content/","text":"C++14 \u2693\ufe0e References: \u2693\ufe0e Commits are snapshots, not diffs","title":"CONTENTS"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/content/#c14","text":"","title":" C++14"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/","text":"C++17 \u2693\ufe0e Table of contents \u2693\ufe0e Content","title":"**:simple-cplusplus: C++17**"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/#c17","text":"","title":" C++17"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/content/","text":"C++17 \u2693\ufe0e References: \u2693\ufe0e Commits are snapshots, not diffs","title":"CONTENTS"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/content/#c17","text":"","title":" C++17"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/","text":"C++20 \u2693\ufe0e Table of contents \u2693\ufe0e Content","title":"**:simple-cplusplus: C++20**"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/#c20","text":"","title":" C++20"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/content/","text":"C++20 \u2693\ufe0e References: \u2693\ufe0e Commits are snapshots, not diffs","title":"CONTENTS"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/content/#c20","text":"","title":" C++20"},{"location":"3_C%2B%2B/Inheritance/","text":"Inheritance \u2693\ufe0e Table of contents \u2693\ufe0e Basic Inheritance Multiple Inheritance Inheritance Access Public , Private , and Protected Inheritances","title":"**:simple-cplusplus: Inheritance**"},{"location":"3_C%2B%2B/Inheritance/#inheritance","text":"","title":" Inheritance"},{"location":"3_C%2B%2B/Inheritance/Inheritance/","text":"Inheritance \u2693\ufe0e Basic Inheritance \u2693\ufe0e For? Inherit Attributes and Methods from Base class (parent) to Derived class (child). Grammar? Use the : symbol. Let's do it! Problem: Let the Car class (child) inherits the Attributes and Methods from the Vehicle class (parent): inher_base.c++ #include <iostream> #include <string> #include <assert.h> using namespace std ; //Base class class Vehicle { public : Vehicle (){} ~ Vehicle (){} public : string m_brand = \"Ford\" ; public : string Honk (){ return \"Tu, tu! \\n \" ; } }; //Derived class class Car : public Vehicle { public : string m_model = \"Tesla\" ; }; int main (){ Car newCar ; assert ( newCar . Honk () == \"Tu, tu! \\n \" ); assert ( newCar . m_brand == \"Ford\" ); //cout << newCar.brand << endl; assert ( newCar . m_model == \"Tesla\" ); //cout << newCar. model << endl; } Multiple Inheritance \u2693\ufe0e Let's do it! Problem: Let the Son class (child) inherits the Attributes and Methods from both the Mom and Dad class (parents): inher_multi_.c++ #include <iostream> #include <string> #include <assert.h> using namespace std ; //Base class class Mom { public : int m_age = 32 ; public : string Speak (){ return \"Mom is me!\" ; } }; class Dad { public : int m_age = 44 ; public : string Say (){ return \"Dad is me!\" ; } }; //Derived class class Son : public Mom , public Dad { public : int m_age = 5 ; public : string Say (){ return \"I am son!\" ; } }; int main (){ Son ason ; assert ( ason . Speak () == \"Mom is me!\" ); assert ( ason . Say () == \"I am son!\" ); assert ( ason . m_age == 5 ); } Inheritance Access \u2693\ufe0e What is access specifiers for methods? Access specifiers define how the members ( attributes and methods ) of a class can be accessed. There are three access specifiers : public , private , protected . public : members are accessible from outside the class. private : members cannot be accessed (or viewed) from outside the class (but is accessable with in the class). protected : members cannot be accessed from outside the class. However, they can be accessed in inherited classes. Let's do it! Problem: Let the Programmer class (child) inherits the Attributes and Methods from both the Employee class (parents) in a safe way: inher_access.c++ #include <iostream> #include <string> #include <assert.h> using namespace std ; //Base class class Employee { protected : int m_salary = 32 ; }; //Derived class class Programmer : public Employee { public : int m_bonus = 44 ; public : void setSalary ( int s ){ m_salary = s ; } int getSalary (){ return m_salary ; } }; int main (){ Programmer Mark ; Mark . setSalary ( 50000 ); assert ( Mark . getSalary () == 50000 ); Mark . m_salary = 90000 ; //error: \u2018int Employee::m_salary\u2019 is protected within this context } Public , Private , and Protected Inheritances \u2693\ufe0e What is access specifiers for inheritances? public inheritances : Basic class's public and protected members remain the original status in the derived class. private inheritances : Basic class's public and protected members become private in the derived class. protected inheritances : Basic class's public and protected members become protected in the derived class. Note: private members of the base class are inaccessible to the derived class. Let's do it! Problem: illustrate all the inheritances method: inher_allway.c++ class Base { public : int x ; protected : int y ; private : int z ; }; class PublicDerived : public Base { // x is public // y is protected // z is not accessible from PublicDerived }; class ProtectedDerived : protected Base { // x is protected // y is protected // z is not accessible from ProtectedDerived }; class PrivateDerived : private Base { // x is private // y is private // z is not accessible from PrivateDerived }; Let's do it! Problem 1: C++ public Inheritance: inher_pub_inher.c++ // C++ program to demonstrate the working of public inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class PublicDerived : public Base { public : // function to access protected member from Base int getProt () { return prot ; } }; int main () { PublicDerived object1 ; cout << \"Private = \" << object1 . getPVT () << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . pub << endl ; return 0 ; } output Private = 1 Protected = 2 Public = 3 Let's do it! Problem 2: C++ protected Inheritance: inher_pro_inher.c++ // C++ program to demonstrate the working of protected inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class ProtectedDerived : protected Base { public : // function to access protected member from Base int getProt () { return prot ; } // function to access public member from Base int getPub () { return pub ; } }; int main () { ProtectedDerived object1 ; cout << \"Private cannot be accessed.\" << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . getPub () << endl ; return 0 ; } output Private cannot be accessed . Protected = 2 Public = 3 Let's do it! Problem 3: C++ private Inheritance: inher_pri_inher.c++ // C++ program to demonstrate the working of private inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class PrivateDerived : private Base { public : // function to access protected member from Base int getProt () { return prot ; } // function to access private member int getPub () { return pub ; } }; int main () { PrivateDerived object1 ; cout << \"Private cannot be accessed.\" << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . getPub () << endl ; return 0 ; } output Private cannot be accessed . Protected = 2 Public = 3 References: \u2693\ufe0e w3schools: C++ Inheritance Programiz: C++ Public, Protected and Private Inheritance","title":"CONTENTS"},{"location":"3_C%2B%2B/Inheritance/Inheritance/#inheritance","text":"","title":" Inheritance"},{"location":"3_C%2B%2B/Inheritance/Inheritance/#basic-inheritance","text":"For? Inherit Attributes and Methods from Base class (parent) to Derived class (child). Grammar? Use the : symbol. Let's do it! Problem: Let the Car class (child) inherits the Attributes and Methods from the Vehicle class (parent): inher_base.c++ #include <iostream> #include <string> #include <assert.h> using namespace std ; //Base class class Vehicle { public : Vehicle (){} ~ Vehicle (){} public : string m_brand = \"Ford\" ; public : string Honk (){ return \"Tu, tu! \\n \" ; } }; //Derived class class Car : public Vehicle { public : string m_model = \"Tesla\" ; }; int main (){ Car newCar ; assert ( newCar . Honk () == \"Tu, tu! \\n \" ); assert ( newCar . m_brand == \"Ford\" ); //cout << newCar.brand << endl; assert ( newCar . m_model == \"Tesla\" ); //cout << newCar. model << endl; }","title":"Basic Inheritance"},{"location":"3_C%2B%2B/Inheritance/Inheritance/#multiple-inheritance","text":"Let's do it! Problem: Let the Son class (child) inherits the Attributes and Methods from both the Mom and Dad class (parents): inher_multi_.c++ #include <iostream> #include <string> #include <assert.h> using namespace std ; //Base class class Mom { public : int m_age = 32 ; public : string Speak (){ return \"Mom is me!\" ; } }; class Dad { public : int m_age = 44 ; public : string Say (){ return \"Dad is me!\" ; } }; //Derived class class Son : public Mom , public Dad { public : int m_age = 5 ; public : string Say (){ return \"I am son!\" ; } }; int main (){ Son ason ; assert ( ason . Speak () == \"Mom is me!\" ); assert ( ason . Say () == \"I am son!\" ); assert ( ason . m_age == 5 ); }","title":"Multiple Inheritance"},{"location":"3_C%2B%2B/Inheritance/Inheritance/#inheritance-access","text":"What is access specifiers for methods? Access specifiers define how the members ( attributes and methods ) of a class can be accessed. There are three access specifiers : public , private , protected . public : members are accessible from outside the class. private : members cannot be accessed (or viewed) from outside the class (but is accessable with in the class). protected : members cannot be accessed from outside the class. However, they can be accessed in inherited classes. Let's do it! Problem: Let the Programmer class (child) inherits the Attributes and Methods from both the Employee class (parents) in a safe way: inher_access.c++ #include <iostream> #include <string> #include <assert.h> using namespace std ; //Base class class Employee { protected : int m_salary = 32 ; }; //Derived class class Programmer : public Employee { public : int m_bonus = 44 ; public : void setSalary ( int s ){ m_salary = s ; } int getSalary (){ return m_salary ; } }; int main (){ Programmer Mark ; Mark . setSalary ( 50000 ); assert ( Mark . getSalary () == 50000 ); Mark . m_salary = 90000 ; //error: \u2018int Employee::m_salary\u2019 is protected within this context }","title":"Inheritance Access"},{"location":"3_C%2B%2B/Inheritance/Inheritance/#public-private-and-protected-inheritances","text":"What is access specifiers for inheritances? public inheritances : Basic class's public and protected members remain the original status in the derived class. private inheritances : Basic class's public and protected members become private in the derived class. protected inheritances : Basic class's public and protected members become protected in the derived class. Note: private members of the base class are inaccessible to the derived class. Let's do it! Problem: illustrate all the inheritances method: inher_allway.c++ class Base { public : int x ; protected : int y ; private : int z ; }; class PublicDerived : public Base { // x is public // y is protected // z is not accessible from PublicDerived }; class ProtectedDerived : protected Base { // x is protected // y is protected // z is not accessible from ProtectedDerived }; class PrivateDerived : private Base { // x is private // y is private // z is not accessible from PrivateDerived }; Let's do it! Problem 1: C++ public Inheritance: inher_pub_inher.c++ // C++ program to demonstrate the working of public inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class PublicDerived : public Base { public : // function to access protected member from Base int getProt () { return prot ; } }; int main () { PublicDerived object1 ; cout << \"Private = \" << object1 . getPVT () << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . pub << endl ; return 0 ; } output Private = 1 Protected = 2 Public = 3 Let's do it! Problem 2: C++ protected Inheritance: inher_pro_inher.c++ // C++ program to demonstrate the working of protected inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class ProtectedDerived : protected Base { public : // function to access protected member from Base int getProt () { return prot ; } // function to access public member from Base int getPub () { return pub ; } }; int main () { ProtectedDerived object1 ; cout << \"Private cannot be accessed.\" << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . getPub () << endl ; return 0 ; } output Private cannot be accessed . Protected = 2 Public = 3 Let's do it! Problem 3: C++ private Inheritance: inher_pri_inher.c++ // C++ program to demonstrate the working of private inheritance #include <iostream> using namespace std ; class Base { private : int pvt = 1 ; protected : int prot = 2 ; public : int pub = 3 ; // function to access private member int getPVT () { return pvt ; } }; class PrivateDerived : private Base { public : // function to access protected member from Base int getProt () { return prot ; } // function to access private member int getPub () { return pub ; } }; int main () { PrivateDerived object1 ; cout << \"Private cannot be accessed.\" << endl ; cout << \"Protected = \" << object1 . getProt () << endl ; cout << \"Public = \" << object1 . getPub () << endl ; return 0 ; } output Private cannot be accessed . Protected = 2 Public = 3","title":"Public, Private, and Protected Inheritances"},{"location":"3_C%2B%2B/Template/","text":"Template \u2693\ufe0e Table of contents \u2693\ufe0e Basic Inheritance","title":"**:simple-cplusplus: Template**"},{"location":"3_C%2B%2B/Template/#template","text":"","title":" Template"},{"location":"3_C%2B%2B/Template/content/","text":"Template \u2693\ufe0e Basic Template \u2693\ufe0e References: \u2693\ufe0e w3schools: C++ Inheritance","title":"CONTENTS"},{"location":"3_C%2B%2B/Template/content/#template","text":"","title":" Template"},{"location":"3_C%2B%2B/Template/content/#basic-template","text":"","title":"Basic Template"},{"location":"4_Algorithms/","text":"Algorithms \u2693\ufe0e As a software engineer, being familier with algorithms and data structures is the basic skill for our job interview and solid skill improvement. This chapter can be separated into two sections: \u2693\ufe0e Practice Sheet for the questions record of my practice. Typical Questions for the typical solution that I have learned before.","title":"**:abacus: Algorithms**"},{"location":"4_Algorithms/#algorithms","text":"As a software engineer, being familier with algorithms and data structures is the basic skill for our job interview and solid skill improvement.","title":"Algorithms"},{"location":"4_Algorithms/Practice_Sheet/","text":"Practice Sheet \u2693\ufe0e I record all the leetcode practice I have done here:","title":"**:accept: Practice Sheet**"},{"location":"4_Algorithms/Practice_Sheet/#practice-sheet","text":"I record all the leetcode practice I have done here:","title":"Practice Sheet"},{"location":"4_Algorithms/Typical_Questions/","text":"Typical Questions \u2693\ufe0e This is not a garage for questions. This section is aiming to record all the structured question type. That is to say, pseudo-code is more important than code itself. The questions have been listed here: \u2693\ufe0e I. From Leetcode : Topology Sort Quick Sort II. From Hackerrank : STDIN and STDOUT","title":"**:question: Typical Questions**"},{"location":"4_Algorithms/Typical_Questions/#typical-questions","text":"This is not a garage for questions. This section is aiming to record all the structured question type. That is to say, pseudo-code is more important than code itself.","title":"Typical Questions"},{"location":"4_Algorithms/Typical_Questions/#the-questions-have-been-listed-here","text":"I. From Leetcode : Topology Sort Quick Sort II. From Hackerrank : STDIN and STDOUT","title":"The questions have been listed here:"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/","text":"comments: true \u2693\ufe0e","title":"STDIN and STDOUT"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#comments-true","text":"","title":"comments: true"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/","text":"Quick Sort \u2693\ufe0e","title":"Quick Sort"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#quick-sort","text":"","title":"Quick Sort"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/","text":"Topology Sort \u2693\ufe0e Keywords: 2D map, BFS Question \u2693\ufe0e There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1 . You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai . For example, the pair [0, 1] , indicates that to take course 0 you have to first take course 1 . Return true if you can finish all courses. Otherwise, return false . Example \u2693\ufe0e Example 1: Text Only Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. Example 2: Text Only Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. Pseudo-code \u2693\ufe0e Pseudo-code //0. Results < type > result //1. Define adjecent matrix & ingoing degree vector < vector < int >> adj ( numCourses , vector < int > ()) vector < int > degree ( numCourses , 0 ) //2. Initialization adj [][] <-> outgoing for each point degree [] <-> ingoing for each point //3. Define Queue queue < int > q //4. Initialize Queue for all points { //some condiction, e.g: q . push ( point -> degree == 0 ) } //5. Queue's Size satisfy some function while ( q . size () != 0 ){ current = q . front q pop top operate result for ( next -> adj [ current ]) { if ( -- degree [ next ] == 0 / some condition ) q . push ( next ) } } //6. Output result return result Answer \u2693\ufe0e solution.c++ bool canFinish ( int numCourses , vector < vector < int >>& prerequisites ) { \"kk\" vector < vector < int >> adj ( numCourses , vector < int > ()); //good place!! initialize vector into fixed store size vector < int > degree ( numCourses , 0 ); for ( auto p : prerequisites ) { //\"0 <= 1\" adj [ p [ 1 ]]. push_back ( p [ 0 ]); //outgoing degree [ p [ 0 ]] ++ ; //ingoing degree } queue < int > q ; for ( int i = 0 ; i < numCourses ; i ++ ) { if ( degree [ i ] == 0 ) q . push ( i ); } while ( q . size () != 0 ) { int current = q . front (); q . pop (); numCourses -- ; for ( auto next : adj [ current ]) { if ( -- degree [ next ] == 0 ) q . push ( next ); } } return numCourses == 0 ; }","title":"Topology Sort"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#topology-sort","text":"Keywords: 2D map, BFS","title":"Topology Sort"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#question","text":"There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1 . You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai . For example, the pair [0, 1] , indicates that to take course 0 you have to first take course 1 . Return true if you can finish all courses. Otherwise, return false .","title":"Question"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#example","text":"Example 1: Text Only Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. Example 2: Text Only Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.","title":"Example"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#pseudo-code","text":"Pseudo-code //0. Results < type > result //1. Define adjecent matrix & ingoing degree vector < vector < int >> adj ( numCourses , vector < int > ()) vector < int > degree ( numCourses , 0 ) //2. Initialization adj [][] <-> outgoing for each point degree [] <-> ingoing for each point //3. Define Queue queue < int > q //4. Initialize Queue for all points { //some condiction, e.g: q . push ( point -> degree == 0 ) } //5. Queue's Size satisfy some function while ( q . size () != 0 ){ current = q . front q pop top operate result for ( next -> adj [ current ]) { if ( -- degree [ next ] == 0 / some condition ) q . push ( next ) } } //6. Output result return result","title":"Pseudo-code"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#answer","text":"solution.c++ bool canFinish ( int numCourses , vector < vector < int >>& prerequisites ) { \"kk\" vector < vector < int >> adj ( numCourses , vector < int > ()); //good place!! initialize vector into fixed store size vector < int > degree ( numCourses , 0 ); for ( auto p : prerequisites ) { //\"0 <= 1\" adj [ p [ 1 ]]. push_back ( p [ 0 ]); //outgoing degree [ p [ 0 ]] ++ ; //ingoing degree } queue < int > q ; for ( int i = 0 ; i < numCourses ; i ++ ) { if ( degree [ i ] == 0 ) q . push ( i ); } while ( q . size () != 0 ) { int current = q . front (); q . pop (); numCourses -- ; for ( auto next : adj [ current ]) { if ( -- degree [ next ] == 0 ) q . push ( next ); } } return numCourses == 0 ; }","title":"Answer"},{"location":"5_Math/","text":"Math \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Math"},{"location":"5_Math/#math","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Math"},{"location":"6_Casual_Literary_Notes/","text":"Casual Literary Notes \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"**:speech_balloon: Casual Literary Notes**"},{"location":"6_Casual_Literary_Notes/#casual-literary-notes","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Casual Literary Notes"},{"location":"6_Casual_Literary_Notes/Dunhuang/","text":"Dunhunag Wall Painting Learning \u2693\ufe0e","title":"Dunhuang Wall Painting"},{"location":"6_Casual_Literary_Notes/Dunhuang/#dunhunag-wall-painting-learning","text":"","title":"Dunhunag Wall Painting Learning"},{"location":"7_Guitar_Garage/","text":"Guitar Garage \u2693\ufe0e This is a chapter for collecting some of the guitar sheets that I am into","title":"Guitar Garage"},{"location":"7_Guitar_Garage/#guitar-garage","text":"This is a chapter for collecting some of the guitar sheets that I am into","title":"Guitar Garage"}]}