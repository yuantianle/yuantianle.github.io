{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Intro"},{"location":"1_Computer_Graphics/","text":"Computer Graphics \u2693\ufe0e {% include list.liquid all=true %}","title":"**:crystal_ball: Computer Graphics**"},{"location":"1_Computer_Graphics/#computer-graphics","text":"{% include list.liquid all=true %}","title":"Computer Graphics"},{"location":"1_Computer_Graphics/1_Thermal_Dynamics/","text":"Thermal Dynamics \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Thermal Dynamics"},{"location":"1_Computer_Graphics/1_Thermal_Dynamics/#thermal-dynamics","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Thermal Dynamics"},{"location":"1_Computer_Graphics/2_Lighting/","text":"Lightning \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Lighting"},{"location":"1_Computer_Graphics/2_Lighting/#lightning","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Lightning"},{"location":"1_Computer_Graphics/3_Three_js/","text":"Three.js \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Three.js"},{"location":"1_Computer_Graphics/3_Three_js/#threejs","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Three.js"},{"location":"2_Software_Engineering/","text":"Software Engineering \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"**:rocket: Software Engineering**"},{"location":"2_Software_Engineering/#software-engineering","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Software Engineering"},{"location":"2_Software_Engineering/Docker/","text":"Docker \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} source: {{ page.path }}","title":"VS_Code"},{"location":"2_Software_Engineering/Docker/#docker","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} source: {{ page.path }}","title":"Docker"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/","text":"A good model for Docker Image initialization \u2693\ufe0e From what we learned: Basic guidance of docker , we learned how to use Docker compose to run containers in parallel. In that learning, we directly use swiftlang/swift:nightly-focal from the Docker repo. Here, we will learn how to create and use our own Docker Image in the Docker compose. There are three steps: \u2693\ufe0e Create a file named Dockerfile in your folder. About FROM, MAINTAINER, and RUN, learn from: What-is-dockerfile .dockerfile FROM swiftlang/swift:nightly-focal MAINTAINER simpli RUN apt-get update RUN apt update RUN apt -y install zsh RUN apt -y install curl RUN apt -y install vim RUN sh -c \" $( curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" RUN apt-get -y install -y language-pack-en RUN zsh Then run docker build -t simpli_image [location of your dockerfile] to build a Docker Image. Finally, the yml below as docker-compose run --rm dev : .yml services: dev: image: simpli_image #\"swiftlang/swift:nightly-focal\" volumes: - your directory /swift:/code environment: - USER=your name Now you are using your own Docker Image in which zsh & oh-my-zsh have been pre-installed.","title":"Docker Image init (DIY)"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/#a-good-model-for-docker-image-initialization","text":"From what we learned: Basic guidance of docker , we learned how to use Docker compose to run containers in parallel. In that learning, we directly use swiftlang/swift:nightly-focal from the Docker repo. Here, we will learn how to create and use our own Docker Image in the Docker compose.","title":"A good model for Docker Image initialization"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/#there-are-three-steps","text":"Create a file named Dockerfile in your folder. About FROM, MAINTAINER, and RUN, learn from: What-is-dockerfile .dockerfile FROM swiftlang/swift:nightly-focal MAINTAINER simpli RUN apt-get update RUN apt update RUN apt -y install zsh RUN apt -y install curl RUN apt -y install vim RUN sh -c \" $( curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" RUN apt-get -y install -y language-pack-en RUN zsh Then run docker build -t simpli_image [location of your dockerfile] to build a Docker Image. Finally, the yml below as docker-compose run --rm dev : .yml services: dev: image: simpli_image #\"swiftlang/swift:nightly-focal\" volumes: - your directory /swift:/code environment: - USER=your name Now you are using your own Docker Image in which zsh & oh-my-zsh have been pre-installed.","title":"There are three steps:"},{"location":"2_Software_Engineering/Docker/Docker_Command/","text":"Some basic command for Docker \u2693\ufe0e Useful link for understanding Docker concepts: What Is a Dockerfile: Everything You Need to Know I. Docker Image \u2693\ufe0e Create an image: \u2693\ufe0e Create a Docker file: .dockerfile mkdir Docker_images cd Docker_images vi Dockerfile FROM ubuntu MAINTAINER simpli RUN apt-get update CMD [ \"echo\" , \"Welcome to Simplilearn\" ] Build a Docker Image with Dockerfile and tag: Git Bash docker build -t simpli_image /D/Docker_images = > [ location of your dockerfile ] Check the images we have: \u2693\ufe0e Delete some image: \u2693\ufe0e II. Docker Container \u2693\ufe0e Create a container based on the image: \u2693\ufe0e Git Bash docker run --name simpli_container simpli_image Display a list of launched containers: \u2693\ufe0e Git Bash docker ps -a Rename an existing container: \u2693\ufe0e Git Bash docker rename [ CONTAINER_NAME ] [ NEW_CONTAINER_NAME ] Pause a running container: \u2693\ufe0e Git Bash docker pause [ CONTAINER_NAME ] Stop a running container: \u2693\ufe0e (somehow directly deleted the container) Git Bash docker stop [ CONTAINER_NAME ] Restart a running container: \u2693\ufe0e (somehow directly clear the setting of container) Git Bash docker stop [ CONTAINER_NAME ] Removes all the stopped containers: \u2693\ufe0e Git Bash docker container prune [ OPTIONS ] Quit and delete the running containers: \u2693\ufe0e Git Bash exit Remove an existing container: \u2693\ufe0e Git Bash docker rm [ CONTAINER ] Create a new image from a container\u2019s file changes: \u2693\ufe0e Git Bash docker container commit [ OPTIONS ] [ CONTAINER_ID ] [ NEW_IMAGE_NAME ] The sub-explanation of Docker Compose: What is Docker Compose: Example, Benefits and Basic Commands","title":"Command Line"},{"location":"2_Software_Engineering/Docker/Docker_Command/#some-basic-command-for-docker","text":"Useful link for understanding Docker concepts: What Is a Dockerfile: Everything You Need to Know","title":"Some basic command for Docker"},{"location":"2_Software_Engineering/Docker/Docker_Command/#i-docker-image","text":"","title":"I. Docker Image"},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-an-image","text":"Create a Docker file: .dockerfile mkdir Docker_images cd Docker_images vi Dockerfile FROM ubuntu MAINTAINER simpli RUN apt-get update CMD [ \"echo\" , \"Welcome to Simplilearn\" ] Build a Docker Image with Dockerfile and tag: Git Bash docker build -t simpli_image /D/Docker_images = > [ location of your dockerfile ]","title":"Create an image:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#check-the-images-we-have","text":"","title":"Check the images we have:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#delete-some-image","text":"","title":"Delete some image:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#ii-docker-container","text":"","title":"II. Docker Container"},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-a-container-based-on-the-image","text":"Git Bash docker run --name simpli_container simpli_image","title":"Create a container based on the image:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#display-a-list-of-launched-containers","text":"Git Bash docker ps -a","title":"Display a list of launched containers:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#rename-an-existing-container","text":"Git Bash docker rename [ CONTAINER_NAME ] [ NEW_CONTAINER_NAME ]","title":"Rename an existing container:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#pause-a-running-container","text":"Git Bash docker pause [ CONTAINER_NAME ]","title":"Pause a running container:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#stop-a-running-container","text":"(somehow directly deleted the container) Git Bash docker stop [ CONTAINER_NAME ]","title":"Stop a running container:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#restart-a-running-container","text":"(somehow directly clear the setting of container) Git Bash docker stop [ CONTAINER_NAME ]","title":"Restart a running container:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#removes-all-the-stopped-containers","text":"Git Bash docker container prune [ OPTIONS ]","title":"Removes all the stopped containers:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#quit-and-delete-the-running-containers","text":"Git Bash exit","title":"Quit and delete the running containers:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#remove-an-existing-container","text":"Git Bash docker rm [ CONTAINER ]","title":"Remove an existing container:"},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-a-new-image-from-a-containers-file-changes","text":"Git Bash docker container commit [ OPTIONS ] [ CONTAINER_ID ] [ NEW_IMAGE_NAME ] The sub-explanation of Docker Compose: What is Docker Compose: Example, Benefits and Basic Commands","title":"Create a new image from a container\u2019s file changes:"},{"location":"2_Software_Engineering/Docker/Guidance/","text":"Basic guidance of docker \u2693\ufe0e Docker is a useful tool with CI and backend work. Especially there are some cases that we need to test code in different system. Let's take swift as an example. We make it works on Windows 10. Step 1. Install Docker Desktop \u2693\ufe0e We can download Docker Desktop from the website and install it on your Windows 10. Step 2. Create a docker-compose.yml file \u2693\ufe0e docker-compose.yml services : dev : image : \"swiftlang/swift:nightly-focal\" #Default setting package for your system volumes : - /Users/<YOUR_DIC_TO_INSTALL_SWIFT>/swift:/code environment : - USER=<YOUR_NAME> Step 3. Launch the dev Docker service created in Step 2 \u2693\ufe0e Turn on your Docker Desktop. Then run the code below. Once inside your docker container, cd code . From \\code directory you can run the swift command. Git Bash docker-compose run --rm dev","title":"Guidance"},{"location":"2_Software_Engineering/Docker/Guidance/#basic-guidance-of-docker","text":"Docker is a useful tool with CI and backend work. Especially there are some cases that we need to test code in different system. Let's take swift as an example. We make it works on Windows 10.","title":"Basic guidance of docker"},{"location":"2_Software_Engineering/Docker/Guidance/#step-1-install-docker-desktop","text":"We can download Docker Desktop from the website and install it on your Windows 10.","title":"Step 1. Install Docker Desktop"},{"location":"2_Software_Engineering/Docker/Guidance/#step-2-create-a-docker-composeyml-file","text":"docker-compose.yml services : dev : image : \"swiftlang/swift:nightly-focal\" #Default setting package for your system volumes : - /Users/<YOUR_DIC_TO_INSTALL_SWIFT>/swift:/code environment : - USER=<YOUR_NAME>","title":"Step 2. Create a docker-compose.yml file"},{"location":"2_Software_Engineering/Docker/Guidance/#step-3-launch-the-dev-docker-service-created-in-step-2","text":"Turn on your Docker Desktop. Then run the code below. Once inside your docker container, cd code . From \\code directory you can run the swift command. Git Bash docker-compose run --rm dev","title":"Step 3. Launch the dev Docker service created in Step 2"},{"location":"2_Software_Engineering/Swift/","text":"Swift \u2693\ufe0e {% include list.liquid all=true %}","title":"Swift"},{"location":"2_Software_Engineering/Swift/#swift","text":"{% include list.liquid all=true %}","title":"Swift"},{"location":"2_Software_Engineering/Swift/Notes/","text":"Swift Learning \u2693\ufe0e {% include list.liquid all=true %}","title":"Notes"},{"location":"2_Software_Engineering/Swift/Notes/#swift-learning","text":"{% include list.liquid all=true %}","title":"Swift Learning"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/","text":"Swift on Windows 10 \u2693\ufe0e {% include list.liquid all=true %}","title":"Swift on Windows 10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/#swift-on-windows-10","text":"{% include list.liquid all=true %}","title":"Swift on Windows 10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/TL_DR/","text":"TL;DR \u2693\ufe0e VS Code + Docker. Especially useful on Windows, but can be handy on MacOS too. For a step-by-step guide, see VS Code-Docker for editing Swift on Win10 . Here is Tianle Yuan\u2019s own summary from Slack. Install the extensions of the swift, docker, and dev containers in vs code. run docker run vs code and click the docker logo on the left sidebar. run the image in vscode terminal and open the swift image in the container as u did in the docker desktop For testing ur swift code: ctrl + shift + p in command window at the top, enter: docker containers: attach shell swift test in your terminal For example: Moreover, you can even get the following instead, which looks more like what you get in Xcode: See VS Code - Docker for a nice Swift edition on Windows10 for more details.","title":"TL;DR"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/TL_DR/#tldr","text":"VS Code + Docker. Especially useful on Windows, but can be handy on MacOS too. For a step-by-step guide, see VS Code-Docker for editing Swift on Win10 . Here is Tianle Yuan\u2019s own summary from Slack. Install the extensions of the swift, docker, and dev containers in vs code. run docker run vs code and click the docker logo on the left sidebar. run the image in vscode terminal and open the swift image in the container as u did in the docker desktop For testing ur swift code: ctrl + shift + p in command window at the top, enter: docker containers: attach shell swift test in your terminal For example: Moreover, you can even get the following instead, which looks more like what you get in Xcode: See VS Code - Docker for a nice Swift edition on Windows10 for more details.","title":"TL;DR"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/","text":"VS Code-Docker for editing Swift on Win10 \u2693\ufe0e As a student who is also confused about using Swift on Windows10, I can understand how hard you are if you cannot afford a Macbook . Let's get started and prove that we can do the same thing as a Windows pioneer! There are several steps here for you to reach a slightly friendly interface: Software preparation. Set up Swift image on your local machine. Use Docker Container in your VS Code. Edit Swift code and do testing. [Not enough syntax highlighting and no autocomplete] An updated way to do Swift code editing and testing. [syntax highlighting and autocomplete] Text Only Please feel free to extend the content of the page. Window10 students need your contributions! \ud83e\udde0\ud83e\udde0 1. Software Preparation \u2693\ufe0e By default, make sure your system has already been installed: (1) Git Bash ( https://git-scm.com/downloads ); This requirement is optional. Since this course requires you to use the git command, Git Bash is the incident software for installing git on windows. You can also use your cmd or PowerShell. (2) VScode ( https://code.visualstudio.com/Download ). Then download and install: (3) Swift ( https://www.swift.org/download/ Windows10 x86_ 64 ). This step will help you automatically set up a swift command in your terminal. (4) Docker desktop ( https://docs.docker.com/desktop/install/windows-install/ ). 2. Set up Swift image on your local machine \u2693\ufe0e After installing Swift and Docker desktop, you create a swift image described in Docker . Text Only ### Try it now :point_down: In your hw folder, run the following: `cd MyLibrary/` `swift package init -- type library` `cd ..` `docker-compose run --rm dev` You probably will see the picture shown below: Text Only At this moment, you are running an image in Docker. Let\u2019s check your Docker desktop and click the item that is running: Text Only #### Try it now (Optional) :point_down: Let\u2019s decorate the bad terminal interface! Here we will use \u201coh-my-zsh\u201c. Follow the steps: `apt update` `apt install zsh` `apt install curl` `apt install vim` `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` Then go to edit the format plug-in in the `.zshrc` file: `cd ~` `vim .zshrc` Then change `ZSH_THEME=\"agnoster\"`. Restart your terminal in Docker and run `zsh` Text Only A better way is do as shown in [A good model of Docker Image](https://oregonstate-innovationlab.atlassian.net/wiki/spaces/CS561/pages/74350864/A+good+model+of+Docker+Image) , so you do not have to set the environment everytime! After the decoration, you will see the terminal as shown below: Text Only This beautiful terminal highlight will also be seen in the VS Code terminal later. :thumbsup: 3. Use Docker Container in your VS Code To make VS Code your swift code editor, install the extensions: swift , Docker , and dev containers . Text Only #### Try it now :point_down: 1. Now you run your docker desktop; Go back to VS Code and click the docker logo on the left sidebar: Make sure your local terminal is running docker-compose run --rm dev . Run the image in the VS Code terminal and also open the swift image in your terminal by: (a) ctrl + shift + p (b) in the command window at the top, enter: Docker Containers: Attach Shell \u00a9 zsh : Text Only You see! The terminal shows the same beautiful highlighting as we saw in the docker desktop terminal. :thumbsup: 4. Edit Swift code and do testing Finally, let\u2019s see how I use the VS Code to edit Swift codes. Firstly, git fork the code from the repo ( https://github.com/oregon-state-innovation-lab/cs561-swift ). Then git clone the forked folder into your code folder in the terminal: Checkout to async-await branch: Open swift files by clicking the content on the left side directory: Text Only #### Try it now :point_down: Let\u2019s do the testing of the test folder: Check the code coverage llvm-cov report ... : 5. An updated way to do Swift code editing and testing \u2693\ufe0e I think you have found that using the extension in the Docker logo can not help us realize the full function of syntax highlighting and there is no autocomplete. Here I provide a way to furtherly realize the function of editing Swift code on VS Code. Rather than using the extension of the whale (squared by red), we are going to use the remote extension (squared by green) as shown above. Choose the Containers in the remote explorer: Right-click the image that is running and chooses Attach in New Window : In the new window, \ud83d\udcc2 Open Folders in the parent directory / (not the /root ), then Enter using your keyboard. Now you can see your files: We still cannot see the full highlight. Let\u2019s open the extension window in the remote interface. Click the Install in Container swiftlang/swift-nightly-focal (.....) button and install it in your container: Now you can see the variables that can show up in the extension. Also, click the Conical flask extension and run the Test codes: Here is the result (with variable detection, definition tracking, autocomplete, and testing): Nice nice!!!! There are no differences between Windows VS Code and macOS Xcode now!! Bazinga Now you're a pro in Windows 10 swift programming\u2026 Feel free to add more cool stuff here! Tianle Yuan \u2013 10/14/2022","title":"VS Code-Docker for Swift on Win10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#vs-code-docker-for-editing-swift-on-win10","text":"As a student who is also confused about using Swift on Windows10, I can understand how hard you are if you cannot afford a Macbook . Let's get started and prove that we can do the same thing as a Windows pioneer! There are several steps here for you to reach a slightly friendly interface: Software preparation. Set up Swift image on your local machine. Use Docker Container in your VS Code. Edit Swift code and do testing. [Not enough syntax highlighting and no autocomplete] An updated way to do Swift code editing and testing. [syntax highlighting and autocomplete] Text Only Please feel free to extend the content of the page. Window10 students need your contributions! \ud83e\udde0\ud83e\udde0","title":"VS Code-Docker for editing Swift on Win10"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#1-software-preparation","text":"By default, make sure your system has already been installed: (1) Git Bash ( https://git-scm.com/downloads ); This requirement is optional. Since this course requires you to use the git command, Git Bash is the incident software for installing git on windows. You can also use your cmd or PowerShell. (2) VScode ( https://code.visualstudio.com/Download ). Then download and install: (3) Swift ( https://www.swift.org/download/ Windows10 x86_ 64 ). This step will help you automatically set up a swift command in your terminal. (4) Docker desktop ( https://docs.docker.com/desktop/install/windows-install/ ).","title":"1. Software Preparation"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#2-set-up-swift-image-on-your-local-machine","text":"After installing Swift and Docker desktop, you create a swift image described in Docker . Text Only ### Try it now :point_down: In your hw folder, run the following: `cd MyLibrary/` `swift package init -- type library` `cd ..` `docker-compose run --rm dev` You probably will see the picture shown below: Text Only At this moment, you are running an image in Docker. Let\u2019s check your Docker desktop and click the item that is running: Text Only #### Try it now (Optional) :point_down: Let\u2019s decorate the bad terminal interface! Here we will use \u201coh-my-zsh\u201c. Follow the steps: `apt update` `apt install zsh` `apt install curl` `apt install vim` `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` Then go to edit the format plug-in in the `.zshrc` file: `cd ~` `vim .zshrc` Then change `ZSH_THEME=\"agnoster\"`. Restart your terminal in Docker and run `zsh` Text Only A better way is do as shown in [A good model of Docker Image](https://oregonstate-innovationlab.atlassian.net/wiki/spaces/CS561/pages/74350864/A+good+model+of+Docker+Image) , so you do not have to set the environment everytime! After the decoration, you will see the terminal as shown below: Text Only This beautiful terminal highlight will also be seen in the VS Code terminal later. :thumbsup: 3. Use Docker Container in your VS Code To make VS Code your swift code editor, install the extensions: swift , Docker , and dev containers . Text Only #### Try it now :point_down: 1. Now you run your docker desktop; Go back to VS Code and click the docker logo on the left sidebar: Make sure your local terminal is running docker-compose run --rm dev . Run the image in the VS Code terminal and also open the swift image in your terminal by: (a) ctrl + shift + p (b) in the command window at the top, enter: Docker Containers: Attach Shell \u00a9 zsh : Text Only You see! The terminal shows the same beautiful highlighting as we saw in the docker desktop terminal. :thumbsup: 4. Edit Swift code and do testing Finally, let\u2019s see how I use the VS Code to edit Swift codes. Firstly, git fork the code from the repo ( https://github.com/oregon-state-innovation-lab/cs561-swift ). Then git clone the forked folder into your code folder in the terminal: Checkout to async-await branch: Open swift files by clicking the content on the left side directory: Text Only #### Try it now :point_down: Let\u2019s do the testing of the test folder: Check the code coverage llvm-cov report ... :","title":"2. Set up Swift image on your local machine"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#5-an-updated-way-to-do-swift-code-editing-and-testing","text":"I think you have found that using the extension in the Docker logo can not help us realize the full function of syntax highlighting and there is no autocomplete. Here I provide a way to furtherly realize the function of editing Swift code on VS Code. Rather than using the extension of the whale (squared by red), we are going to use the remote extension (squared by green) as shown above. Choose the Containers in the remote explorer: Right-click the image that is running and chooses Attach in New Window : In the new window, \ud83d\udcc2 Open Folders in the parent directory / (not the /root ), then Enter using your keyboard. Now you can see your files: We still cannot see the full highlight. Let\u2019s open the extension window in the remote interface. Click the Install in Container swiftlang/swift-nightly-focal (.....) button and install it in your container: Now you can see the variables that can show up in the extension. Also, click the Conical flask extension and run the Test codes: Here is the result (with variable detection, definition tracking, autocomplete, and testing): Nice nice!!!! There are no differences between Windows VS Code and macOS Xcode now!! Bazinga Now you're a pro in Windows 10 swift programming\u2026 Feel free to add more cool stuff here! Tianle Yuan \u2013 10/14/2022","title":"5. An updated way to do Swift code editing and testing"},{"location":"2_Software_Engineering/Terminal/","text":"Terminal \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Terminal"},{"location":"2_Software_Engineering/Terminal/#terminal","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Terminal"},{"location":"2_Software_Engineering/VS_Code/","text":"VS Code \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"VS Code"},{"location":"2_Software_Engineering/VS_Code/#vs-code","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"VS Code"},{"location":"3_C%2B%2B/","text":"C++ \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"C++"},{"location":"3_C%2B%2B/#c","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"C++"},{"location":"4_Algorithms/","text":"Algorithms \u2693\ufe0e As a software engineer, being familier with algorithms and data structures is the basic skill for our job interview and solid skill improvement. This chapter can be saperated into two sections: \u2693\ufe0e Practice Sheet for the questions record of my practice. Typical Questions for the typical solution that I have learnt before.","title":"**:abacus: Algorithms**"},{"location":"4_Algorithms/#algorithms","text":"As a software engineer, being familier with algorithms and data structures is the basic skill for our job interview and solid skill improvement.","title":"Algorithms"},{"location":"4_Algorithms/#this-chapter-can-be-saperated-into-two-sections","text":"Practice Sheet for the questions record of my practice. Typical Questions for the typical solution that I have learnt before.","title":"This chapter can be saperated into two sections:"},{"location":"4_Algorithms/Practice_Sheet/","text":"Practice Sheet \u2693\ufe0e I record all the leetcode practice I have done here:","title":"**:accept: Practice Sheet**"},{"location":"4_Algorithms/Practice_Sheet/#practice-sheet","text":"I record all the leetcode practice I have done here:","title":"Practice Sheet"},{"location":"4_Algorithms/Typical_Questions/","text":"Typical Questions \u2693\ufe0e This is not a garage for questions. This section is aiming to record all the structured question type. That is to say, pseudo-code is more important than code itself. The questions have been listed here: \u2693\ufe0e I. From Leetcode : Topology Sort Quick Sort II. From Hackerrank : STDIN and STDOUT","title":"**:question: Typical Questions**"},{"location":"4_Algorithms/Typical_Questions/#typical-questions","text":"This is not a garage for questions. This section is aiming to record all the structured question type. That is to say, pseudo-code is more important than code itself.","title":"Typical Questions"},{"location":"4_Algorithms/Typical_Questions/#the-questions-have-been-listed-here","text":"I. From Leetcode : Topology Sort Quick Sort II. From Hackerrank : STDIN and STDOUT","title":"The questions have been listed here:"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/","text":"comments: true \u2693\ufe0e","title":"STDIN and STDOUT"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#comments-true","text":"","title":"comments: true"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/","text":"Quick Sort \u2693\ufe0e","title":"Quick Sort"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#quick-sort","text":"","title":"Quick Sort"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/","text":"Topology Sort \u2693\ufe0e Keywords: 2D map, BFS Question \u2693\ufe0e There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1 . You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai . For example, the pair [0, 1] , indicates that to take course 0 you have to first take course 1 . Return true if you can finish all courses. Otherwise, return false . Example \u2693\ufe0e Example 1: Text Only Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. Example 2: Text Only Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. Pseudo-code \u2693\ufe0e Pseudo-code //0. Results < type > result //1. Define adjecent matrix & ingoing degree vector < vector < int >> adj ( numCourses , vector < int > ()) vector < int > degree ( numCourses , 0 ) //2. Initialization adj [][] <-> outgoing for each point degree [] <-> ingoing for each point //3. Define Queue queue < int > q //4. Initialize Queue for all points { //some condiction, e.g: q . push ( point -> degree == 0 ) } //5. Queue's Size satisfy some function while ( q . size () != 0 ){ current = q . front q pop top operate result for ( next -> adj [ current ]) { if ( -- degree [ next ] == 0 / some condition ) q . push ( next ) } } //6. Output result return result Answer \u2693\ufe0e solution.c++ bool canFinish ( int numCourses , vector < vector < int >>& prerequisites ) { \"kk\" vector < vector < int >> adj ( numCourses , vector < int > ()); //good place!! initialize vector into fixed store size vector < int > degree ( numCourses , 0 ); for ( auto p : prerequisites ) { //\"0 <= 1\" adj [ p [ 1 ]]. push_back ( p [ 0 ]); //outgoing degree [ p [ 0 ]] ++ ; //ingoing degree } queue < int > q ; for ( int i = 0 ; i < numCourses ; i ++ ) { if ( degree [ i ] == 0 ) q . push ( i ); } while ( q . size () != 0 ) { int current = q . front (); q . pop (); numCourses -- ; for ( auto next : adj [ current ]) { if ( -- degree [ next ] == 0 ) q . push ( next ); } } return numCourses == 0 ; }","title":"Topology Sort"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#topology-sort","text":"Keywords: 2D map, BFS","title":"Topology Sort"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#question","text":"There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1 . You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai . For example, the pair [0, 1] , indicates that to take course 0 you have to first take course 1 . Return true if you can finish all courses. Otherwise, return false .","title":"Question"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#example","text":"Example 1: Text Only Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. Example 2: Text Only Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.","title":"Example"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#pseudo-code","text":"Pseudo-code //0. Results < type > result //1. Define adjecent matrix & ingoing degree vector < vector < int >> adj ( numCourses , vector < int > ()) vector < int > degree ( numCourses , 0 ) //2. Initialization adj [][] <-> outgoing for each point degree [] <-> ingoing for each point //3. Define Queue queue < int > q //4. Initialize Queue for all points { //some condiction, e.g: q . push ( point -> degree == 0 ) } //5. Queue's Size satisfy some function while ( q . size () != 0 ){ current = q . front q pop top operate result for ( next -> adj [ current ]) { if ( -- degree [ next ] == 0 / some condition ) q . push ( next ) } } //6. Output result return result","title":"Pseudo-code"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#answer","text":"solution.c++ bool canFinish ( int numCourses , vector < vector < int >>& prerequisites ) { \"kk\" vector < vector < int >> adj ( numCourses , vector < int > ()); //good place!! initialize vector into fixed store size vector < int > degree ( numCourses , 0 ); for ( auto p : prerequisites ) { //\"0 <= 1\" adj [ p [ 1 ]]. push_back ( p [ 0 ]); //outgoing degree [ p [ 0 ]] ++ ; //ingoing degree } queue < int > q ; for ( int i = 0 ; i < numCourses ; i ++ ) { if ( degree [ i ] == 0 ) q . push ( i ); } while ( q . size () != 0 ) { int current = q . front (); q . pop (); numCourses -- ; for ( auto next : adj [ current ]) { if ( -- degree [ next ] == 0 ) q . push ( next ); } } return numCourses == 0 ; }","title":"Answer"},{"location":"5_Math/","text":"Math \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Math"},{"location":"5_Math/#math","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Math"},{"location":"6_Casual_Literary_Notes/","text":"Casual Literary Notes \u2693\ufe0e Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Casual Literary"},{"location":"6_Casual_Literary_Notes/#casual-literary-notes","text":"Text Only {% raw %}{% include list.liquid all=true %}{% endraw %} {% include list.liquid all=true %} {% include list.liquid all=true %}","title":"Casual Literary Notes"},{"location":"7_Guitar_Garage/","text":"Guitar Garage \u2693\ufe0e This is a chapter for collecting some of the guitar sheets that I am into","title":"Guitar Garage"},{"location":"7_Guitar_Garage/#guitar-garage","text":"This is a chapter for collecting some of the guitar sheets that I am into","title":"Guitar Garage"}]}