{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"10_Interview/","title":"\ud83c\udfe4 Interview Charging Station (CS)","text":"<p>Here is the \"Charging Station\" for preparing corresponding knowledges.</p> <ul> <li>Object Oriented Programming</li> <li>Game Development</li> <li>SQL</li> <li>Operating System</li> <li>Kernel</li> <li>Networking</li> </ul>"},{"location":"10_Interview/Game_DevOP/","title":"\ud83c\udfae Game Engine Development","text":"<p>Here are fields for preparing the position.</p> <ul> <li>Coding Questions</li> <li>C++ Questions</li> <li>Computer Graphics Questions</li> <li>Math Questions</li> </ul> <ul> <li>Here are some keywords for different positions:</li> <li>Techniqual Art: modeling, material, shader</li> <li>Computer Graphics: rendering algorithm, shader performance, rendering in engine</li> <li>Engine Development: C++, API</li> </ul>"},{"location":"10_Interview/Game_DevOP/C%2B%2B_questions/","title":"\ud83c\udfae C++ Questions","text":"<p>This material is for related questions:</p>"},{"location":"10_Interview/Game_DevOP/CG_questions/","title":"\ud83c\udfae Computer Graphics Questions","text":"<p>This material is for related questions:</p> <ul> <li>Raytracing</li> </ul>"},{"location":"10_Interview/Game_DevOP/CG_questions/#m-matrix","title":"\"M\" matrix","text":"How is the \"M\" matrix derived? <p>Answer: The \"M\" matrix typically refers to the Model Matrix in computer graphics. The Model Matrix is used to transform vertices from object space (local coordinates of the object) to world space (global coordinates in the scene). It encompasses translation, rotation, and scaling operations to position and orient the object within the scene.</p> <p>The Model Matrix is derived by combining individual transformation&lt;\\u&gt; (translation, rotation, scaling) matrices through mutiplication. The order of transformations is important, and the multiplication order matters. If you want to first scale, then rotate, and finally translate, the transformations should be applied in reverse order when multiplying the matrices.</p> <p>In OpenGL, you typically apply the transformations in the following order:</p> Text Only<pre><code>- Scaling: Apply any scaling transformations first.\n- Rotation: Apply rotation transformations next.\n- Translation: Apply translation transformations last.\n</code></pre> C++<pre><code>glm::mat4 myModelMatrix = myTranslationMatrix * myRotationMatrix * myScaleMatrix;\nglm::vec4 myTransformedVector = myModelMatrix * myOriginalVector;\n</code></pre>"},{"location":"10_Interview/Game_DevOP/CG_questions/#v-matrix","title":"\"V\" matrix","text":"What is the purpose of the \"V\" matrix, and how is it derived? <p>Answer: The \"V\" matrix, also known as the View Matrix, is used in computer graphics to transform vertices from world space (global coordinates in the scene) to camera space (view coordinates from the perspective of the camera). The View Matrix effectively represents the position and orientation of the camera within the scene.</p> <p></p> <ul> <li> <p>Computing the Camera Coordinates</p> <p>From \\(EYE\\), \\(AT\\) and \\(UP\\), we first form the coordinate \\((x_c, y_c, z_c)\\) for the camera, relative to the world space. We fix \\(z_c\\) to be the opposite of \\(AT\\), i.e., \\(AT\\) is pointing at the \\(-zc\\). We can obtain the direction of \\(xc\\) by taking the cross-product of \\(AT\\) and \\(UP\\). Finally, we get the direction of \\(yc\\) by taking the cross-product of \\(xc\\) and \\(zc\\). Take note that \\(UP\\) is roughly, but not necessarily, orthogonal to \\(AT\\).(Link)</p> <p></p> </li> <li> <p>Transforming from World Space to Camera Space</p> <p>Now, the world space is represented by standard orthonormal bases (e1, e2, e3), where e1=(1, 0, 0), e2=(0, 1, 0) and e3=(0, 0, 1), with origin at O=(0, 0, 0). The camera space has orthonormal bases (xc, yc, zc) with origin at EYE=(ex, ey, ez).</p> <p>It is much more convenience to express all the coordinates in the camera space. This is done via view transform.</p> <p>The view transform consists of two operations: a translation (for moving EYE to the origin), followed by a rotation (to axis the axes):</p> <p></p> </li> <li> <p>The View Matrix</p> <p>We can combine the two operations into one single View Matrix:</p> <p></p> </li> </ul> <p>In OpenGL, you typically set up the View Matrix using the camera's position, target (the point the camera is looking at), and up vector (the camera's up direction). The glm::lookAt function can be used to construct the View Matrix:</p> C++<pre><code>Copy code\nglm::mat4 viewMatrix = glm::lookAt(cameraPosition, cameraTarget, cameraUp);\n</code></pre> <p>Here's a breakdown of the parameters:</p> Text Only<pre><code>- cameraPosition: The position of the camera in world space.\n- cameraTarget: The point the camera is looking at in world space.\n- cameraUp: The up direction of the camera.\n</code></pre>"},{"location":"10_Interview/Game_DevOP/CG_questions/#ortho-vs-pers","title":"Ortho V.S. Pers","text":"What's the difference between orthographic and perspective projection? <p>Answer:</p> <p></p> <ul> <li> <p>In orthographic projection, objects maintain their relative sizes regardless of their distance from the camera. This projection type is often used in technical drawings, architectural plans, and some 2D games where maintaining accurate measurements is crucial. In an orthographic projection, parallel lines in the 3D scene remain parallel in the projected 2D image.</p> </li> <li> <p>Perspective projection emulates how objects appear smaller as they move farther away from the camera, creating a sense of depth and realism. This is how the human eye perceives the world. In perspective projection, objects that are closer to the camera appear larger than objects that are farther away.</p> </li> </ul> <p></p>"},{"location":"10_Interview/Game_DevOP/CG_questions/#viewing-frustum","title":"Viewing frustum","text":"How is the viewing frustum defined? <p>Answer: The camera has a limited field of view, which exhibits a view frustum (truncated pyramid), and is specified by four parameters: fovy, aspect, zNear and zFar.</p> Text Only<pre><code>- Fovy: specify the total vertical angle of view in degrees.\n- Aspect: the ratio of width vs. height. For a particular z, we can get the height from the fovy, and then get the width from the aspect.\n- zNear; the near plane.\n- zFar: the far plane.\n</code></pre> <p>The camera space \\((x_c, y_c, z_c)\\) is renamed to the familiar \\((x, y, z)\\) for convenience.</p> <p></p> C++<pre><code>#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n\n// ...\n\n// Define camera parameters\nglm::vec3 cameraPosition = glm::vec3(0.0f, 0.0f, 5.0f);\nglm::vec3 cameraTarget = glm::vec3(0.0f, 0.0f, 0.0f);\nglm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);\n\n// Create the view matrix\nglm::mat4 viewMatrix = glm::lookAt(cameraPosition, cameraTarget, cameraUp);\n\n// Define projection parameters\nfloat FOV = glm::radians(45.0f); // Field of view in radians\nfloat aspectRatio = 800.0f / 600.0f; // Aspect ratio of the viewport\nfloat nearClip = 0.1f; // Near clipping plane\nfloat farClip = 100.0f; // Far clipping plane\n\n// Create the projection matrix\nglm::mat4 projectionMatrix = glm::perspective(FOV, aspectRatio, nearClip, farClip);\n</code></pre>"},{"location":"10_Interview/Game_DevOP/CG_questions/#clipping-space","title":"Clipping space","text":"What does the clipping space do? <p>Answer: <code>Clipping space</code> is a crucial concept in computer graphics that defines a volume in which geometry is transformed and clipped before being projected onto the screen. It's an intermediate space between the <code>normalized device coordinates (NDC)</code> and the <code>view frustum</code>. The primary purpose of <code>clipping space</code> is to ensure that only the visible parts of a 3D scene are rendered, improving rendering efficiency and avoiding unnecessary computation for parts of the geometry that won't contribute to the final image.</p> <p> </p> <p>When vertices of 3D objects are transformed by the projection matrix, they are transformed to clipping space.</p> <p></p> <p>Mathematically, clipping space can be represented as follows:</p> \\[-1 \u2264 x, y, z \u2264 1\\] <p>Here, \\(x\\), \\(y\\), and \\(z\\) are the coordinates of a vertex in clipping space. Vertices that fall outside this range are clipped. The transformed vertices are then further normalized to NDC, where they can be mapped to the screen space pixel coordinates.</p> <p></p> <p>In OpenGL, the transformation from world coordinates to clipping space is achieved by the combined model-view-projection (MVP) matrix. The vertices' coordinates are multiplied by this matrix to transform them from their original coordinates to clipping space.</p> C++<pre><code>// Example OpenGL code for transforming vertices to clipping space\nglm::mat4 modelMatrix; // Model transformation\nglm::mat4 viewMatrix;  // Camera view transformation\nglm::mat4 projectionMatrix; // Perspective or orthographic projection\n\nglm::mat4 mvpMatrix = projectionMatrix * viewMatrix * modelMatrix;\n\n// Transform vertices to clipping space\nglm::vec4 clipSpacePosition = mvpMatrix * glm::vec4(worldPosition, 1.0f);\n</code></pre> <p>Here is the conclusion pipeline:</p> <p></p>"},{"location":"10_Interview/Game_DevOP/CG_questions/#vectors-and-matrices","title":"Vectors and matrices","text":"What are the dimensions of commonly used vectors and matrices? <p>Answer:</p> <ul> <li> <p>Vectors:</p> <ul> <li>2D Vectors: Used for representing points, directions, and displacements in a 2D space.</li> <li>3D Vectors: Represent positions, directions, and displacements in a 3D space.</li> <li>4D Vectors (Homogeneous Coordinates): Often used for transformations and perspective projections.</li> </ul> </li> <li> <p>Matrices:</p> <ul> <li>2x2 Matrices: Used for 2D transformations such as scaling, rotation, and shearing.</li> <li>3x3 Matrices: Used for 2D transformations, especially in cases where you want to apply transformations that don't affect the z-coordinate.</li> <li>4x4 Matrices: Used for 3D transformations, including translation, rotation, scaling, and perspective projection.</li> </ul> </li> </ul>"},{"location":"10_Interview/Game_DevOP/CG_questions/#leftright-hand-coord","title":"Left/Right-hand Coord","text":"What are left-handed and right-handed coordinate systems in different spaces, and why is there a change? <p>Answer:</p> <p>Left-handed and right-handed coordinate systems refer to the direction of axes. Different spaces may use different handedness due to historical conventions and mathematical convenience.</p> <p></p> <p>Object Space (or Local Space): This is the coordinate system of an individual object. An object's geometry is usually defined in its own local space.</p> <ul> <li> <p>Difference in Spaces:</p> <ul> <li>World Space: Once an object is placed in a scene, it is transformed into world space coordinates. Here, the position, rotation, and scale of an object with respect to the world are represented.</li> <li>View Space (or Camera Space): This is the coordinate system relative to the camera. When we move or rotate the camera, objects move and rotate in the opposite direction in view space.</li> <li>Clip Space: After the view transformation, a projection (often perspective or orthogonal) is applied to transform objects into clip space. Objects outside of a certain range (the view frustum) get \"clipped\" out.</li> <li>Screen Space: The transformation from clip space to screen space involves mapping x, y, z coordinates to pixel locations on the screen and depth values for z-buffering.</li> </ul> </li> </ul>"},{"location":"10_Interview/Game_DevOP/CG_questions/#viewport-transformation","title":"Viewport transformation","text":"What's the purpose of viewport transformation, and how does it change dimensions? <p>Answer:Viewport transformation is a crucial step in the rendering pipeline that maps points from the clip space (or normalized device coordinates, NDC) to screen space. It changes the dimensions from [-1, 1] to [0, width] and [0, height].</p> <p></p> <p>Viewport transform is made up of a series of reflection (of y-axis), scaling (of x, y and z axes), and translation (of the origin from the center of the near plane of clipping volume to the top-left corner of the 3D viewport). The viewport transform matrix is given by:</p> <p></p> <p>If the viewport cover the entire screen, \\(minX=minY=minZ=0\\), \\(w=screenWidth\\) and \\(h=screenHeight\\).</p>"},{"location":"10_Interview/Game_DevOP/CG_questions/#depth-in-viewport-trans","title":"Depth in Viewport trans","text":"How are depth values handled during viewport transformation? (Storing in the depth buffer) <p>Answer: Depth values, often represented by the <code>z</code> value in 3D graphics, are crucial for determining the visibility of surfaces in a scene. Depth values are linearly mapped from the range [near, far] to [0, 1] and stored in the depth buffer (or z-buffer) to resolve which surface is \"in front\" at any given pixel.</p> <p>During the viewport transformation, the depth values also undergo a transformation similar to the x and y coordinates, but with a distinct purpose.</p> <ol> <li> <p>Normalization: Before the viewport transformation, the perspective division (division by the homogeneous coordinate <code>w</code> after the projection transformation) brings depth values into a normalized range, typically between -1 and 1 for clip space.</p> </li> <li> <p>Depth Scaling and Translation: During the viewport transformation, depth values are transformed to fit into the depth range used by the depth buffer. This range is often represented as [0, 1] for many graphics APIs, but it's important to note that the specific range can depend on the system. The transformation can be described by:</p> \\[ z' = \\frac{z_{far} - z_{near}}{2} \\times z + \\frac{z_{far} + z_{near}}{2} \\] <p>Where:</p> Text Only<pre><code>- \\( z' \\) is the transformed depth value.\n- \\( z \\) is the original depth value from clip space.\n- \\( z_{near} \\) and \\( z_{far} \\) represent the near and far clipping planes, respectively.\n</code></pre> </li> <li> <p>Depth Buffer Storage: After transformation, the resulting depth values are stored in the depth buffer. During rasterization, for each pixel, the GPU checks the depth value of the incoming fragment against the value stored in the depth buffer. If the new fragment's depth value is closer (usually a lesser value, but this depends on depth function settings) to the camera than the stored value, the fragment's color replaces the current color at that pixel, and the depth buffer is updated with the new depth value. If not, the fragment is discarded.</p> </li> </ol>"},{"location":"10_Interview/Game_DevOP/CG_questions/#ndc","title":"NDC","text":"What is NDC (Normalized Device Coordinates)? <p>Answer: </p> <ol> <li> <p>Definition: <code>NDC(Normalized Device Coordinates)</code> is the coordinate system that vertices are in after the perspective division (or homogeneous divide) by the w component in clip space. It's the stage immediately after clip space.</p> </li> <li> <p>Purpose: The conversion to NDC serves to normalize the coordinates such that they lie within a standard cube, typically ranging from -1 to 1 along each axis. This ensures a consistent and device-agnostic representation of the scene.</p> </li> <li> <p>Coordinate Range: In NDC, the x, y, and z coordinates typically range from -1 to 1. Anything outside this range would have been clipped out in the previous clip space stage.</p> </li> <li> <p>Conversion from Clip Space: To get coordinates in NDC from clip space, you perform the perspective division:</p> </li> </ol> <p>$$    x_{ndc} = \\frac{x}{w}    $$</p> <p>$$    y_{ndc} = \\frac{y}{w}    $$</p> <p>$$    z_{ndc} = \\frac{z}{w}    $$</p> <ol> <li>Depth Values in NDC: Depth values in NDC are crucial for visibility determination and depth testing. After the perspective divide, z values are also in the normalized range, which will then be transformed to the depth range used by the depth buffer during the viewport transformation.</li> </ol> Compared with <code>Clip space</code>! <ul> <li> <p>Definition: <code>Clip space</code> is the coordinate system in which vertices are positioned after undergoing the projection transformation but before the perspective division. In this space, the coordinates are in a homogeneous form.</p> </li> <li> <p>Purpose: The main purpose of clip space is to allow for the clipping of geometry that lies outside the viewing frustum. Any vertex that has a coordinate outside the range of [-w, w] for its x, y, or z values after the projection transformation is considered to be outside the viewing frustum and can be clipped.</p> </li> <li> <p>Coordinate Range: The coordinates in clip space don't have a strictly defined range like in NDC. However, the clipping operation checks the vertices against their homogeneous coordinate w. Vertices with x, y, or z components outside the [-w, w] range are outside the viewing frustum.</p> </li> </ul>"},{"location":"10_Interview/Game_DevOP/CG_questions/#rasterization","title":"Rasterization","text":"Definition and purpose of rasterization. <p>Answer: Rasterization is the process of converting vector primitives (like polygons in 3D models) into a raster format (pixels on a screen). It determines which pixels on the screen should be illuminated and with what color based on the geometry and its attributes (like color, texture, and shading).</p> <p></p> <ul> <li> <p>Color:</p> <ol> <li> <p>Vertex Colors: The simplest form of coloring in rasterization involves interpolating vertex colors. Each vertex of a polygon can be assigned a color, and during rasterization, the color of a pixel inside the polygon is interpolated based on the colors of its vertices. This interpolation usually happens in a linear fashion across the surface of the polygon.</p> <p></p> </li> <li> <p>Fragment Shaders: Modern graphics pipelines allow for the use of fragment shaders (or pixel shaders). These shaders determine the color of each pixel (fragment) during rasterization. They can use various inputs, including textures, lights, and other per-vertex data, to dynamically compute pixel colors.</p> </li> </ol> </li> <li> <p>Texture:</p> <ol> <li> <p>Texture Mapping: One of the primary roles of rasterization in the context of textures is texture mapping, where 2D images (textures) are mapped onto the 3D surfaces of polygons. Each vertex of a polygon can be assigned texture coordinates (often denoted as \\( u, v \\)). During rasterization, the texture coordinates for a pixel inside the polygon are interpolated from its vertices. These coordinates are then used to sample a color from the texture image.</p> </li> <li> <p>Mipmapping: To efficiently sample textures and avoid aliasing artifacts, especially for distant or minified objects, rasterization can use mipmaps. Mipmaps are a sequence of precomputed textures, each one being a downscaled version of the previous one. The appropriate level of detail is chosen based on the distance and angle of the surface to the camera.</p> <p></p> </li> <li> <p>Texture Filtering: During rasterization, there might be a need to interpolate between multiple texture samples to get the final color for a pixel. Common methods include bilinear and trilinear filtering.</p> </li> </ol> </li> <li> <p>Shading:</p> <ol> <li> <p>Flat Shading: This is one of the simplest shading methods. In flat shading, each polygon gets a single color, usually computed based on a single normal for the entire polygon and the lighting equation. The result can be a faceted appearance, where each polygon's surface looks flat.</p> </li> <li> <p>Gouraud Shading: In Gouraud shading, lighting calculations are done per vertex, and colors are interpolated across the polygon during rasterization. This results in smoother color transitions compared to flat shading but can miss sharp lighting effects or specular highlights.</p> </li> <li> <p>Phong Shading: Not to be confused with the Phong reflection model, Phong shading involves interpolating the normals from the vertices and then computing the lighting per pixel. This method captures specular highlights more accurately than Gouraud shading.</p> </li> <li> <p>Pixel Shaders and Advanced Lighting: Modern rasterization pipelines use pixel or fragment shaders to achieve advanced shading effects. These shaders can implement complex lighting models, incorporate multiple light sources, and even simulate some global illumination effects. </p> </li> </ol> </li> </ul>"},{"location":"10_Interview/Game_DevOP/CG_questions/#vertexfragment-shader","title":"Vertex/Fragment shader","text":"Role of the vertex/fragment shader. <p>Answer:</p> <ul> <li> <p>Vertex Shader:</p> <ol> <li> <p>Vertex Transformation: One of the primary responsibilities of the vertex shader is to transform vertex positions from object space (local coordinates) to clip space. This typically involves multiplying the vertex position with a series of transformation matrices such as the model, view, and projection matrices.</p> </li> <li> <p>Normal Transformation: For lighting calculations, normals associated with vertices are transformed to ensure they are in the appropriate space, typically camera or world space.</p> </li> <li> <p>Texture Coordinates: While texture coordinates are usually provided as part of the vertex data, a vertex shader can manipulate them, for instance, to implement certain effects or animations.</p> </li> <li> <p>Per-Vertex Lighting: Lighting calculations can be performed at the vertex level in the vertex shader. This approach is seen in Gouraud shading.</p> </li> <li> <p>Tessellation and Geometry Shaders: Vertex shaders can work in tandem with tessellation and geometry shaders to dynamically create geometry on the GPU.</p> </li> <li> <p>Passing Varying Data: Vertex shaders can output data that is interpolated across fragments and then consumed by the fragment shader. This data might include things like color, texture coordinates, transformed normals, or any custom data required for the fragment shader's operations.</p> </li> </ol> </li> <li> <p>Fragment Shader (Pixel Shader):</p> <ol> <li> <p>Pixel Color Calculation: The primary role of the fragment shader is to determine the final color of each pixel that will be drawn to the screen. </p> </li> <li> <p>Texture Sampling: The fragment shader samples colors from textures using texture coordinates. This is where texture mapping, including techniques like bilinear and trilinear filtering, and mipmapping, occur.</p> </li> <li> <p>Per-Pixel Lighting: More accurate lighting models, like Phong shading, can be implemented in the fragment shader, where lighting calculations are performed per pixel.</p> </li> <li> <p>Special Effects: Advanced visual effects, such as specular highlights, bump mapping, normal mapping, and shadow mapping, are typically handled in the fragment shader.</p> </li> <li> <p>Post-Processing: While certain post-processing effects might be implemented in other stages or using multiple passes, the fragment shader can be used to apply various screen-space effects like color grading, blurring, or edge detection.</p> </li> <li> <p>Conditional Rendering: The fragment shader can conditionally discard fragments, preventing them from being written to the final framebuffer. This can be used for effects like stippling, transparency, or custom clipping.</p> </li> </ol> </li> </ul> <p>When is lighting typically calculated in the vertex shader versus the fragment shader?</p> <p>Lighting calculations are often done in the vertex shader for efficiency, while finer lighting details are computed in the fragment shader for each pixel. Purpose of rasterization and knowledge of lighting models.</p> <p>Rasterization converts primitives to pixels for display. Lighting models simulate how light interacts with surfaces (e.g., Phong, Blinn-Phong).</p> <p>Components of the Phong lighting model and their roles.</p> <p>The Phong lighting model consists of ambient, diffuse, and specular components. Ambient contributes to base lighting, diffuse simulates direct light reflection, and specular represents highlights. Differences between Blinn-Phong and Phong shading.</p> <p>Blinn-Phong uses the halfway vector between the light and view directions for specular reflection, resulting in more accurate highlights compared to the Phong model. Principles and benefits of MIPMAPs, determining which level to use.</p> <p>MIPMAPs are precomputed texture levels to improve rendering quality and performance by reducing aliasing and texture shimmering. The level is chosen based on the pixel size relative to the texture's size. How are normal maps stored, and what are their pros and cons?</p> <p>Normal maps store perturbed surface normals in RGB channels, allowing for intricate surface details. Pros include enhanced realism, while cons involve increased memory usage and complexity. Considerations when storing normal maps.</p> <p>Normal maps should be stored in tangent space and normalized. The blue channel might encode surface information for optimization. What is gamma correction and why is it important?</p> <p>Gamma correction compensates for the nonlinear way monitors display colors, ensuring consistent and accurate color representation. What is HDR (High Dynamic Range), and why is it used?</p> <p>HDR allows for a wider range of color and brightness values, simulating real-world lighting conditions and enhancing visual realism. Explanation of tone mapping and familiarity with different algorithms.</p> <p>Tone mapping scales HDR values to the limited range of a display, preventing overexposure. Algorithms include Reinhard, ACES, and more. Implementation of shadow mapping, drawbacks, and improvements.</p> <p>Shadow mapping involves rendering the scene from the light's perspective to create a depth map. Drawbacks include aliasing and self-shadowing. Improvements involve PCF and PCSS for soft shadows. Principles of anti-aliasing methods (MSAA, FSAA, SSAA, DLSS).</p> <p>MSAA (Multisample), FSAA (Full-Screen), SSAA (Super-Sample), and DLSS (Deep Learning Super Sampling) are methods to reduce aliasing artifacts by sampling multiple positions or using AI. Types and purposes of various buffers in graphics, e.g., color, depth, stencil.</p> <p>Color buffers store pixel colors, depth buffers store depth values, and stencil buffers control rendering operations like masking and masking. What is stencil testing, and what are its applications beyond shadows?</p> <p>Stencil testing masks pixels based on their stencil value, useful for various effects like decals, outlining, and post-processing. Understanding of alpha blending.</p> <p>Alpha blending combines the colors of overlapping fragments using their alpha values, allowing for transparency effects. Rendering semi-transparent objects and considerations.</p> <p>Semi-transparent objects require sorting based on depth and proper blending to correctly render overlapping parts. Depth testing process and rendering order of transparent and opaque objects.</p> <p>Opaque objects are rendered first, and then transparent objects are rendered back-to-front to ensure proper blending. Shader writing experience.</p> <p>Provide details about any shaders you have written, such as vertex, fragment, geometry, or compute shaders. Familiarity with compute shaders.</p> <p>Compute shaders are used for general-purpose parallel computing tasks, often used for simulations, data processing, and some graphics tasks. Conditions where the fragment shader executes fewer times than the vertex shader.</p> <p>In cases where vertex shader operations generate geometry with fewer visible fragments (due to occlusion), the fragment shader executes fewer times. Introduction to the rendering equation.</p> <p>The rendering equation describes the light transport in a scene and is used as a foundation for various lighting models. Brief introduction to BRDF (Bidirectional Reflectance Distribution Function).</p> <p>BRDF describes how light is reflected from a surface in different directions, and it's an essential part of lighting models. Meaning of F0 in the Fresnel equation.</p> <p>F0 represents the reflectance of a surface at normal incidence, indicating how much light is reflected off the surface rather than refracted. Principles and implementation parameters of PBR (Physically Based Rendering).</p> <p>PBR aims for realistic rendering by using physically accurate material properties and light interactions. Knowledge of ray tracing and path tracing.</p> <p>Ray tracing simulates light paths to generate realistic images, while path tracing is a specific type of ray tracing that simulates light paths through a scene. Introduction to deferred rendering, purpose, and benefits.</p> <p>Deferred rendering separates geometry and shading calculations, allowing for efficient handling of multiple light sources and post-processing effects. Methods to improve rendering efficiency.</p> <p>Improving rendering efficiency involves techniques like level-of-detail (LOD), occlusion culling, frustum culling, and batching. Ensuring stable frame rates.</p> <p>Stable frame rates can be maintained through optimization, LOD, culling, and adaptive quality settings. Shader code optimization techniques.</p> <p>Shader code can be optimized by reducing redundant calculations, minimizing branching, using texture atlases, and avoiding unnecessary computations. Knowledge of GPU architectures.</p> <p>Familiarity with GPU architectures like NVIDIA's CUDA cores or AMD's Compute Units. Familiarity with graphics APIs.</p> <p>Knowledge of graphics APIs like DirectX, Vulkan, OpenGL, and Metal. Differences between DirectX and OpenGL.</p> <p>DirectX and OpenGL are graphics APIs with differences in design, implementation, and platform support. Purpose of GLFW.</p> <p>GLFW is a library for creating windows, contexts, and handling user input in OpenGL applications. Texture sampling in GLSL shaders.</p> <p>Texture sampling in GLSL shaders is done using the texture function, providing a texture and UV coordinates. Applying lighting with a scaling model matrix along the X-axis.</p> <p>To apply lighting after a non-uniform scaling along the X-axis, you would transform the normals using the inverse transpose of the model matrix.</p> <p>Calculating a rotation matrix for an object's Y-axis rotation in world coordinates. The rotation matrix for rotating around an object's Y-axis by an angle \u03b8 is typically represented as: scss Copy code | cos(\u03b8)  0  sin(\u03b8)  0 | |   0     1    0     0 | | -sin(\u03b8) 0  cos(\u03b8)  0 | |   0     0    0     1 | Identifying the most performance-intensive shader between vertex and fragment shaders for a given algorithm. Profiling the application's performance will reveal which shader has the most impact on efficiency. Factors include the number of vertices and pixels processed and shader complexity. Rendering a subset of objects from a scene based on user selection. Objects can be rendered selectively by implementing an object visibility flag or managing a render queue based on user selection. Familiarity with post-processing techniques. Post-processing techniques include effects like depth of field, bloom, motion blur, and color correction applied after rendering. Implementation of Gaussian blur. Gaussian blur is implemented by convolving the image with a Gaussian kernel to create a smooth effect. Implementing bloom. Bloom involves blurring bright areas and adding them back to the scene for a glowing effect. Knowledge of Non-Photorealistic Rendering (NPR). NPR is a style of rendering that aims to emulate artistic and hand-drawn techniques. Techniques for achieving a cartoon-like rendering style. Cartoon rendering is achieved by using cel shading, edge detection, and flat shading to create a non-realistic, stylized appearance. Understanding and comparing different edge detection methods. Edge detection methods include Sobel, Canny, and Prewitt, each with varying sensitivity to different types of edges. Intersection of two line segments. The intersection of two line segments can be determined by checking if the endpoints of each segment are on opposite sides of the other segment. Ray-triangle intersection. Ray-triangle intersection can be determined by testing if the ray intersects the plane of the triangle and then checking if the intersection point lies within the triangle. Ray-AABB intersection. Ray-AABB intersection can be determined using slabs method or axis-aligned bounding box (AABB) intersection checks along each dimension. Calculating the arc length between two points on a sphere given in polar coordinates. The arc length can be calculated using the formula: s = r * \u03b8, where r is the sphere's radius and \u03b8 is the angle between the two points in radians. Determining the intersection between a circle and a matrix. Intersection between a circle and a matrix is determined by checking if the circle's center lies within the matrix's boundaries and calculating the distance between them. Testing convex polygon intersection. Convex polygon intersection can be determined by checking if any edge of one polygon intersects with any edge of the other polygon. Accelerating ray-triangle intersection with spatial data structures. Acceleration structures like BVH (Bounding Volume Hierarchy) or KD-tree can be used to efficiently determine ray-triangle intersections. SVD decomposition of a matrix. Singular Value Decomposition (SVD) decomposes a matrix into three matrices, U, \u03a3, and V, where \u03a3 contains the singular values of the original matrix. Converting a nonlinear problem into a linear problem. Nonlinear problems can be linearized by approximating them with linear equations using techniques like Taylor series expansion. Estimating world coordinates from 2D screen coordinates with depth information. Using the depth value and a perspective transformation, the 2D screen coordinates can be transformed back into 3D world coordinates. Precision issues in deferred rendering and the use of depth versus direct world position. Deferred rendering stores position in view space, which loses precision. Depth is preferred for position reconstruction due to its better depth distribution. Storage space of normals in deferred rendering. Normals in deferred rendering are stored in view space, as view space normals don't suffer from interpolation issues. Incorporating Ambient Occlusion (AO) in deferred rendering. AO can be implemented by sampling the depth buffer and testing occlusion against nearby points to estimate shadowing. Performance comparison between deferred rendering and forward rendering when sampling depth maps. Deferred rendering performs better when sampling depth maps for shadowing, as it avoids redundant shading calculations. G-buffer components and formats. G-buffer typically consists of position, normal, color, and material information, stored in textures with various formats. Difference between depth and color texture samplers. Depth texture samplers use depth comparison for sampling, while color texture samplers perform linear filtering for color data. Unity's different rendering pipelines and their distinctions. Unity has pipelines like Built-in Render Pipeline, Universal Render Pipeline (URP), and High Definition Render Pipeline (HDRP), each catering to different needs. Detecting graphical glitches like screen tearing, artifacts, and black screens. Screen tearing occurs when frames aren't synchronized with the display. Artifacts can result from various rendering issues, and black screens can be caused by improper rendering or synchronization. Knowledge of various graphics APIs and their usage. Familiarity with DirectX, Vulkan, OpenGL, and Metal, including the version you've used. Overview of OpenGL's rendering pipeline. The OpenGL pipeline consists of stages like vertex shading, tessellation, geometry shading, fragment shading, and rasterization. Purpose of GLFW and its context. GLFW is a library for creating windows and OpenGL contexts. A context manages OpenGL's state and resources for rendering. Differences between OpenGL and OpenGL ES. OpenGL is a desktop graphics API, while OpenGL ES is a version optimized for embedded systems like mobile devices and game consoles. Types and purposes of frame buffers. Frame buffers store rendering results before they're displayed. They include color, depth, and stencil attachments. Role of the BufferData function in OpenGL. BufferData is used to allocate memory and initialize the contents of a buffer object in OpenGL. Differences between glFinish() and glFlush() in OpenGL. glFinish() blocks the CPU until all queued OpenGL commands are executed, while glFlush() only ensures that commands are sent to the GPU and may not wait for completion.</p>"},{"location":"10_Interview/Game_DevOP/CG_questions/#reference","title":"Reference","text":"<ul> <li>Picture resource 1</li> <li>Picture resource 2</li> <li>Picture resource 3</li> <li>Picture resource 4</li> <li>Picture resource 5</li> <li>Picture resource 6</li> <li>Picture resource 7</li> <li>Picture resource 8</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li>Picture resource 1</li> <li></li> </ul>"},{"location":"10_Interview/Game_DevOP/Coding_questions/","title":"\ud83c\udfae Coding Questions","text":"<p>This material is for related questions:</p> - [**2D plane question**](#2d-plane-question) - [**Desgin a hero**](#desgin-a-hero) - [**Newton-Raphson method**](#newton-raphson-method)"},{"location":"10_Interview/Game_DevOP/Coding_questions/#2d-plane-question","title":"2D plane question","text":"In a 2D plane with multiple rectangles, how do you group them based on overlapping situations? <p>Answer: Treat this as a graph problem. Consider each rectangle as a node. If two rectangles overlap, establish an edge between them. The process is:</p> <ol> <li>Initialize an empty graph.</li> <li>Iterate through all rectangle pairs, checking for overlap. If they overlap, create an edge between the two rectangles in the graph.</li> <li>In the constructed graph, use Depth-First Search (DFS) or Breadth-First Search (BFS) to find all connected components.</li> <li>Each connected component represents a group of overlapping rectangles.</li> <li>To check if two rectangles overlap, given Rectangle A with top-left (Ax1, Ay1) and bottom-right (Ax2, Ay2), and Rectangle B with top-left (Bx1, By1) and bottom-right (Bx2, By2), the overlap condition is:</li> </ol> \\[ \\left\\{ \\begin{aligned} Ax1 &lt; Bx2 \\\\ Ax2 &gt; Bx1 \\\\ Ay1 &lt; By2 \\\\ Ay2 &gt; By1$ \\end{aligned} \\right. \\]"},{"location":"10_Interview/Game_DevOP/Coding_questions/#desgin-a-hero","title":"Desgin a hero","text":"Designing a champion (or hero) for \"League of Legends\" (LoL) <p>For the context of an interview, the example below demonstrates OOP principles like inheritance, polymorphism, encapsulation, and abstraction in C++:</p> C++<pre><code>#include &lt;iostream&gt;\n\n// Base Champion Class\nclass Champion {\nprivate:\n    int health;\n    int mana;\n    int attackDamage;\npublic:\n    Champion(int h, int m, int ad) : health(h), mana(m), attackDamage(ad) {}\n\n    virtual void firstAbility() = 0;  // Pure virtual function\n    virtual void secondAbility() = 0; // Pure virtual function\n\n    void basicAttack(Champion&amp; target) {\n        std::cout &lt;&lt; \"Dealt \" &lt;&lt; attackDamage &lt;&lt; \" damage to the target.\" &lt;&lt; std::endl;\n        target.takeDamage(attackDamage);\n    }\n\n    void takeDamage(int damage) {\n        health -= damage;\n        if (health &lt;= 0) {\n            std::cout &lt;&lt; \"Champion has been defeated!\" &lt;&lt; std::endl;\n        }\n    }\n};\n\n// Templar Derived Class\nclass Templar : public Champion {\nprivate:\n    int shieldValue;\n\npublic:\n    Templar(int h, int m, int ad, int sv) : Champion(h, m, ad), shieldValue(sv) {}\n\n    // Implementation of the virtual functions\n    void firstAbility() override {\n        std::cout &lt;&lt; \"Templar casts 'Shield Bash', dealing \" &lt;&lt; (shieldValue/2) &lt;&lt; \" damage.\" &lt;&lt; std::endl;\n    }\n\n    void secondAbility() override {\n        std::cout &lt;&lt; \"Templar casts 'Defensive Stance', absorbing next \" &lt;&lt; shieldValue &lt;&lt; \" damage.\" &lt;&lt; std::endl;\n        // Here, you would implement the logic to absorb damage up to shieldValue.\n    }\n};\n\nint main() {\n    Templar templar(1000, 500, 100, 300);\n    Templar enemy(800, 400, 80, 250);\n\n    templar.basicAttack(enemy);\n    templar.firstAbility();\n    templar.secondAbility();\n\n    return 0;\n}\n</code></pre> <p>In this simple design:</p> <ul> <li>We define a base class Champion which encapsulates the common attributes and behaviors of all champions.</li> <li>Templar is a derived class from Champion which implements the specific abilities of the Templar champion.</li> <li>Pure virtual functions firstAbility and secondAbility ensure that each champion derived from the Champion class will have its own unique abilities.</li> </ul>"},{"location":"10_Interview/Game_DevOP/Coding_questions/#newton-raphson-method","title":"Newton-Raphson method","text":"Show up the Newton-Raphson method <p>Given a number a and wanting to find its square root, you can use the function: \\(f(x) = x^2 - a\\)</p> <p>The derivative is: \\(f'(x) = 2x\\)</p> <p>The Newton-Raphson update formula becomes: \\(x_{new} = x_{old} - f(x_{old}) / f'(x_{old})\\)</p> <p>Plugging in our function and its derivative, this is: \\(x_{new} = x_{old} - (x_{old}^2 - a) / (2 * x_{old})\\)</p> <p>This formula, when iterated, will give you an approximation to the square root of \\(a\\).</p> <p>Here's the plain code without special delimiters:</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\ndouble sqrt_newton(double a) {\n    if (a &lt; 0) return -1;  // Negative numbers don't have real square roots.\n    if (a == 0) return 0;  // Avoid division by zero.\n\n    double tol = 1e-6;    // Tolerance.\n    double x = a;         // Initial guess.\n    double prev;\n\n    do {\n        prev = x;\n        x = 0.5 * (x + a / x);  // Newton's iteration.\n    } while (fabs(x - prev) &gt; tol);  // Continue until the change is within the tolerance.\n\n    return x;\n}\n\nint main() {\n    double a;\n    std::cout &lt;&lt; \"Enter a number: \";\n    std::cin &gt;&gt; a;\n\n    std::cout &lt;&lt; \"Approximate square root: \" &lt;&lt; sqrt_newton(a) &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"10_Interview/Game_DevOP/Math_questions/","title":"\ud83c\udfae Math Questions","text":"<p>Please go to this link or check the info below:</p>"},{"location":"10_Interview/Kernel/","title":"** \ud83d\udc68\u200d\ud83d\udcbb Kernel**","text":"<p>Interview Questions for Kernel</p>"},{"location":"10_Interview/Kernel/#kernel","title":"Kernel","text":"What is a kernel? <p>The kernel is a program that runs with full access privileges to the entire computer. </p> <ul> <li>[Resource manager] The kernel controls access to all shared system resources, including physical memory, the file system, and I/O devices. </li> <li>[Control program] The kernel is also responsible for handling all exceptional system and software events, such as power disruption or the addition of new \u201cplug-and-play\u201d peripheral components. </li> </ul> <p>Kernel provides an abstraction of hardwares.</p> Kernel responsibilities <p>Kernel performs as resource management, process management, and memory management:</p> <ul> <li> <p>Resource Management: </p> <ul> <li>Manages the computer's resources, such as CPU, memory, storage, and devices. </li> <li>Ensures that resources are allocated fairly and efficiently to different programs and processes (enabling them to run smoothly and without conflicts).</li> </ul> </li> <li> <p>Process Management</p> <ul> <li>Handles tasks like creating, organizing, and ending processes</li> <li>Ensures each process gets enough time to use the computer's resources</li> </ul> </li> <li> <p>Memory Management</p> <ul> <li>Allocates/deallocates memory to different processes and keeps track of available memory</li> <li>Manages virtual memory for efficient use of the computer's resources (to prevent memory leaks and maintain the overall efficiency of the system.)</li> </ul> </li> </ul>"},{"location":"10_Interview/Kernel/#kernel-memory-structure","title":"Kernel Memory Structure","text":"<p>The kernel exists as a protected region of virtual memory within the context of every process. Just like a normal user-mode program, the kernel contains:     - a code segment     - global data     - a heap for dynamic memory allocation     - many stacks (for each user-mode process, the kernel contains at least one stack)</p> <p>In general, the kernel interacts with its memory regions the same way as normal programs interact with theirs. The CPU uses the <code>%rip</code> register to load the next instruction from the code segment. Dynamically allocated data structures are stored on the heap and local variables are stored on the stack that is currently in use.</p>"},{"location":"10_Interview/Kernel/#monolithic-vs-microkernel","title":"Monolithic vs. microkernel","text":"What are monolithic and micro kernels? <ul> <li> <p><code>Monolithic Kernel</code>: combines all OS services and components into a single large kernel.</p> <ul> <li>Advantages: <ul> <li>Executes in the same address space, improving performance.</li> <li>Easier inter-process communication due to shared memory.</li> </ul> </li> <li>Disadvantages: Less modular, harder to maintain, and less secure, as a bug in one component can crash the entire system.</li> </ul> </li> <li> <p><code>Micro kernel</code>: with only essential services, such as inter-process communication and basic memory management.</p> <ul> <li>Advantages: <ul> <li>Other OS components run in user space, making it more modular and easier to maintain.</li> <li>Improved security, as a bug in one component won't crash the entire system.</li> </ul> </li> <li>Disadvantages: Slower performance due to increased context switches and communication overhead between kernel and user space.</li> </ul> </li> </ul> Comparison? <p><code>Monolithic kernels</code> offer better performance and simpler communication, while <code>microkernels</code> provide better modularity, maintainability, and security at the cost of performance.</p>"},{"location":"10_Interview/Kernel/#kernel-protection","title":"Kernel Protection","text":"<p>Since the kernel contains information about all processes and system resources, user-mode programs must be prevented from tampering with it. </p> <p>For instance, you would not want a faulty program to reformat your hard drive or shut off power are random times; only the kernel should be able to perform these actions. </p> <p>To prevent tampering from other programs, the kernel configures the CPU to restrict access to the portions of physical memory that are storing the kernel\u2019s virtual memory contents. As a result, if an instruction tries to access a memory location within the kernel while the CPU is set to user mode, the CPU itself will detect this invalid access and trigger an exception.</p>"},{"location":"10_Interview/Kernel/#kernel-sci","title":"Kernel SCI","text":"<p><code>System calls</code> are interfaces used by applications to request services from the kernel. They act as a bridge between user space (where applications run) and kernel space (where the operating system kernel runs). System calls allow applications to access hardware resources, perform I/O operations, manage memory, and handle inter-process communication, among other tasks.</p> <p>Pipeline:</p> <ul> <li> <p>Application makes a system call: When an application needs to access a resource or service managed by the kernel, it initiates a system call by passing the appropriate parameters.</p> </li> <li> <p>Transition from user to kernel mode: Operating systems have different modes of operation, with user mode being less privileged than kernel mode. To execute a system call, the CPU must switch from user mode to kernel mode, ensuring that the application can't directly access sensitive system resources.</p> </li> <li> <p>System call handler: The kernel has a system call handler that receives the call, identifies the requested service, and routes it to the appropriate kernel function.</p> </li> <li> <p>Execution of the kernel function: The kernel function processes the request, accessing the necessary hardware resources or performing the required operation.</p> </li> <li> <p>Return to user mode: After the kernel function is executed, the result is returned to the application, and the CPU switches back to user mode.</p> </li> <li> <p>Application continues execution: The application can now proceed with its normal execution, using the results of the system call as needed.</p> </li> </ul> <ul> <li>Kernel Basics</li> </ul>"},{"location":"10_Interview/Networking/","title":"** \ud83d\udc68\u200d\ud83d\udcbb Networking**","text":"<p>Interview Questions for Networking</p>"},{"location":"10_Interview/Networking/#overview","title":"Overview","text":"<p>Here is the table of the 7 layers:</p> <p>|Nums|Layers                |Data Units|      |Functions | |:-:|:-:|:-:|:-:| |7|Application Layer    |Data           |Mail Services,Directory Services,FTAM   | |6|Presentation Layer   |Data           |Encryption/Decryption, Compression| |5|Session Layer        |Data           |Session Establishment, Synchronization,Dialog Controller| |4|Transport Layer  |Segments,Datagram  |Segmentation| |3|Network Layer        |Packets        |Traffic control,Fragmentation,Routing| |2|Data Link Layer  |Frames             |Flow control,Error control,Access control| |1|Physical Layer       |Bits           |Bit Synchronization,Bit rate control,Physical Topologies|</p> <p>For the seven layers, here are some corresponding protocols and devices/apps:</p> 1. Pys Lr <ul> <li> <p>Protocol:</p> <ul> <li>Ethernet (IEEE 802.3)</li> <li>Wi-Fi (IEEE 802.11)</li> <li>Bluetooth</li> <li>DSL (Digital Subscriber Line)</li> <li>USB (Universal Serial Bus)</li> <li>RS-232</li> </ul> </li> <li> <p>Devices:</p> <ul> <li>Hubs</li> <li>Repeaters</li> <li>Cables (e.g., twisted pair, coaxial, fiber optic)</li> <li>Network Interface Cards (NICs)</li> <li>Wireless Access Points</li> </ul> </li> </ul> <p>=== \"2. Dlk Lr\"</p> Text Only<pre><code>    - Protocol:\n\n        - Ethernet (IEEE 802.3)\n        - Wi-Fi (IEEE 802.11)\n        - PPP (Point-to-Point Protocol)\n        - HDLC (High-Level Data Link Control)\n        - Frame Relay\n        - ATM (Asynchronous Transfer Mode)\n\n    - Devices:\n\n        - Switches\n        - Bridges\n        - Wireless Access Points\n        - Network Interface Cards (NICs)\n        - Protocol Analyzers (e.g., Wireshark)\n</code></pre> <p>=== \"3. Ntw Lr\"</p> Text Only<pre><code>    - Protocol:\n\n        - IPv4 (Internet Protocol version 4)\n        - IPv6 (Internet Protocol version 6)\n        - ICMP (Internet Control Message Protocol)\n        - IGMP (Internet Group Management Protocol)\n        - OSPF (Open Shortest Path First)\n        - RIP (Routing Information Protocol)\n        - BGP (Border Gateway Protocol)\n\n    - Devices:\n\n        - Routers\n        - Layer 3 Switches\n        - Firewalls\n        - Applications:\n        - Routing software (e.g., Cisco IOS, Juniper Junos OS)\n        - Network management and monitoring tools (e.g., SolarWinds Network Performance Monitor)\n</code></pre> <p>=== \"4. Tsp Lr\"</p> Text Only<pre><code>    - Protocol:\n\n        - TCP (Transmission Control Protocol)\n        - UDP (User Datagram Protocol)\n        - SCTP (Stream Control Transmission Protocol)\n        - DCCP (Datagram Congestion Control Protocol)\n\n\n    - Applications:\n\n        - Wireshark (for analyzing TCP/UDP packets)\n        - Netstat (for monitoring active network connections)\n</code></pre> <p>=== \"5. Ssn Lr\"</p> Text Only<pre><code>    - Protocol:\n\n        - TLS (Transport Layer Security)\n        - SSL (Secure Sockets Layer)\n        - SSH (Secure Shell)\n        - L2TP (Layer 2 Tunneling Protocol)\n        - PPTP (Point-to-Point Tunneling Protocol)\n\n    - Applications:\n\n        - VPN clients and servers (e.g., OpenVPN, Cisco AnyConnect)\n        - Remote desktop tools (e.g., TeamViewer, Microsoft Remote Desktop)\n        - Network file sharing systems (e.g., SMB, NFS)\n</code></pre> <p>=== \"6. Pst Lr\"</p> Text Only<pre><code>    - Protocol:\n\n        - MIME (Multipurpose Internet Mail Extensions)\n        - XDR (External Data Representation)\n        - ASN.1 (Abstract Syntax Notation One)\n        - SSL/TLS (Secure Sockets Layer / Transport Layer Security)\n        - JSON (JavaScript Object Notation)\n        - XML (eXtensible Markup Language)\n\n    - Applications:\n\n        - Encryption/decryption tools (e.g., OpenSSL)\n        - Data compression software (e.g., gzip, WinZip, WinRAR)\n        - Web browsers (for rendering MIME types, e.g., Chrome, Firefox, Safari)\n</code></pre> <p>=== \"7. Apl Lr\"</p> Text Only<pre><code>    - Protocol:\n\n        - HTTP (Hypertext Transfer Protocol)\n        - HTTPS (Hypertext Transfer Protocol Secure)\n        - FTP (File Transfer Protocol)\n        - TFTP (Trivial File Transfer Protocol)\n        - SMTP (Simple Mail Transfer Protocol)\n        - POP3 (Post Office Protocol version 3)\n        - IMAP (Internet Message Access Protocol)\n        - DNS (Domain Name System)\n        - SNMP (Simple Network Management Protocol)\n        - Telnet\n        - DHCP (Dynamic Host Configuration Protocol)\n        - LDAP (Lightweight Directory Access Protocol)\n        - SIP (Session Initiation Protocol)\n        - XMPP (Extensible Messaging and Presence Protocol)\n\n    - Applications:\n\n        - Web browsers (e.g., Chrome, Firefox, Safari)\n        - Email clients (e.g., Microsoft Outlook, Mozilla Thunderbird, Apple Mail)\n        - File transfer clients (e.g., FileZilla, WinSCP)\n        - Instant messaging apps (e.g., WhatsApp, Telegram, Signal)\n        - Voice and video communication software (e.g., Zoom, Microsoft Teams, Skype)\n        - Network management and monitoring tools (e.g., SolarWinds Network Performance Monitor, Nagios)\n</code></pre>"},{"location":"10_Interview/Operating_system/","title":"\ud83d\udc68\u200d\ud83d\udcbb Operating System","text":"<p>Interview Questions for Operating System</p> Table of Content <ul> <li>Operating System</li> <li>Classifications of OS</li> <li>OS components</li> <li>Process and thread</li> <li>Different states of processes</li> <li>Parameters for process scheduling</li> <li>Necessity of process</li> <li>Different process scheduling algorithms (PSA)</li> <li>Objectives of PSA</li> <li>Critical section problem \\&amp; solution</li> <li>Synchronization Tools</li> <li>Deadlock</li> <li>Memory Management</li> <li>Memory Management Techniques</li> <li>Paging \\&amp; Segmentation</li> <li>Logic memory \\&amp; Virtual memory</li> <li>Page Fault</li> <li>File System</li> <li>File Directories</li> <li>Disk time</li> <li>Buffer</li> <li>Disk Scheduling Algorithms</li> </ul>"},{"location":"10_Interview/Operating_system/#operating-system","title":"Operating System","text":"Click for answers \ud83d\udc47 <p>The system software that controls computer hardware and software resources. </p> <ul> <li>Its main functions include:<ol> <li>Managing resources such as processes, memory, files, and devices;</li> <li>Providing an interface for user programs;</li> <li>Ensuring the normal operation of computer systems. </li> </ol> </li> </ul> <p><p> </p></p> <ul> <li>The purpose of an operating system is to:<ol> <li>Provide a good user experience;</li> <li>Enable computer to excute programs efficiently and reliably.</li> </ol> </li> </ul>"},{"location":"10_Interview/Operating_system/#classifications-of-os","title":"Classifications of OS","text":"Click for answers \ud83d\udc47 <ul> <li> <p>Time-sharing OS: allows multiple users to share the resources of the single computer system simultaneously.</p> </li> <li> <p>Batch processing OS: loads a batchprogramsfrom the user into the computer system to run according to certain rules until all programs are completed.</p> </li> <li> <p>General purpose OS: has both the functions of Time-sharing and Batch processing. E.g Windows, Linux, MacOS.</p> </li> <li> <p>Real-time OS: has high requirements for the response time of the computer system and can complete tasks within a specified time.</p> </li> <li> <p>Distributed OS: </p> <ul> <li>distributes the resources of the computer system across multiple computer nodes;</li> <li>cooperates through a network to improve the reliability and performance of the computer system.</li> </ul> </li> <li> <p>Embedded OS: an operating system designed for devices with small sizes, low power consumption, and high reliability.</p> </li> </ul>"},{"location":"10_Interview/Operating_system/#os-components","title":"OS components","text":"Click for answers \ud83d\udc47 <ul> <li> <p><code>Kernel</code>: the core part of the operating system, responsible for managing computer hardware and providing basic functions, such as system calls.</p> </li> <li> <p><code>Process manager</code>: responsible for the efficient operation of the computer system, including:</p> <ul> <li>creating, deleting, scheduling, and managing processes.</li> </ul> </li> <li> <p><code>Storage manager</code>: responsible for managing computer memory resources, including:</p> <ul> <li>memory allocation, recovery, and protection.</li> </ul> </li> <li> <p><code>File system</code>: responsible for managing files and directories in the computer system, including:</p> <ul> <li>file reading, writing, creation, deletion, and protection.</li> </ul> </li> <li> <p><code>Input/output manager</code>: responsible for managing data transfer between the computer system and external devices, including: </p> <ul> <li>input/output buffering, device drivers, and interrupt handling.</li> </ul> </li> </ul>"},{"location":"10_Interview/Operating_system/#process-and-thread","title":"Process and thread","text":"Click for answers \ud83d\udc47 <p>Definition with comparison</p> <ul> <li> <p>Definition: </p> <ul> <li><code>Process</code> is an instance of a running program with its own independent instruction address space and system resources (program code, data, stack, and process control blocks). </li> <li><code>Thread</code> is an execution unit in a process, sharing resources of the process including address space, file descriptors, signal handlers, and process ID. </li> </ul> </li> <li> <p>Scheduling: </p> <ul> <li><code>Process</code> is the basic scheduling unit in an operating system, and the operating system manages processes through process control blocks. </li> <li><code>Threads</code> are scheduling units within a process, and the operating system schedules threads.</li> </ul> </li> <li> <p>Concurrency: </p> <ul> <li><code>Processes</code> are independent of each other. Different processes run concurrently, with each process having its own independent address space and resources. </li> <li><code>Threads</code> within the same process share resources and data. Threads executed on the same CPU are executed concurrently, whereas threads executed on different CPUs are executed in parallel.</li> </ul> </li> <li> <p>System overhead: </p> <ul> <li><code>Process</code> switching requires saving and restoring all process states, so process switching incurs a larger system overhead. </li> <li><code>Thread</code> switching only requires saving and restoring part of the thread state, so thread switching incurs a smaller system overhead.</li> </ul> </li> </ul>"},{"location":"10_Interview/Operating_system/#different-states-of-processes","title":"Different states of processes","text":"Click for answers \ud83d\udc47 <p>Three states: running, ready, or waiting:</p> <ul> <li>Running: the process has all the resources it needs for execution, and it has been given permission by the OS to use the processor.</li> <li>Ready: the process is waiting for permission to use the processor.</li> <li>Waiting: the process is waiting for some external event to occur, such as user input or disk access.</li> </ul> <ul> <li>Only one process can be in the running state at any given time. </li> <li>The remaining processes are either in a waiting state or a ready state. </li> <li>In a real operating system, the waiting and ready states are implemented as queues that hold the processes in these states.</li> </ul>"},{"location":"10_Interview/Operating_system/#parameters-for-process-scheduling","title":"Parameters for process scheduling","text":"Click for answers \ud83d\udc47 <p>Definition with comparison</p> <ul> <li>Moment\uff1a<ul> <li><code>Arrival Time (AT)</code>: Time at which the process arrives in the ready queue.</li> <li><code>Completion Time (CT)</code>: Time at which the process completes its execution.</li> </ul> </li> <li>Period:  <ul> <li><code>Burst Time (BT)</code>: Time required by a process for CPU execution.</li> <li><code>Turn Around Time (TAT)</code>: Completion Time - Arrival Time </li> <li><code>Waiting Time (WT)</code>: Turn around time -Burst time.</li> </ul> </li> </ul>"},{"location":"10_Interview/Operating_system/#necessity-of-process","title":"Necessity of process","text":"Click for answers \ud83d\udc47 <p>A typical process involves both I/O time and CPU time. </p> <p>In a uniprogramming system like MS-DOS, time spent waiting for I/O is wasted and CPU is free during this time. </p> <p>In multiprogramming systems, one process can use CPU while another is waiting for I/O. This is possible only with process scheduling. </p>"},{"location":"10_Interview/Operating_system/#different-process-scheduling-algorithms-psa","title":"Different process scheduling algorithms (PSA)","text":"Click for answers \ud83d\udc47 <ul> <li>First Come First Serve (FCFS): processes are scheduled according to their arrival times.</li> <li>Shortest Job First (SJF): processes with the shortest burst time are scheduled first.</li> <li>Shortest Remaining Time First (SRTF): processes are scheduled with the shortest remaining time -- amount of time left for a process to complete its execution (preemptive mode of SJF algorithm)</li> <li>Round Robin (RR) Scheduling: each process is assigned a fixed time; in a cyclic way.</li> <li>Priority Based scheduling (Non Preemptive): processes are scheduled according to their priorities. If priorities of two processes match, then scheduling is according to the arrival time.</li> <li>Highest Response Ratio Next (HRRN): processes with highest response ratio(Turn around time / Burst time) is scheduled. This algorithm avoids starvation (Consider a situation when a long process is there in the ready queue and shorter processes keep coming.).</li> <li>Multilevel Queue Scheduling (MLQ): According to the priority of process, processes are placed in the different queues. Generally high priority process are placed in the top level queue. Only after completion of processes from top level queue, lower level queued processes are scheduled.</li> <li>Multilevel Feedback Queue (MLFQ) Scheduling: It allows the process to move in between queues. The idea is to separate processes according to the characteristics of their CPU bursts. If a process uses too much CPU time, it is moved to a lower-priority queue.</li> </ul> <ul> <li>FCFS can cause long waiting times, especially when the first job takes too much CPU time.</li> <li>Both SJF and SRTF algorithms may cause starvation. HRRN can solve it.</li> <li>If time quantum for RRS is very large, then it behaves same as FCFS scheduling.</li> <li>SJF is optimal in terms of average waiting time for a given set of processes. SJF gives minimum average waiting time, but problems with SJF is how to know/predict the time of next job.</li> </ul>"},{"location":"10_Interview/Operating_system/#objectives-of-psa","title":"Objectives of PSA","text":"Click for answers \ud83d\udc47 <ul> <li>Max CPU utilization (Keep CPU as busy as possible)</li> <li>Fair allocation of CPU.</li> <li>Max throughput (Number of processes that complete their execution per time unit)</li> <li>Min turnaround time (Time taken by a process to finish execution)</li> <li>Min waiting time (Time for which a process waits in ready queue)</li> <li>Min response time (Time when a process produces first response)</li> </ul>"},{"location":"10_Interview/Operating_system/#critical-section-problem--solution","title":"Critical section problem &amp; solution","text":"Click for answers \ud83d\udc47 <p>The <code>critical section problem</code> arises when multiple processes or threads need to access shared resources simultaneously, such as data structures or hardware devices. Without proper synchronization mechanisms in place, this can lead to unexpected results or unintended behavior, known as race conditions. Here are some concepts you need to know:</p> <ul> <li>Critical Section \u2013 The portion of the code in the program where shared variables are accessed and/or updated.</li> <li>Remainder Section \u2013 The remaining portion of the program excluding the Critical Section.</li> <li>Race around Condition \u2013 The final output of the code depends on the order in which the variables are accessed.</li> </ul> <p>A solution for the critical section problem must satisfy the following three conditions:</p> <ul> <li>Mutual Exclusion: If a process is executing in its critical section, then do not allow other processes to enter into the critical section.</li> <li>Progress: If no process is executing in the critical section, then the decision of a process to enter a critical section cannot be made by any other process that is executing in its remainder section. The selection of the process cannot be postponed indefinitely.</li> <li>Bounded Waiting: There exists a bound on the number of times other processes can enter into the critical section after a process has made request to access the critical section and before the requested is granted.</li> </ul>"},{"location":"10_Interview/Operating_system/#synchronization-tools","title":"Synchronization Tools","text":"Click for answers \ud83d\udc47 <p>A <code>Semaphore</code> is an integer variable that is accessed only through two atomic operations, <code>wait()</code> and <code>signal()</code>. An atomic operation is executed in a single CPU time slice without any pre-emption. </p> <p><code>Semaphores</code> are of two types:</p> <ul> <li> <p>Binary Semaphore: It has two states, 0 and 1. It is used for mutual exclusion, where only one process can access the critical section at a time.</p> </li> <li> <p>Counting Semaphore: It has a positive integer value that can be incremented or decremented. It is used to control access to a shared resource where multiple processes can access the critical section simultaneously, but the maximum number of processes that can access it at any given time is limited by the value of the semaphore.</p> </li> </ul>"},{"location":"10_Interview/Operating_system/#deadlock","title":"Deadlock","text":"Click for answers \ud83d\udc47 <p>A situation where a set of processes are blocked because each process is holding a resource and waiting for another resource acquired by some other process. </p> <p>Deadlock can arise with four necessary Conditions hold simultaneously:</p> <ul> <li>Mutual Exclusion \u2013 One or more than one resource are non-sharable (Only one process can use at a time).</li> <li>Hold and Wait \u2013 A process is holding at least one resource and waiting for resources.</li> <li>No Preemption \u2013 A resource cannot be taken from a process unless the process releases the resource.</li> <li>Circular Wait \u2013 A set of processes are waiting for each other in circular form.</li> </ul> <p>There are three ways to handle deadlock:</p> <ul> <li>Deadlock prevention or avoidance: The idea is to not let the system into deadlock state.</li> <li>Deadlock detection and recovery: Let deadlock occur, then do preemption to handle it once occurred.</li> <li>Ignore the problem all together: If deadlock is very rare, then let it happen and reboot the system. This is the approach that both Windows and UNIX take.</li> </ul>"},{"location":"10_Interview/Operating_system/#memory-management","title":"Memory Management","text":"Click for answers \ud83d\udc47 <p>The techniques allow multiple processes to share the same memory.</p> <p>Here are two techniques:</p> <ul> <li>Overlays: The memory should contain only those instructions and data that are required at a given time.</li> <li>Swapping: In multiprogramming, the instructions that have used the time slice are swapped out from the memory.</li> </ul>"},{"location":"10_Interview/Operating_system/#memory-management-techniques","title":"Memory Management Techniques","text":"Click for answers \ud83d\udc47 <p>(a) <code>Single Partition Allocation Schemes</code> \u2013 The memory is divided into two parts. One part is kept to be used by the OS, and the other is kept to be used by the users. </p> <p>(b) <code>Multiple Partition Schemes</code>: </p> <ul> <li>Fixed Partition \u2013 The memory is divided into fixed size partitions.</li> <li>Variable Partition \u2013 The memory is divided into variable sized partitions. Variable partition allocation schemes:<ul> <li>First Fit \u2013 The arriving process is allotted the first hole of memory in which it fits completely.</li> <li>Best Fit \u2013 The arriving process is allotted the hole of memory in which it fits the best by leaving the minimum memory empty.</li> <li>Worst Fit \u2013 The arriving process is allotted the hole of memory in which it leaves the maximum gap.</li> </ul> </li> </ul> <ul> <li>Best fit does not necessarily give the best results for memory allocation.</li> <li>The cause of external fragmentation is the condition in Fixed partitioning and Variable partitioning saying that entire process should be allocated in a contiguous memory location. Therefore Paging is used.</li> </ul>"},{"location":"10_Interview/Operating_system/#paging--segmentation","title":"Paging &amp; Segmentation","text":"Click for answers \ud83d\udc47 <p>Two techniques used by OS to manage the allocation of memory.</p> <p><code>Paging</code>: divides memory into logical units called pages. Each page represents a fixed-size chunk of memory, often 4KB in size.</p> <ul> <li>When a program needs to access a memory location, the operating system maps the virtual address used by the program to a physical address in memory using a page table. This allows programs to access memory without knowing its physical location, and it also allows the operating system to manage physical memory more efficiently by loading pages into memory only when needed.</li> </ul> <p><code>Segmentation</code>: divides memory into logical units called segments. Each segment represents a specific part of the program, such as the code, data, or stack. Each segment has a unique size and is assigned a base address and a limit. </p> <ul> <li>When a program needs to access a memory location, the operating system maps the logical address used by the program to a physical address in memory using a segment table. This allows programs to access memory more efficiently, as they only need to know the logical location of the data they need to access.</li> </ul>"},{"location":"10_Interview/Operating_system/#logic-memory--virtual-memory","title":"Logic memory &amp; Virtual memory","text":"Click for answers \ud83d\udc47 <ul> <li> <p><code>Logical memory</code> is the memory space that a process sees as its own, and it consists of several segments, such as the code segment, data segment, and stack segment. Each segment contains a different type of data that the process needs to execute.</p> </li> <li> <p><code>Virtual memory</code> on the other hand, is a technique used by operating systems to allow processes to use more memory than is physically available in the computer. It uses a combination of hardware and software to map a process's logical memory to physical memory or to a temporary storage area on disk called the swap file.</p> </li> </ul>"},{"location":"10_Interview/Operating_system/#page-fault","title":"Page Fault","text":"Click for answers \ud83d\udc47 <p>A <code>page fault</code> is a type of interrupt, raised by the hardware when a running program accesses a memory page that is mapped into the virtual address space, but not loaded in physical memory. </p>"},{"location":"10_Interview/Operating_system/#file-system","title":"File System","text":"Click for answers \ud83d\udc47 <p><code>File System</code>: A file is a collection of related information that is recorded on secondary storage. Or file is a collection of logically related entities. </p>"},{"location":"10_Interview/Operating_system/#file-directories","title":"File Directories","text":"Click for answers \ud83d\udc47 <p><code>File Directories</code>: Collection of files is a file directory. The directory contains information about the files, including attributes, location and ownership. Here are several directory types:</p> <ul> <li> <p>SINGLE-LEVEL DIRECTORY: In this a single directory is maintained for all the users</p> </li> <li> <p>TWO-LEVEL DIRECTORY: Due to two levels there is a path name for every file to locate that file.</p> </li> <li> <p>TREE-STRUCTURED DIRECTORY: Directory is maintained in the form of a tree. Searching is efficient and also there is grouping capability. </p> </li> </ul> <p>Here are some file allocation ways:</p> <ul> <li> <p>Continuous Allocation: A single continuous set of blocks is allocated to a file at the time of file creation.</p> </li> <li> <p>Linked Allocation(Non-contiguous allocation): Allocation is on an individual block basis. Each block contains a pointer to the next block in the chain. </p> </li> <li> <p>Indexed Allocation: It addresses many of the problems of contiguous and chained allocation. In this case, the file allocation table contains a separate one-level index for each file</p> </li> </ul>"},{"location":"10_Interview/Operating_system/#disk-time","title":"Disk time","text":"Click for answers \ud83d\udc47 <ul> <li> <p><code>Seek time</code> is the time taken to locate the disk arm to a specified track where the data is to be read or write.</p> </li> <li> <p><code>Rotational Latency</code> is the time taken by the desired sector of the disk to rotate into a position so that it can access the read/write heads.</p> </li> <li> <p><code>Transfer time</code> is the time to transfer the data. It depends on the rotating speed of the disk and number of bytes to be transferred. </p> </li> <li> <p><code>Disk Access Time</code> = Seek Time + Rotational Latency + Transfer Time </p> </li> <li> <p><code>Response Time</code> is the average of time spent by a request waiting to perform its I/O operation. Average Response time is the response time of the all requests. </p> </li> </ul>"},{"location":"10_Interview/Operating_system/#buffer","title":"Buffer","text":"Click for answers \ud83d\udc47 <p>A <code>buffer</code> is a memory area that stores data being transferred between two devices or between a device and an application.</p>"},{"location":"10_Interview/Operating_system/#disk-scheduling-algorithms","title":"Disk Scheduling Algorithms","text":"Click for answers \ud83d\udc47 <ul> <li>FCFS: FCFS is the simplest of all the Disk Scheduling Algorithms. In FCFS, the requests are addressed in the order they arrive in the disk queue.</li> <li>SSTF: In SSTF (Shortest Seek Time First), requests having shortest seek time are executed first. So, the seek time of every request is calculated in advance in a queue and then they are scheduled according to their calculated seek time. As a result, the request near the disk arm will get executed first.</li> <li>SCAN: In SCAN algorithm the disk arm moves into a particular direction and services the requests coming in its path and after reaching the end of the disk, it reverses its direction and again services the request arriving in its path. So, this algorithm works like an elevator and hence also known as elevator algorithm.</li> <li>CSCAN: In SCAN algorithm, the disk arm again scans the path that has been scanned, after reversing its direction. So, it may be possible that too many requests are waiting at the other end or there may be zero or few requests pending at the scanned area. </li> <li>LOOK: It is similar to the SCAN disk scheduling algorithm except for the difference that the disk arm in spite of going to the end of the disk goes only to the last request to be serviced in front of the head and then reverses its direction from there only. Thus it prevents the extra delay which occurred due to unnecessary traversal to the end of the disk. </li> <li>CLOOK: As LOOK is similar to SCAN algorithm, in a similar way, CLOOK is similar to CSCAN disk scheduling algorithm. In CLOOK, the disk arm in spite of going to the end goes only to the last request to be serviced in front of the head and then from there goes to the other end\u2019s last request. Thus, it also prevents the extra delay which occurred due to unnecessary traversal to the end of the disk. </li> </ul>"},{"location":"10_Interview/Operating_system/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> <li>Last Minute Notes \u2013 Operating Systems</li> <li>Concurrency vs. Parallelism</li> <li>Image Resource 1</li> <li>Image Resource 2</li> </ul>"},{"location":"10_Interview/Operating_system/extra_questions_from_GPT/","title":"extra questions from GPT","text":"<p>Unfortunately, the article does not provide a clear numbering for the questions, but I can provide a list of 40 questions to get to know before an interview about operating systems. These questions cover a wide range of topics and will help you prepare for the interview:</p> <ol> <li>What is an operating system?</li> <li>What are the main functions of an operating system?</li> <li>What is the difference between a process and a thread?</li> <li>What are the different types of scheduling algorithms?</li> <li>What is deadlock and how can it be avoided?</li> <li>What is paging and segmentation in memory management?</li> <li>What are the different types of operating systems?</li> <li>Explain the concept of virtual memory.</li> <li>What is the difference between preemptive and non-preemptive scheduling?</li> <li>What are semaphores and how are they used?</li> <li>What is the difference between internal and external fragmentation?</li> <li>What is the role of a dispatcher in an operating system?</li> <li>Explain the concept of thrashing.</li> <li>What is the difference between logical and physical address space?</li> <li>How does the operating system handle file management?</li> <li>What are the different file allocation methods?</li> <li>Explain the concept of disk scheduling.</li> <li>What is the difference between contiguous and non-contiguous memory allocation?</li> <li>What are the different types of inter-process communication?</li> <li>Explain the concepts of demand paging and page replacement.</li> <li>What is the purpose of a system call?</li> <li>What is the difference between hard and soft real-time systems?</li> <li>What are the main components of a computer system?</li> <li>What are the different process states?</li> <li>What is the difference between swapping and paging?</li> <li>Explain the concept of CPU scheduling.</li> <li>What is the difference between a monolithic and microkernel architecture?</li> <li>What are the key aspects of security in an operating system?</li> <li>What is the role of a process control block (PCB)?</li> <li>How does an operating system handle device management?</li> <li>What are the differences between primary and secondary memory?</li> <li>What is the purpose of a file system?</li> <li>Explain the concept of cache memory.</li> <li>What is a critical section and how can it be managed?</li> <li>What is the difference between mutex and semaphore?</li> <li>Explain the concepts of context switching and process synchronization.</li> <li>What is a system call and how does it work?</li> <li>What is the difference between kernel mode and user mode?</li> <li>Explain the concept of RAID (Redundant Array of Independent Disks).</li> <li>What is the role of an operating system in resource allocation?</li> </ol> <p>Studying these questions and their answers will help you gain a strong understanding of operating systems and better prepare you for your interview.</p>"},{"location":"10_Interview/Other/oop_guide/","title":"OOP concepts","text":"<p>Please go to this link or check the info below:</p>"},{"location":"10_Interview/Other/sql_guide/","title":"SQL","text":"<p>Please go to this link or check the info below:</p>"},{"location":"11_Game_Development/","title":"Game Developement","text":"<p>This chapter is for notes taken during <code>Game Development</code>.</p> <p></p>"},{"location":"11_Game_Development/#this-chapter-is-split-into-three-sections","title":"This chapter is split into three sections:","text":"<ol> <li> <p>Unity: C# based cross platform game engine.</p> </li> <li> <p>Unreal: C++ based game engine focusing on real-world rendering.</p> </li> </ol>"},{"location":"11_Game_Development/Unity/","title":"Unity","text":""},{"location":"11_Game_Development/Unity/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ol> <li> <p>Shader Graph: shader related effects implemented by Unity.</p> </li> <li> <p>VFX: GPU particle system related effects implemented by Unity.</p> </li> <li> <p>Game Design Pattern: Common design patterns from Unity.</p> </li> <li> <p>Unity Investigation: IDE and coding knowledge from Unity.</p> </li> <li> <p>Reading Materials: Unity related books and articles.</p> </li> </ol>"},{"location":"11_Game_Development/Unity/Reading_Materials/","title":"Unity Reading Materials","text":"<p>Below are the reading materials for Unity:</p> The definitive guide to creating advanced visual effects in Unity <p></p> Assets, Resources and AssetBundles <p>Click here to view the tutorial on Unity Learn</p>"},{"location":"11_Game_Development/Unity/Shader_Graph/Flipbook/Flipbook/","title":"Flipbook Node","text":"<p>In shader graph, The <code>Flipbook</code> node generates UV coordinates that are used to sample a texture that's divided into frames laid out in a grid pattern. It's most frequently used to playback a series of frames to create an animation.</p> <p>Here is the example of the <code>Flipbook</code> node provided by Unity:</p> <p></p> How to use the <code>Flipbook</code> node? <p>Below are the properties of the <code>Flipbook</code> node:</p> <ul> <li>UV: The UV coordinates used to sample the texture.</li> <li>Width: The number of frames in the texture's horizontal direction.</li> <li>Height: The number of frames in the texture's vertical direction.</li> <li>Tile: The amount equal to the number of which the texture is tiled in the horizontal and vertical directions. It will be modedbythe number of Height and Width. (NOTICE: We should use <code>Floor</code> here, since the number must be a integer.)</li> </ul> <p></p> How to generate texture for <code>Flipbook</code> ? <p></p> <p><code>Image Sequencer</code> is a tool that allows you to create flipbooks from a sequence of images. Basically what you need is:</p> <ol> <li>Create an animation use shader graph.</li> <li>Record the animation as a GIF or a sequence of images.</li> <li>If you have a GIF, you can use online tools to convert it to a sequence of images.</li> <li>Use <code>Image Sequencer</code> to generate the Flipbook texture.</li> </ol> <p>Reference videos:</p> <p> </p> <p> </p>"},{"location":"11_Game_Development/Unity/Shader_Graph/Flipbook/Flipbook/#reference","title":"Reference","text":"<ul> <li>Shader Graph samples</li> <li>Flipbook Node</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/","title":"Unity Investigation","text":""},{"location":"11_Game_Development/Unity/Unity_Investigation/#there-are-below-sections-in-this-chapter","title":"There are below sections in this chapter:","text":"<ol> <li> <p>URP.</p> </li> <li> <p>Unity Debug.</p> </li> <li> <p>Unity Life Cycle.</p> </li> <li> <p>Awaitable.</p> </li> </ol>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Awaitable/Awaitable/","title":"Awaitable","text":"What is an \"Awaitable\" in Unity? <p>An <code>awaitable</code> is not unique to Unity, but rather a general term in C# that refers to any object that can be awaited using the <code>await</code> keyword. For an object to be <code>awaitable</code>, it must implement the <code>GetAwaiter()</code> method, which returns an <code>Awaiter</code>. This <code>Awaiter</code> must implement methods like <code>IsCompleted</code>, <code>OnCompleted(Action continuation)</code>, and <code>GetResult()</code>.</p> <ul> <li> <p>In C#, tasks (<code>Task</code> or <code>Task&lt;T&gt;</code>) are the most common <code>awaitable</code> objects, meaning you can call <code>await</code> on them. When you <code>await</code> something, you're telling the program to asynchronously wait for its completion without blocking the main thread.</p> </li> <li> <p>In Unity, when we refer to something as <code>awaitable</code>, we mean an object or operation (e.g. frames or physics updates) that can be awaited using <code>async/await</code>. Unity traditionally uses coroutines for asynchronous programming, but newer versions (2023.1+) introduced the <code>Awaitable</code> class for more efficient async operations.</p> </li> </ul> Old way of asynchronous programming in Unity <p>Unity traditionally uses <code>coroutines</code> for asynchronous programming because it was the primary way to handle tasks that needed to occur over time without blocking the main thread prior to the introduction of async/await. <code>Coroutines</code> in Unity allow developers to write code that \"waits\" for certain conditions (like a delay, waiting for a frame, or a physics update) without halting the entire game loop. This made <code>coroutines</code> a very flexible tool for tasks like animations, timed events, or other frame-based operations.</p> Introducing of Awaitable in Unity <p>In Unity 2023.1+, the <code>Awaitable</code> class was introduced to provide a more efficient way to handle asynchronous operations. It allows developers to use <code>async/await</code> syntax in Unity and designed to optimize <code>async/await</code> patterns for Unity's game engine.</p> How to use <code>Awaitable</code>? <p> </p> Conclusion\uff1aFeatures of <code>Awaitable</code>? <ul> <li>the asynchronous calculation can be stopped     </li> <li>automatically deconstructed after completion      </li> <li>can switch between main thread and background threads     </li> <li>Task delay cannot be used in WebGL, but awaitable can     </li> <li>Awaitable objects are pooled and reused to avoid excessive memory allocations, which helps improve performance in environments like WebGL and mobile platforms\u200b</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Awaitable/Awaitable/#reference","title":"Reference","text":"<ul> <li>Awaitable Video</li> <li>Unity Awaitable Documentation</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_Debug/Unity_debug/","title":"Unity Debug","text":"<p>Here are several tools under the IDE for debugging the CPU and GPU.</p>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_Debug/Unity_debug/#memory-profiler","title":"Memory profiler","text":"When to use <code>Memory profiler</code>? <ul> <li>Monitors real-time memory usage for both managed and native memory.</li> <li>Identifies memory allocations and leaks to optimize RAM usage.</li> <li>Tracks memory allocation per object type, helping pinpoint areas of high memory consumption.</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_Debug/Unity_debug/#profiler","title":"Profiler:","text":"When to use <code>Profiler</code>? <ul> <li>Tracks CPU and GPU performance in terms of time spent on different tasks.</li> <li>Provides a breakdown of scripts, rendering, physics, and other processes.</li> <li>Identifies bottlenecks by showing frame time and resource usage.</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_Debug/Unity_debug/#frame-debugger","title":"Frame Debugger:","text":"When to use <code>Frame Debugger</code>? <ul> <li>Allows you to step through frames to visualize each draw call.</li> <li>Helps understand the order of operations in the rendering pipeline.</li> <li>Useful for debugging overdraw, incorrect rendering order, and other rendering issues.</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_Debug/Unity_debug/#rendering-debugger","title":"Rendering Debugger:","text":"When to use <code>Rendering Debugger</code>? <ul> <li>Focuses on specific stages of the GPU pipeline.</li> <li>Helps debug shader issues, pipeline state, and resource binding.</li> <li>Useful for troubleshooting rendering artifacts or GPU-related bugs.</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_Debug/Unity_debug/#rendering-graph-viewer","title":"Rendering Graph Viewer:","text":"When to use <code>Rendering Graph Viewer</code>? <ul> <li>Visualizes the rendering pipeline nodes.</li> <li>Shows how resources like textures, buffers, and shaders are used in each stage.</li> <li>Helps optimize resource allocation and GPU performance.</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_Debug/Unity_debug/#reference","title":"Reference","text":"<ul> <li>Memory Profiler overview</li> <li>Profiler overview</li> <li>Frame Debugger overview</li> <li>Rendering Debugger overview</li> <li>Render Graph Viewer</li> </ul>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_LifeCycle/Unity_LifeCycle/","title":"Unity Life Cycle","text":"<p>Here is the official documentation for Unity Life Cycle: </p> Simplification of Unity Life Cycle <p>The Unity Life Cycle can be simplified as follows:</p> <p></p> <ul> <li>Awake: Called when the script instance is being loaded.</li> <li>OnEnable: Called when the object becomes enabled and active.</li> <li>Start: Called on the frame when a script is enabled just before any of the Update methods are called the first time.</li> <li>FixedUpdate: Called every fixed frame-rate frame.</li> <li>Update: Called every frame.</li> <li>LateUpdate: Called every frame after Update has finished.</li> <li>OnGUI: Called multiple times per frame.</li> <li>OnDisable: Called when the behaviour becomes disabled.</li> <li>OnDestroy: Called when the script instance is being destroyed.</li> </ul> <code>FixedUpdate</code> vs <code>Update</code> <ul> <li> <p>FixedUpdate: Use FixedUpdate when dealing with physics or other time-dependent operations. It does not depend on the frame rate.</p> <p></p> </li> <li> <p>Update: Use Update when dealing with input or non-physics frame updates. It will be called every frame.</p> <p> </p> </li> </ul> <p>Here is the example shows the difference between <code>FixedUpdate</code> and <code>Update</code>:</p> <p> </p> <p>Original Video:</p> <p> </p>"},{"location":"11_Game_Development/Unity/Unity_Investigation/Unity_LifeCycle/Unity_LifeCycle/#reference","title":"Reference","text":"<ul> <li>Unity\u767e\u79d1\u4e4bUpdate\u548cFixedUpdate\u7684\u533a\u522b</li> </ul>"},{"location":"11_Game_Development/Unity/VFX/","title":"VFX under Unity","text":"<p>This section is talking about the VFX particle system in Unity.</p>"},{"location":"11_Game_Development/Unity/VFX/#table-of-contents","title":"Table of contents:","text":""},{"location":"11_Game_Development/Unity/VFX/#vfx-visual-effects","title":"VFX Visual Effects","text":"<ol> <li>Fog effect.</li> <li>Tracing.</li> </ol>"},{"location":"11_Game_Development/Unity/VFX/#vfx-concepts","title":"VFX Concepts","text":"<ol> <li>Parameter v.s. Attribute.</li> </ol>"},{"location":"11_Game_Development/Unity/VFX/VFX_Concepts/Parameter_vs_Attribute/Parameter_vs_Attribute/","title":"Parameter vs. Attribute in Unity's VFX Graph","text":"<p>In Unity's VFX Graph, \"Parameters\" and \"Attributes\" are two common concepts used to control and adjust particle effects, but they serve different purposes and are used in distinct ways. Here's an explanation of the difference between them</p>"},{"location":"11_Game_Development/Unity/VFX/VFX_Concepts/Parameter_vs_Attribute/Parameter_vs_Attribute/#parameters","title":"Parameters","text":"Parameters <p>Parameters are variables used to control and adjust the effect from outside of the VFX Graph. Parameters can be exposed in the <code>Inspector</code>, allowing you to adjust them directly in the editor or dynamically change their values during runtime through scripts.</p> <ul> <li>Definition: Defined on the VFX Graph's Blackboard.</li> <li>Purpose: To control the VFX Graph from external sources. E.g. particle color, particle speed, emission rate, or dynamically changes the VFX effect during runtime through a script, etc.</li> </ul> <p></p>"},{"location":"11_Game_Development/Unity/VFX/VFX_Concepts/Parameter_vs_Attribute/Parameter_vs_Attribute/#attributes","title":"Attributes","text":"Attributes <p>Attributes are used to control the properties of individual particles within the particle system. Each particle has its own attributes, which determine its behavior and appearance. Common particle attributes include position, velocity, color, size, etc. User can add \"Custom attributes\" to create more complex and customized effects.</p> <ul> <li>Definition: Attributes are defined and used inside the VFX Graph, typically set and read during the Initialize, Update, and Output stages of a particle.</li> <li>Purpose: To control the properties and behavior of each particle in the system. E.g. particle's lifespan, initial position, initial velocity, or color over time, etc.</li> </ul> <p></p>"},{"location":"11_Game_Development/Unity/VFX/VFX_Concepts/Parameter_vs_Attribute/Parameter_vs_Attribute/#summary-of-differences","title":"Summary of Differences","text":"<ol> <li>Scope:<ul> <li>Parameters: Control the entire VFX Graph externally and can be adjusted in the editor or dynamically via scripts.</li> <li>Attributes: Control the properties and behavior of individual particles within the VFX Graph.</li> </ul> </li> <li>Definition and Use:<ul> <li>Parameters: Defined on the Blackboard and typically exposed for external use.</li> <li>Attributes: Defined and used inside the VFX Graph to control specific particle behavior and appearance.</li> </ul> </li> <li>Purpose:<ul> <li>Parameters: Used for  external interaction and dynamic adjustment of the VFX effect.</li> <li>Attributes: Used internally within the particle system to control individual particles.</li> </ul> </li> </ol>"},{"location":"11_Game_Development/Unity/VFX/VisualEffects/Fog/Fog/","title":"Fog Effect","text":"<p><code>Flip book</code> is a way to animate a series of images. This technique is used in animation (frame animation), shader (Flipbook node), and visual effects. Flip book is frequencly used in game development to create visual effects like fire, smoke, and water.</p> <p></p> Fog effect <p>Here is a simple example of the fog effect created by the flip book technique:</p> <p> </p>"},{"location":"11_Game_Development/Unity/VFX/VisualEffects/Tracing/Tracing/","title":"Tracing","text":"<p><code>Tracing</code> is a visual effect that creates a trail of particles behind an object. Remember turn on the <code>world</code> space option in the VFX graph to make the particless stay at the old position in the world space.</p> <p></p> <code>Tracing</code> effect <p>Here is a simple example of creating the <code>Tracing</code> effect:</p> <p> </p>"},{"location":"1_Computer_Graphics/","title":"Computer Graphics","text":"<p>My exploration of <code>Computer Graphics</code> stems from my love of art, programming, and scientific equations.</p> <p></p>"},{"location":"1_Computer_Graphics/#this-chapter-is-split-into-three-sections","title":"This chapter is split into three sections:","text":"<ol> <li> <p>Advanced Graphics: advanced topics in the field of CG.</p> </li> <li> <p>Scientific Visualization: visualization of methods and results in scientific research.</p> </li> <li> <p>CG tools: tools and libraries used in CG.</p> </li> <li> <p>Visual Effects: shader special effects or particle system visual effects.</p> </li> </ol>"},{"location":"1_Computer_Graphics/Advanced_Graphics/","title":"Advanced CG techniques","text":"<p>Here are some advanced topics in CG:</p>"},{"location":"1_Computer_Graphics/Advanced_Graphics/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Noise.</p> </li> <li> <p>Lighting.</p> </li> <li> <p>Bluring.</p> </li> <li> <p>Glitch Art</p> </li> </ol>"},{"location":"1_Computer_Graphics/Advanced_Graphics/Bluring/","title":"Bluring algorithms","text":"10 normal <code>Bluring</code> algorithms"},{"location":"1_Computer_Graphics/Advanced_Graphics/Bluring/#reference","title":"Reference","text":"<ul> <li>High quality post-processing: Summary and implementation of ten kinds of image blur algorithms</li> </ul>"},{"location":"1_Computer_Graphics/Advanced_Graphics/Noise/","title":"Noise","text":"FBM Voronoi Noise <p>Reference 1:</p> <p></p> <p>Reference 2:</p> <p></p>"},{"location":"1_Computer_Graphics/Advanced_Graphics/RayTracing/","title":"Ray Tracing","text":"Recent Ray Tracing teches"},{"location":"1_Computer_Graphics/Advanced_Graphics/RayTracing/#reference","title":"Reference","text":"<ul> <li>Real-time ray tracing technology: Recent developments and future challenges</li> </ul>"},{"location":"1_Computer_Graphics/Scientific_Visualization/","title":"Scientific visualization under CG","text":""},{"location":"1_Computer_Graphics/Scientific_Visualization/#table-of-contents","title":"Table of contents:","text":"<ol> <li>Thermal Dynamics.</li> </ol>"},{"location":"1_Computer_Graphics/Scientific_Visualization/Thermal/","title":"Thermal Dynamics","text":"<p>This section shows the implicit method of thermal transfering with FDE.</p>"},{"location":"1_Computer_Graphics/Scientific_Visualization/Thermal/#problem-background","title":"Problem background","text":"<p>Think about the 2D case. Considering the continuum of the whole wall material, heat conduction is the major way to transfer heat. We use heat diffusion as our heat conduction method. Assuming that \\(X\\) is the domain of a 2D plane, \\(T\\) is the temperature at point \\(p\\), and \\(\\alpha\\) is the thermal diffusivity, then we have the Equation:</p> \\[ \\begin{equation}     \\frac{\\partial T}{\\partial t} = \\alpha \\Delta T(p) = \\alpha\\left(\\frac{\\partial^2 T}{\\partial x^2}+\\frac{\\partial^2 T}  {\\partial y^2}\\right),\\quad \\forall p=(x,y)\\in X     \\label{eq:thermal_diffuse} \\end{equation} \\] <p>Take \\(f(p)\\) as a function relates to point \\(p\\), which we set is as a constant function. Dirichlet boundary condition is:</p> \\[ \\begin{equation}     \\left\\{ \\begin{array}{ll}          \\Delta T(p) =0,\\quad\\forall p\\in X     \\\\     \\\\         T(p) =f(p),\\quad\\forall p\\in \\partial X       \\end{array} \\right.     \\label{eq:Dirichlet_boundary_condition} \\end{equation} \\] <p>Neumann boundary condition is:</p> \\[ \\begin{equation}     \\left\\{ \\begin{array}{ll}          \\Delta T(p) =0,\\quad\\forall p\\in X     \\\\     \\\\         \\dfrac{\\partial T(p)}{\\partial n} =f(p),\\quad\\forall p\\in \\partial X       \\end{array} \\right.     \\label{eq:Neumann_boundary_condition} \\end{equation} \\]"},{"location":"1_Computer_Graphics/Scientific_Visualization/Thermal/#five-point-stencil-discretization","title":"Five-point stencil discretization","text":"<p>To visualize the phenomenon on a computer, we need to have temperature grids. The grid is used for the discretization of the whole 2D plane. <code>Five-point stencil</code> difference is the method we use to express derivation for the heat partial differential equations. The corresponding temperature grid with a <code>Five-point stencil</code> can be seen in the picture shown below:</p> <p></p> <p>The continuous differential form, shown in the Problem background, is further rewritten into a discrete form by the temperature grid, as shown in the equation below. The sparse matrix system will be solved in an implicit way.</p> \\[ \\begin{equation} \\begin{aligned}     \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = &amp; \\alpha\\left[\\frac{T^{n+1}_{i+1,j}-2T^{n+1}_{i,j}+T^{n+1}_{i-1,j}}    {\\Delta x^2}+\\frac{T^{n+1}_{i,j+1}-2T^{n+1}_{i,j}+T^{n+1}_{i,j-1}}{\\Delta y^2}\\right]     \\\\     &amp;+O(\\Delta t,\\Delta x^2),\\quad \\forall (x,y)\\in X     \\label{eq:thermal_diffuse_discrete} \\end{aligned} \\end{equation} \\] <p>Where \\(i\\) and \\(j\\) are the spacial indices on the temperature grid, \\(n\\) is the temporal index, which monotonically increases over time, and \\(o\\) is infinitesimal in space and time.</p> <p>We also do the same discretized processing for the two boundary conditions. We get the expression of Dirichlet B.C. and Neumann B.C. shown in below two equations [Neil 2015].</p> \\[ \\begin{equation}     T^{n}_{i,j} = C,\\quad \\forall (x,y)\\in \\partial X     \\label{eq:Dirichlet_boundary_condition_discrete} \\end{equation} \\] \\[ \\begin{equation}     \\left\\{ \\begin{array}{ll}          \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i+1,j}-2T^{n+1}_{i,j}-2\\Delta xC}  {\\Delta   x^2}\\right),\\quad\\forall i,\\; (i,j)\\in \\partial X_{left}     \\\\     \\\\         \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i-1,j}-2T^{n+1}_{i,j}-2\\Delta xC}  {\\Delta   x^2}\\right),\\quad\\forall i,\\; (i,j)\\in \\partial X_{right}     \\\\     \\\\         \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i,j+1}-2T^{n+1}_{i,j}-2\\Delta yC}  {\\Delta   y^2}\\right),\\quad\\forall j,\\; (i,j)\\in \\partial X_{top}     \\\\     \\\\         \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i,j-1}-2T^{n+1}_{i,j}-2\\Delta yC}  {\\Delta   y^2}\\right),\\quad\\forall j,\\; (i,j)\\in \\partial X_{bottom}     \\end{array} \\right.     \\label{eq:Neumann_boundary_condition_discrete} \\end{equation} \\] <p>Usually, the Five-point stencil discretization with an explicit method will need to be limited by some step length constraints. However, based on our implementation using the implicit method, our iteration step can be far longer than the explicit method, which means the temperature transferring can be sped up by increasing the length of the iteration step.</p>"},{"location":"1_Computer_Graphics/Scientific_Visualization/Thermal/#final-results","title":"Final Results","text":"<p>After setting the initial conditions (I.C.) of temperature and boundary conditions (B.C.), we start iterating the equation system until the solution converges to a stable status. The different iteration processes can be seen below.</p> <p>Case 1:<code>Dirichlet B.C:</code> top, right<code>Neumann B.C:</code> bottom, left<code>High temperature I.C:</code> top, right<code>Low temperature I.C:</code> rest of map</p> <p></p> <p>Case 2:<code>Dirichlet B.C:</code> top<code>Neumann B.C:</code> bottom, left, right<code>High temperature I.C:</code> top<code>Low temperature I.C:</code> rest of map</p> <p></p> <p>Case 3:<code>Dirichlet B.C:</code> top, right<code>Neumann B.C:</code> bottom, left<code>High temperature I.C:</code> top, right<code>Low temperature I.C:</code> rest of map</p> <p></p> <p>Case 4:<code>Dirichlet B.C:</code> top<code>Neumann B.C:</code> bottom, left, right<code>High temperature I.C:</code> top<code>Low temperature I.C:</code> rest of map</p> <p></p>"},{"location":"1_Computer_Graphics/Scientific_Visualization/Thermal/#references","title":"References","text":"<ul> <li>\u201cFinite difference methods,\u201d Neil Balmforth's webpage. [Online]. Available: https://personal.math.ubc.ca/~njb/fd. [Accessed: 14-Nov-2022]. </li> </ul>"},{"location":"1_Computer_Graphics/Tools/","title":"Computer Graphics tools learning","text":""},{"location":"1_Computer_Graphics/Tools/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>OpenCV.</p> </li> <li> <p>Shader.</p> </li> <li> <p>Three.js.</p> </li> <li> <p>Unity.</p> </li> <li> <p>Unreal Engine.</p> </li> <li> <p>Vulkan.</p> </li> </ol>"},{"location":"1_Computer_Graphics/Tools/OpenCV/","title":"OpenCV","text":""},{"location":"1_Computer_Graphics/Tools/Shader/","title":"Shader Language","text":""},{"location":"1_Computer_Graphics/Tools/Threejs/","title":"Three.js","text":""},{"location":"1_Computer_Graphics/Tools/Vulkan/","title":"Vulkan","text":""},{"location":"1_Computer_Graphics/Visual_Effects/","title":"CG Visual Effects","text":"<p>This chapter is about the ideas/resources collection about shader special effects or partical system visual effects.</p>"},{"location":"1_Computer_Graphics/Visual_Effects/#table-of-contents","title":"Table of contents:","text":"<ul> <li> <p>Shader Effects</p> <ol> <li>Old TV signals.</li> <li>Rain Drop Ripples.</li> </ol> </li> <li> <p>VFX Effects</p> <ol> <li>.</li> </ol> </li> </ul>"},{"location":"1_Computer_Graphics/Visual_Effects/ShaderEffects/Old_TV_signals/","title":"Old TV signals","text":"Old TV signals Assets"},{"location":"1_Computer_Graphics/Visual_Effects/ShaderEffects/Old_TV_signals/#reference","title":"Reference","text":"<ul> <li>Old TV signals</li> </ul>"},{"location":"1_Computer_Graphics/Visual_Effects/ShaderEffects/Rain_Drop_Ripples/","title":"Rain Drop Ripples","text":"Rain Drop Ripples Assets"},{"location":"1_Computer_Graphics/Visual_Effects/ShaderEffects/Rain_Drop_Ripples/#reference","title":"Reference","text":"<ul> <li>Unity Shadergraph: Rain Drop Ripples!</li> </ul>"},{"location":"2_Software_Engineering/","title":"Software Engineering","text":"<p>Being a software engineer requires an understanding of the various technologies used in the industry.</p>"},{"location":"2_Software_Engineering/#this-chapter-is-split-into-7-sections","title":"This chapter is split into 7 sections:","text":"<ol> <li> <p>Agile Scrum: version control.</p> </li> <li> <p>Git and GitHub: version control.</p> </li> <li> <p>Docker: lightweight virtual machine.</p> </li> <li> <p>Swift: Mac OS language.</p> </li> <li> <p>AWS: Amazon web services.</p> </li> <li> <p>Bash Commands: Linux command</p> </li> <li> <p>VS Code: magic IDE with bunches of great extensions.</p> </li> <li> <p>Others: random topics waiting to be classified.</p> </li> </ol>"},{"location":"2_Software_Engineering/Review/","title":"\ud83e\udd5a Blog Egg! For CS561 reviewing","text":"<p>This is the specific section for indexing all the knowledge notes shown in CS561 from OSU. Thanks everybody's hardworking. Let's review what we have learned: \ud83e\udd20 \ud83d\udcaf</p> <ol> <li> <p>AWS</p> </li> <li> <p>Bash commands</p> </li> <li> <p>Agile</p> </li> <li> <p>Git theory and commands</p> </li> <li> <p>REST</p> </li> <li> <p>Mock</p> </li> <li> <p>Cryptographic</p> </li> <li> <p>Auth</p> </li> <li> <p>Tests</p> </li> <li> <p>Concurrency v.s. Prallellism</p> </li> <li> <p>Semantics Versioning</p> </li> <li> <p>Self-documenting Code</p> </li> <li> <p>Dispatch Queue &amp; Dead lock</p> </li> <li> <p>Engineer Principles</p> </li> <li> <p>Map reduce</p> </li> <li> <p>Docker</p> </li> </ol>"},{"location":"2_Software_Engineering/AWS/","title":":simple-amazonaws:{.e_swift} AWS","text":"<p>For AWS Developer Associate Certification</p>"},{"location":"2_Software_Engineering/AWS/#there-are-2-sections-in-this-chapter","title":"There are 2 sections in this chapter:","text":"<ol> <li> <p>Basic concepts in AWS.</p> </li> <li> <p>AWS application.</p> </li> </ol>"},{"location":"2_Software_Engineering/AWS/Application/","title":":simple-amazonaws: Application 1: a <code>Decrypter</code> service","text":""},{"location":"2_Software_Engineering/AWS/Application/#task","title":"Task","text":"Situation <p>Now, you want to make a <code>Decrypter</code> service. And below is the pipeline. How could you make it using AWS components?:</p> <ol> <li> <p>Store the data somewhere (e.g. on disk).</p> </li> <li> <p>Load the data from somewhere (e.g. from disk) into a dictionary (hopefully just once).</p> </li> <li> <p>Look up a password in a dictionary (each time someone wants to decrypt).</p> </li> <li> <p>Expose the functionality through a public API.</p> </li> </ol>"},{"location":"2_Software_Engineering/AWS/Application/#idea","title":"Idea","text":"Solution <p>The picture below shows the efficient way to simulate the Decrypter service on AWS.</p> <p></p> Details in the Solution <p>Remember <code>ECS</code> with <code>Load Balancer</code> structure. Let's draw the details between <code>Lambda</code> and <code>Database</code> parts:</p> <p></p>"},{"location":"2_Software_Engineering/AWS/Application/#implementation","title":"Implementation","text":"Implementation <p>Architecture Diagram:</p> <p> </p> <p>Swagger Rainy Day:</p> <p> </p> <p>Swagger Happy Day:</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/","title":"Basic AWS concepts","text":""},{"location":"2_Software_Engineering/AWS/Basic/#table-of-contents","title":"Table of Contents:","text":"<ol> <li> <p> IAM.</p> </li> <li> <p> EC2.</p> </li> <li> <p> Elastic Load Balancing and Auto Scaling.</p> </li> <li> <p> S3.</p> </li> <li> <p> ECS and Docker Containers.</p> </li> <li> <p> Serverless Application.</p> </li> <li> <p> Availbility Zone and Region.</p> </li> </ol>"},{"location":"2_Software_Engineering/AWS/Basic/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/EC2/","title":"EC2","text":"What? <p><code>EC2</code> is Amazon Elastic Compute Cloud. <code>EC2</code> allows you to run virtual servers in the cloud.</p> <p>The concept of <code>EC2</code> can be seen in the picture below:</p> <p></p> <p>The pipeline of launching an <code>EC2</code> instance:</p> <p></p> Why do we choose <code>EC2</code>? <p>Fast, high administration, DIY combination, robust, safe, and cheap!</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/EC2/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/ECS/","title":"Docker Containers and ECS","text":"What is <code>Docker Container</code> and What is <code>Kubernetes</code>? <ul> <li> <p><code>Docker Container</code> is an alternative to traditional virtual machines. It can be understood as the Light-weight VM that we can run our applications with fewer underlying resources and dependencies. <code>Docker Container</code> is very quick to start up and very good for <code>microservices</code>-based applications.</p> </li> <li> <p><code>Kubernetes</code> is a platform for running and managing <code>container</code>s from many container runtimes.</p> </li> </ul> <p>The relationship between Virtual Machine, Container, and Kubernetes can be seen in the picture (which comes from \"Docker or Kubernetes: Which one is right for you?\" in Kubernetes vs. Docker), as shown below :</p> <p> </p> Do you remember <code>EC2</code>? What are <code>ECS</code> and <code>EKS</code>? <p><code>EC2</code>, the Amazon Elastic Compute Cloud we discussed in the previous section, is actually a <code>virtual machine</code>.</p> <p><code>ECS</code> is Amazon Elastic Container Service for you to use <code>container</code> in the AWS cloud. It also provides a fully managed serverless platform or partially self-managed platform for users.</p> <p><code>EKS</code>, the Amazon Elastic Kubernetes, is also offered by AWS to use <code>Kubernetes</code> in the cloud.</p> <p>Below is the structure of ECS service:</p> <p> </p> <p>Here is the definition of each concept shown in the picture above:</p> <p> </p> <p>ECS <code>EC2 Cluster</code> v.s. ECS <code>Fargate Cluster</code>:</p> <p> </p> <p>ECS with <code>Load Balancer</code>:</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/ECS/#references","title":"References:","text":"<ul> <li> <p>Digital Cloud Training</p> </li> <li> <p>Kubernetes vs. Docker</p> </li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/IAM/","title":"IAM","text":"What? <p><code>IAM</code> is Identity and Access Management.</p> <p>IAM can be used to create <code>user</code>, <code>groups</code>, <code>roles</code>, and <code>policies</code>, to AVOID using the <code>Root</code> account to access to AWS resources. The relations between the four concepts can be seen in the picture below:</p> <p></p> <p> </p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/IAM/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/","title":"Elastic Load Balancing and Auto Scaling","text":"What demand? <ul> <li> <p>How can we make sure that our applications have enough capacity and enough <code>EC2</code> instances available?</p> </li> <li> <p>How can we distribute incoming connections to those <code>EC2</code> instances?</p> </li> </ul> How? <ul> <li> <p><code>Auto Scaling</code> helps to make sure that you have the right number of <code>EC2</code> instances to service the demand of your application.</p> </li> <li> <p>Then, put <code>Elastic Load Balancing</code> in front of your application. <code>ELB</code> will distribute incoming connections across the pool of instances that are managed by the <code>Auto Scaling Group</code>.</p> </li> </ul> <p>All in all, those two technologies above enable you to have elastic and fault-tolerant applications.</p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#elasticity-scaling-up-vs-out","title":"Elasticity: Scaling Up v.s. Out","text":"<p>Assume that we have an <code>EC2</code> instance for our application now:</p> <p> </p> <p>Let's see what is <code>Scaling Up</code> (<code>Vertical Scaling</code>):</p> <p></p> <p> </p> <p>Let's see what is <code>Scaling Out</code> (<code>Horizontal Scaling</code>):</p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#amazon-ec2-auto-scaling","title":"Amazon EC2 Auto Scaling","text":"<p>Amazon <code>EC2 Auto Scaling</code> is horizontal scaling (scales out), which dynamically launches and terminates instances. <code>CloudWatch metrics</code> and <code>EC2 status checks</code> will process the responsed information from <code>EC2 Auto Scaling</code>. The pipeline to realize the elasticity and scalability can be seen below\uff1a</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#load-balancing-and-high-availability","title":"Load Balancing and High Availability","text":"<p>From <code>EC2 Auto Scaling</code>, we end up with lots of different <code>instances</code> of the same application. </p> Demand? <p>How do we direct traffic to those <code>instances</code>?</p> Load Balancer <p>As you can see in the pictures below, </p> <ul> <li><code>Load Balancer</code> can not only provide <code>high availability</code> (availability zones) if some server is in the crash.</li> </ul> <p> </p> <ul> <li><code>Load Balancer</code> can also increase <code>fault tolerance</code> when the system has redundant components (more than one server or more than one hardware).</li> </ul> <p> </p> <p>Let's see the case we combine <code>EC2 Auto Scaling</code> and <code>Load Balancer</code> together:</p> <p></p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#types-of-elastic-load-balancer","title":"Types of Elastic Load Balancer","text":"<p>There are four types of <code>Elastic Load Balancer</code>:</p> <p> </p> <p> </p> <p>Here are some use cases for different types of <code>ELB</code>:</p> <p> </p> <p> </p> <p>The details about <code>ALB</code> and <code>NLB</code> focus on the URL they use:</p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/S3/","title":"S3","text":"What and For? <p><code>S3</code> is an object-based storage system.</p> <p>You can use API to access the object's <code>S3</code> bucket (container) storage. Below are the characteristics of the storage service:</p> <p></p> <p>The basic structure of <code>S3</code> bucket:</p> <p> </p> <p>To reach the <code>objects</code> in the bucket using the <code>URL</code>:</p> <p> </p> <p>To reach the <code>bucket</code> using the <code>URL</code>:</p> <p> </p> <p>Different types of <code>S3 storage classes</code>:</p> <p> </p> <p>If you want to transfer one object from one <code>S3</code> class into the other class, you should follow the following hierarchy:</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/S3/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/","title":"Serverless Application","text":""},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#serverless-services","title":"Serverless Services","text":"What are <code>serverless</code> technologies? <p>Definition: AWS offers <code>Serverless</code> technologies for running code, managing data, and integrating applications, all without managing servers.     </p> <p><code>Serverless</code> technologies feature (Iff conditions):</p> <ul> <li>no server management</li> <li>automatic scaling</li> <li>built-in high availability</li> <li>pay-for-use billing model (to increase agility and optimize costs)</li> </ul> <p>Also, <code>Serverless</code> &lt;=&gt; <code>Fully Managed</code>.</p> What should I do with <code>serverless</code> services? <ul> <li> <p>All you have to do is: start using the service and writing code that serves your customers. </p> </li> <li> <p>You really don't have to: manage anything underneath the platform at all (e.g. you don't need to manage EC2 instances, and you don't have to install patches, do provisioning or update software). </p> </li> </ul> Who are AWS <code>serverless</code> services? <p>Remember the architecture in Application 1: a <code>Decrypter</code> service? According to that implementation pipeline, we classify the <code>serverless</code> services into three classes:</p> <p>I. Data store:</p> <ul> <li> <p>AWS  <code>S3</code>, Amazon Simple Storage Service, a serverless, fully elastic file system for builders that makes it easy to set up, scale, and cost-optimize highly available shared storage. (<code>S3</code> is not a database, <code>S3</code> is object storage\u2014it stores files. (It does not block storage though, so not quite that low level.) So in a sense, it\u2019s a \u201clightweight database\u201d the way Docker is a \u201clightweight virtual machine\u201d.)</p> </li> <li> <p>AWS  <code>DynamoDB</code>, a key-value and document database service, delivering single-digit millisecond performance at any scale.</p> </li> <li> <p>AWS  <code>RDS proxy</code>, a managed database proxy for Amazon Relational Database Service (RDS) that makes applications more scalable and secure.</p> </li> </ul> <p>II. Compute:</p> <ul> <li> <p>AWS  <code>Lambda</code>, allows you to run your code as compute functions.</p> </li> <li> <p>AWS  <code>Fargate</code>, a serverless compute engine that works with Amazon Elastic Container Service (ECS) and Amazon Elastic Kubernetes Service (EKS).</p> </li> </ul> <p>III. Application integration:</p> <ul> <li> <p>AWS  <code>API Gateway</code>, a fully-managed service that allows you to be able to connect to an application via REST API or HTTP API.</p> </li> <li> <p>AWS  <code>SQS</code>, Amazon Simple Queue Service is a message queuing service enabling you to decouple and scale microservices, distributed systems, and serverless applications.</p> </li> <li> <p>AWS <code>SNS</code>, Amazon Simple Notification Service is a fully managed messaging service for both application-to-application (A2A) and application-to-person (A2P) communication.</p> </li> </ul> <p>For more, check Serverless on AWS.</p>"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#an-example-of-using-serverless-services","title":"An example of using Serverless Services","text":""},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#references","title":"References:","text":"<ul> <li> <p>Digital Cloud Training</p> </li> <li> <p>Serverless on AWS</p> </li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/","title":"Availability Zone and Region","text":""},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#region","title":"Region","text":"What is <code>Region</code>? <p>A <code>region</code> in AWS represents a separate geographic area. If you have used AWS before, you must have seen this picture:</p> <p> </p> <p>Each AWS <code>region</code> is isolated and operates independently from other <code>regions</code>. </p>"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#availability-zone","title":"Availability Zone","text":"What is <code>Availability Zone</code>? <p><code>Availability zones</code> are highly available data centers within each AWS <code>region</code>. Each <code>availability zone</code> has independent power, cooling and networking.</p> <p>The <code>availability zones</code> within each <code>region</code> are connected via low-latency links to provide replication and fault tolerance.</p>"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#relation-az-and-region","title":"Relation: AZ and Region","text":"<p>The relationship between <code>Region</code> and <code>Availability Zone</code> can be seen in the picture below:</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#references","title":"References:","text":"<ul> <li>AWS Availability Zones, Regions, &amp; Placement Groups Explained</li> </ul>"},{"location":"2_Software_Engineering/Agile/","title":"Agile","text":""},{"location":"2_Software_Engineering/Agile/#table-of-contents","title":"Table of Contents:","text":"<ol> <li> <p>Introduction.</p> </li> <li> <p>Agile Scrum.</p> </li> </ol>"},{"location":"2_Software_Engineering/Agile/intro/","title":"Agile introduction","text":"<p>Nowadays, especially in project management, <code>Agile</code> has becomes a famous interactive processes for developing software.</p>"},{"location":"2_Software_Engineering/Agile/intro/#definition","title":"Definition","text":"What is <code>Agile</code> <p>A interactive processes for developing software.</p> Why not <code>Waterfall</code>? What is <code>Waterfall</code>? <ul> <li> <p>Definition: Every stage depends on the previous stage.</p> </li> <li> <p>Diagram of phases:</p> <pre><code>graph LR\nA[Requirement] --&gt; B[System Design]; \nB --&gt; C[Implementation]; \nC --&gt; D[Testing];\nD --&gt; E[Deployment];\nE --&gt; F[Matainence];</code></pre> </li> <li> <p>Advantage: clear, productive, good time management, and available progress tracing.</p> </li> <li>Disadvantage: no variation, adaptability, or other error once a waterfall project is set in motion.</li> </ul> Why choose Agile? <p>Compared with the linear model <code>Waterfall</code>, <code>Agile</code> is more like Fibonacci, which has better flexibility, adaptivity, and error tolerance.</p>"},{"location":"2_Software_Engineering/Agile/intro/#visulization","title":"Visulization","text":"<p>There are two ways to visualize Agile: </p> <ul> <li><code>Kanban</code></li> <li><code>Scrum</code></li> </ul> <code>Kanban</code> <p>The famous software for <code>Kanban board</code> is Asana:</p> <p></p> <code>Scrum</code> <p>The good software for <code>Scrum board</code> is Jira:</p> <p>One <code>scrum board</code> is for one sprint, which typically set two weeks as period. There are typical three stages:</p> <ol> <li>Initialize: in <code>Backlog</code>, set points for each story/task. Try to assign the points to the story with the number in Fibonacci series such as: <code>1,2,3,5...</code>:      </li> <li>Start: in scrum board, there are three swim lanes: <code>To do</code>, <code>In progress</code>, <code>Done</code>:      </li> <li>End: when you finish the scrum board in the corresponding sprint, you will get a <code>\"burn down\" chat</code>:      </li> </ol>"},{"location":"2_Software_Engineering/Agile/intro/#references","title":"References:","text":"<ul> <li>Picture Resource 1</li> </ul>"},{"location":"2_Software_Engineering/Agile/scrum/","title":"Agile Scrum Concepts","text":"<p>Let's see the concepts that belongs to Agile Scrum. Click tab for unfolding.</p> <p></p>"},{"location":"2_Software_Engineering/Agile/scrum/#roles","title":"Roles","text":"Roles <code>Product Owner</code> <ul> <li> <p>Definition: maxmize the return the business get on investments. Including: salary, company renting fee, facilities, software, and maintenance.</p> </li> <li> <p>E.g.:</p> <ul> <li>WAY 0: set priority in <code>backlog</code>.</li> <li>WAY 1: make the team towards the most valuable work.</li> <li>WAY 2: guarantee team fully understand requirement from user story.</li> </ul> </li> </ul> <code>Scrum Master</code> <ul> <li> <p>Definition: coach, who guide team to over-high level of cohesiveness, self-organization, and performance.</p> </li> <li> <p>E.g.: </p> <ul> <li>Help the team learn.</li> <li>Apply scrum.</li> <li>Agile practice. </li> <li>Remove roadblocks.</li> </ul> </li> </ul> Notice <p><code>Scrum Master</code> is NOT a boss but just a peer.</p> <code>Team Member</code> <ul> <li> <p>Definition: how work done. What tech and tool to use. Who does which task.</p> </li> <li> <p>E.g.: </p> <ul> <li>Doing the job of the team.</li> <li>What is getting done.</li> <li>Focus on result</li> </ul> </li> </ul>"},{"location":"2_Software_Engineering/Agile/scrum/#backlogs","title":"Backlogs","text":"Backlogs <code>Product Backlog</code> <p>Definition: list of deliverables for a product:    </p> <ul> <li>features</li> <li>bug fixes</li> <li>changes</li> <li>anything valuable for the product</li> </ul> <code>Sprint Backlog</code> <p>Definition: TODO list for a sprint: </p> <ul> <li>stories: has been committed to deliverin  this sprint and associating their tasks.</li> </ul>"},{"location":"2_Software_Engineering/Agile/scrum/#rythms","title":"Rythms","text":"Rythms <p>Definition: the sprint cicle. Table of meetings in a week. </p>"},{"location":"2_Software_Engineering/Agile/scrum/#ceremonies","title":"Ceremonies","text":"Ceremonies <code>Sprint Planning Meeting</code> <p>Time Frequency: 1~2 hrs/week</p> <p>Topics:</p> <ul> <li>What will we do?: Identify what must be complete to deliver.</li> <li>How will we do it?: Commit a set of deliverables (stories) for the sprint in the backlog.</li> </ul> <code>Daily Scrum (stand-up meeting)</code> <p>Time Frequency: less 15 mins/workday</p> <p>Topics:</p> <ul> <li>What has been completed</li> <li>Expects to complete</li> <li>Obstacles slowing me down</li> <li>DON'T solve problem</li> </ul> <code>Story Time Meeting</code> <p>Time Frequency: 1 hr/week</p> <p>Topics: </p> <ul> <li> <p>Discuss and improve stories from the product backlog to the sprint backlog:</p> <ul> <li>Story sizing (estimation): how much work will be required per story.</li> <li>Story splitting (estimation): big \u2192 small</li> </ul> </li> <li> <p>De/Refine acceptance criteria.</p> </li> </ul> <code>Sprint Review Meeting</code> <p>Time Frequency: 1~1.5 hrs/week</p> <p>Topics: </p> <ul> <li>End of sprint, show accomplishment (finished stories)</li> <li>NOT decision making meeting</li> </ul> <code>Retrospective Meeting</code> <p>Time Frequency: 1~2 hrs/week</p> <p>Topics: </p> <ul> <li>What learned (only 1 or 2 strategic changes make in the next sprint)</li> <li>NOT decision making meeting</li> </ul>"},{"location":"2_Software_Engineering/Agile/scrum/#abnormal-sprint-termination","title":"Abnormal Sprint Termination","text":"Abnormal Sprint Termination <p>Definition: Because of market, bussiness, competitor, team need to terminate the sprint. Go back to the early sprint to avoid troubles from halfway done work.</p>"},{"location":"2_Software_Engineering/Agile/scrum/#inspect-and-adapt","title":"Inspect and Adapt","text":"Inspect and Adapt <p>Definition: Learn from customer, team, market. &lt;==&gt; another <code>CI</code> (continuous improvement).</p>"},{"location":"2_Software_Engineering/Agile/scrum/#references","title":"References:","text":"<ul> <li>A breathtakingly Brief and Agile Introduction (2012)</li> </ul>"},{"location":"2_Software_Engineering/Docker/","title":"Docker","text":"<p>Docker container is a \"lightweight\" VM. The benifit of using container is that we do not need to care much about hardware level as real virtual machine. Instead, we only focus on the levels above operating system. Also, like WSL2, Docker's operating system can garantee file's real-time real-write synchronization between docker container folder and host folder</p>"},{"location":"2_Software_Engineering/Docker/#this-sub-chapter-can-be-split-into-4-sections","title":"This sub-chapter can be split into 4 sections:","text":"<ol> <li> <p>Basic guidance of docker container for start using Docker.</p> </li> <li> <p>A good model for Docker Image initialization.</p> </li> <li> <p>Docker Compose and it's application.</p> </li> <li> <p>Docker command line.</p> </li> </ol>"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/","title":"A good model for Docker Image initialization","text":"<p>From what we learned: Basic guidance of docker, we learned how to use Docker compose to run containers in parallel. In that learning, we directly use <code>swiftlang/swift:nightly-focal</code> from the Docker repo. Here, we will learn how to create and use our own Docker Image in the Docker compose.</p>"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/#there-are-three-steps","title":"There are three steps:","text":"<ol> <li>Create a file named <code>Dockerfile</code> in your folder. About FROM, MAINTAINER, and RUN, learn from: What-is-dockerfile .dockerfile<pre><code>FROM swiftlang/swift:nightly-focal\n\nMAINTAINER simpli\n\nRUN apt-get update\nRUN apt update\nRUN apt -y install zsh\nRUN apt -y install curl\nRUN apt -y install vim\nRUN sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\nRUN apt-get -y install -y language-pack-en\nRUN zsh\n</code></pre></li> <li>Then run <code>docker build -t simpli_image [location of your dockerfile]</code> to build a Docker Image.  </li> <li>Finally, the yml below as <code>docker-compose run --rm dev</code>: .yml<pre><code>services:\n  dev:\n    image: simpli_image #\"swiftlang/swift:nightly-focal\"\n    volumes:\n      - your directory /swift:/code\n    environment:\n      - USER=your name \n</code></pre></li> </ol> <p>Now you are using your own <code>Docker Image</code> in which <code>zsh</code> &amp; <code>oh-my-zsh</code> have been pre-installed.</p>"},{"location":"2_Software_Engineering/Docker/Docker_Command/","title":"Docker command line","text":"<p>Useful link for understanding Docker concepts:</p> <ul> <li> <p>What Is a Dockerfile: Everything You Need to Know</p> </li> <li> <p>Top Docker Commands That You Need to Master</p> </li> </ul>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#i-docker-image","title":"I. Docker Image","text":""},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-an-image","title":"Create an image:","text":"<ol> <li>Create a Docker file: .dockerfile<pre><code>mkdir Docker_images\ncd Docker_images\nvi Dockerfile\nFROM ubuntu\nMAINTAINER simpli\nRUN apt-get update\nCMD [\"echo\", \"Welcome to Simplilearn\"]\n</code></pre></li> <li>Build a Docker Image with Dockerfile and tag: Git Bash<pre><code>docker build -t simpli_image /D/Docker_images  =&gt; [location of your dockerfile]\n</code></pre></li> </ol>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#check-the-images-we-have","title":"Check the images we have:","text":""},{"location":"2_Software_Engineering/Docker/Docker_Command/#delete-some-image","title":"Delete some image:","text":""},{"location":"2_Software_Engineering/Docker/Docker_Command/#ii-docker-container","title":"II. Docker Container","text":""},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-a-container-based-on-the-image","title":"Create a container based on the image:","text":"Git Bash<pre><code>docker run --name simpli_container simpli_image\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#display-a-list-of-launched-containers","title":"Display a list of launched containers:","text":"Git Bash<pre><code>docker ps -a\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#rename-an-existing-container","title":"Rename an existing container:","text":"Git Bash<pre><code>docker rename [CONTAINER_NAME] [NEW_CONTAINER_NAME]\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#pause-a-running-container","title":"Pause a running container:","text":"Git Bash<pre><code>docker pause [CONTAINER_NAME]\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#stop-a-running-container-","title":"**Stop a running container: **","text":"<p>(somehow directly deleted the container)</p> Git Bash<pre><code>docker stop [CONTAINER_NAME]\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#restart-a-running-container-","title":"**Restart a running container: **","text":"<p>(somehow directly clear the setting of container)</p> Git Bash<pre><code>docker stop [CONTAINER_NAME]\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#removes-all-the-stopped-containers","title":"Removes all the stopped containers:","text":"Git Bash<pre><code>docker container prune [OPTIONS] \n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#quit-and-delete-the-running-containers","title":"Quit and delete the running containers:","text":"Git Bash<pre><code>exit\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#remove-an-existing-container","title":"Remove an existing container:","text":"Git Bash<pre><code>docker rm [CONTAINER] \n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-a-new-image-from-a-containers-file-changes","title":"Create a new image from a container\u2019s file changes:","text":"Git Bash<pre><code>docker container commit [OPTIONS] [CONTAINER_ID] [NEW_IMAGE_NAME]\n</code></pre> <p>The sub-explanation of Docker Compose: What is Docker Compose: Example, Benefits and Basic Commands</p>"},{"location":"2_Software_Engineering/Docker/Docker_compose/","title":"<code>Docker Compose</code> and it's application","text":"<p>We have already touched <code>Docker Compose</code> from Guidance. Now it is time to do some advance behaviors based on <code>Docker Compose</code>!</p> <p><code>Docker Compose</code> is a way to handle more than one <code>DocKer Container</code>. That is setting communiation between <code>DocKer Container</code>s. In this section, we will iterate all the situation between Server and Host combination to finally reach the goal of <code>DocKer Container</code> communications.</p> <p>Assume our mock server looks like this:</p> mockapi.js<pre><code>const express = require('express')\nconst app = express()\nconst port = 3000\n\nvar path = require('path')\nvar bodyParser = require('body-parser')\napp.use(express.static(path.join(__dirname, 'build')));\n\nvar WeatherDataController = require('./REST_API/weather');\n\napp.get('/data/2.5/weather', WeatherDataController.getData);//\n//app.get('/data/2.5/weather', (req, res) =&gt; {\n//  res.json({\"coord\":{\"lon\":123.262,\"lat\":44.5646},\"weather\":[{\"id\":801,\"main\":\"Clouds\",\"description\":\"few clouds\",\"icon\":\"02d\"}],\"base\":\"stations\",\"main\":{\"temp\":285.23,\"feels_like\":284.95,\"temp_min\":285.23,\"temp_max\":285.23,\"pressure\":1014,\"humidity\":94,\"sea_level\":1014,\"grnd_level\":997},\"visibility\":10000,\"wind\":{\"speed\":3.41,\"deg\":190,\"gust\":9.72},\"clouds\":{\"all\":18},\"dt\":1664661306,\"sys\":{\"country\":\"CN\",\"sunrise\":1664660711,\"sunset\":1664702853},\"timezone\":28800,\"id\":2036338,\"name\":\"Kaitong\",\"cod\":200})\n//})\n\napp.listen(port, () =&gt; {\n  console.log(`Example app listening on port ${port}`)\n})\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_compose/#1-server-and-client-in-the-same-docker-container","title":"1.  Server and client in the same Docker container","text":"Concept Diagram? S_d&amp;C_d.yml<pre><code>services:\n  server:\n    image: \"swiftlang/swift:nightly-focal\" #simpli_image\n    volumes:\n      - \"C:/CS561_WEEK8:/code\"\n    environment:\n      - USER=ytl_5 \n    command: bash -c \"apt-get update &amp;&amp; apt-get install -y nodejs &amp;&amp; node /code/myapp/app.js\"\n</code></pre> Bash<pre><code>#Host:\ndocker-compose run --rm --name myserver server\n\n#Docker:\ncurl localhost:3000/data/2.5/Weather\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_compose/#2-server-in-docker-container-client-on-host","title":"2.  Server in Docker container, client on host","text":"Concept Diagram? S_d&amp;C_h.yml<pre><code>services:\n  server:\n    image: \"swiftlang/swift:nightly-focal\" #simpli_image\n    volumes:\n      - \"C:/CS561_WEEK8:/code\"\n    environment:\n      - USER=ytl_5 \n    command: bash -c \"apt-get update &amp;&amp; apt-get install -y nodejs &amp;&amp; node /code/myapp/app.js\"\n    ports: \n      -\"3000:3000\"\n</code></pre> Bash<pre><code>#Host:\ndocker-compose run --rm --service-ports server\n\n#Host:\ncurl localhost:3000/data/2.5/Weather\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_compose/#3-server-on-host-client-in-docker-container","title":"3.  Server on host, client in Docker container","text":"Concept Diagram? S_h&amp;C_d.yml<pre><code>services:\n  client:\n    image: \"swiftlang/swift:nightly-focal\" #simpli_image\n    volumes:\n      - \"C:/CS561_WEEK8:/code\"\n    environment:\n      - USER=ytl_5 \n    command: bash -c \"apt-get update &amp;&amp; apt-get install -y nodejs &amp;&amp; node /code/myapp/app.js\"\n</code></pre> Bash<pre><code>#Host:\ndocker-compose run --rm client\n\n#Docker Container:\ncurl host.docker.internal:3000/data/2.5/weather\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_compose/#4-server-in-docker-container-client-in-another-docker-container","title":"4.  Server in Docker container, client in another Docker container","text":"Concept Diagram? S_d&amp;C_another_d.yml<pre><code>services:\n  server:\n    image: \"swiftlang/swift:nightly-focal\"\n    volumes:\n      - \"C:/CS561_WEEK8:/code\"\n    environment:\n      - USER=ytl_5 \n    command: bash -c \"apt-get update &amp;&amp; apt-get install -y nodejs &amp;&amp; node /code/myapp/app.js\"\n\n  client:\n    image: \"swiftlang/swift:nightly-focal\"\n    volumes:\n      - \"C:/CS561_WEEK8:/code\"\n      - USER=ytl_5 \n</code></pre> Bash<pre><code>#Host:\ndocker-compose run --rm --name myserver server\ndocker inspect myserver | grep IPAddress\ndocker-compose run --rm --name myclient client\ndocker inspect myclient | grep IPAddress\n\n#Docker Container:\ncurl &lt;server ip address&gt;:3000/data/2.5/weather\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Guidance/","title":"Basic guidance of docker container","text":"<p>Docker is a useful tool with CI and backend work. Especially there are some cases that we need to test code in different system. Let's take swift as an example. We make it works on Windows 10.</p>"},{"location":"2_Software_Engineering/Docker/Guidance/#step-1-install-docker-desktop","title":"Step 1. Install Docker Desktop","text":"<p>We can download  Docker Desktop from the website and install it on your Windows 10.</p>"},{"location":"2_Software_Engineering/Docker/Guidance/#step-2-run-docker-container","title":"Step 2. Run Docker Container","text":"<p>To run <code>Docker Container</code>, firstly you need to have a <code>Docker Image</code>. There are two ways to have an <code>Image</code>:</p> <ul> <li>Create an <code>Image</code> by using <code>dockerfile</code> (see in A good model for Docker Image initialization).</li> <li>Git clone an <code>Image</code> from Docker Hub.</li> </ul> <p>After you have the <code>Docker Image</code> as the system mirror settings, you can create a <code>Docker Container</code> as an realization of the system. There are two ways to create the <code>Docker Container</code>:</p> <ul> <li>Docker <code>run</code>.</li> <li>Docker <code>compose</code>.</li> </ul>"},{"location":"2_Software_Engineering/Docker/Guidance/docker_compose/","title":"Run container by using <code>docker compse</code>","text":""},{"location":"2_Software_Engineering/Docker/Guidance/docker_compose/#step-1-create-a-docker-composeyml-file","title":"Step 1. Create a <code>docker-compose.yml</code> file","text":"docker-compose.yml<pre><code>services:\n  dev:\n    image: \"swiftlang/swift:nightly-focal\" #Default setting package for your system\n    volumes:\n      - /Users/&lt;YOUR_DIC_TO_INSTALL_SWIFT&gt;/swift:/code\n    environment:\n      - USER=&lt;YOUR_NAME&gt;\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Guidance/docker_compose/#step-2-launch-the-dev-docker-service-created-in-step-2","title":"Step 2. Launch the <code>dev</code> Docker service created in Step 2","text":"<p>Turn on your Docker Desktop. Then run the code below. </p> <p>Once inside your docker container, <code>cd code</code>.  From <code>\\code</code> directory you can run the swift command.</p> Git Bash<pre><code>docker-compose run --rm dev\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Guidance/docker_run/","title":"Run container by using <code>docker run</code>","text":""},{"location":"2_Software_Engineering/Docker/Guidance/docker_run/#safely-running-docker-container","title":"Safely running Docker Container","text":"<p>Instead of running <code>docker run --rm dev</code> in the terminal, I suggest directly using Docker Desktop to run <code>docker image</code> that you cloned from the Docker Hub or the one created by yourself ( see in A good model for Docker Image initialization or in Confluence )</p> <p>If you close your terminal window that ran <code>docker run --rm dev</code>, it will somewhat <code>pause</code> your container then you can not re-<code>start</code> the docker container you created again because you have already closed your terminal process. (This case also equals to you <code>pause</code> your container in Docker Desktop, and you suddenly turn Docker Desktop off. If you reopen the Docker engine again and try to <code>start</code> the container, you are forbidden to do it. I struggled with this lots of times at the start.)</p> <p>Instead, I directly run the image I have in Docker Desktop. And once I want to stop my container (save all the installed files in it and run again in the future) and shut down my laptop, I directly click <code>stop</code> of the container and turn off the Docker Desktop engine for next time use. </p> <p></p> <p></p> <p></p> Danger <p>(It doesn't mean you cannot run the terminal anymore. After you run the container through the Docker Desktop engine, you can open any terminal to edit your container status. Just at this time. closing the terminal will not affect your container process.)</p>"},{"location":"2_Software_Engineering/Github/","title":"Git &amp;  Github","text":"<p>Version control is important especially when we are collaborating with others for a big project. <code>Git</code> is one of the tools for version control. <code>GitHub</code> is a cloud service for uploading and storing repos you edit locally.</p>"},{"location":"2_Software_Engineering/Github/#this-section-is-split-into-below-sections","title":"This section is split into below sections:","text":"<ol> <li> <p>Git theory for understanding Git essence (\ud83d\udcaf Highly recommend reading first before using the command line). </p> </li> <li> <p>Git commands for a start using Git commands.</p> </li> <li> <p>GitHub Action for CI.</p> </li> <li> <p>GitHub Semantics Versioning for a convention.</p> </li> </ol>"},{"location":"2_Software_Engineering/Github/action/","title":"GitHub Action","text":""},{"location":"2_Software_Engineering/Github/commands/","title":"Git Basic Commands","text":""},{"location":"2_Software_Engineering/Github/commands/#initialize-git-repo","title":"Initialize Git repo","text":"<p>Initialize the local repository by using: <code>git init</code></p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#check-status","title":"Check status","text":"<p>Create a README.md file:</p> <p> </p> <p>Check the status of the local repo by using: <code>git status</code> </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#add-changes","title":"Add changes","text":"<p>Add changes into the staging area by using: <code>git add .</code> or <code>git add *</code></p> <p> </p> <p>Recheck the <code>status</code>: </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#commit-to-the-local-repo","title":"Commit to the local repo","text":"<p><code>Commit</code> the new snapshot to the local repo:  <code>git commit -m \"&lt;mesage&gt;\"</code></p> <p> </p> <p>Recheck the <code>status</code>: </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#rename-branch-name","title":"Rename branch name","text":"<p>Rename the main branch named from <code>master</code> into <code>main</code> by using: <code>git branch -m master main</code></p> <p> </p> <p>Recheck the <code>status</code>: </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#create-a-branch-and-switch","title":"Create a branch and switch","text":"<p>Create a new branch by using: <code>git branch m_branch_1</code></p> <p> </p> <p>Then switch to the new branch: <code>git checkout m_branch_1</code></p> <p> </p> <p>Or you can do one step instead of the above to command lines: <code>git checkout -b m_branch_1</code></p> <p>Recheck the <code>status</code>: </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#merge-changes-into-main","title":"Merge changes into main","text":"<p>Edit the README.md file by: <code>vim README.md</code></p> <p> </p> <p>Commit the new branch: <code>git commit -a -m 'Added encourage sentence'</code></p> <p> </p> <p>Switch back to the main branch and merge the new branch into the main branch: <code>git merge m_branch_1</code></p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#check-the-commit-history","title":"Check the commit history","text":"<p>Take a look at git log: <code>git log</code></p> <p> </p> <p>Use graph selection in git log: <code>git log --graph --oneline --decorate --all</code></p> <p> </p> <p>More details: <code>git log --graph --abbrev-commit --decorate --date=relative --all</code></p> <p> </p> <p>In <code>Sourcetree</code>:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#rebase-branch","title":"Rebase branch","text":"<p>We rebase main branch into m_branch_2: <code>git rebase m_branch_2</code></p> <p> </p> <p>Check the folder in different branches:</p> <p> </p> Warning <p>Even though we rebase the main branch <code>onto</code> (or <code>on top of</code>) m_branch_2, since we cannot delete the main branch, there is NO DIFFERENCE WITH rebasing m_branch_2 onto the main branch:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#squash-and-merge","title":"Squash and merge","text":"<p>Look at the commit history below; we want to <code>squash</code> the last three commits on m_branch2 into one:</p> <p> </p> <p>We use this <code>rebase</code> command with interactive selection: <code>git rebase -i HEAD~3</code>; Do the edition as below:</p> Before After <p>Then it will automatically <code>commit</code>. You should add some commit messages:</p> Before After <p>After finishing <code>squash</code>, the terminal will return:</p> <p> </p> <p>The commit history will look like this:</p> <p> </p> <p>Finally, We <code>merge</code> the m_branch_2 into the main:</p> <p> </p> <p>Automatically <code>commit</code> and ask for a commit message:</p> <p> </p> <p>The commit history now looks like the below:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/sematicsversion/","title":"GitHub Semantics Versioning","text":""},{"location":"2_Software_Engineering/Github/sematicsversion/#demand-analysis","title":"Demand analysis","text":"<p>When we work as a team, we need to coordinate projects, or we also need to lower coordinate costs. Thus, we need to set some rules for it. <code>Semantics</code>Versioning` is widely used in GitHub version control.</p>"},{"location":"2_Software_Engineering/Github/sematicsversion/#semantics-versioning-20","title":"Semantics Versioning 2.0","text":"<p>\\({Major}.{Minor}.{Patch}\\)</p> Explainations MajorMinorPatch <p>\\(1.0.0 \\rightarrow 2.0.0\\)</p> <p>For: API changes or when code contains breaking changes of API.</p> <p>Example: </p> <ul> <li>Amy changed the function of the API. </li> </ul> Breaking Changes <ul> <li>False: add some features.</li> <li>True: remove, rename sth.</li> </ul> <p>\\(1.0.0 \\rightarrow 1.1.0\\)</p> <p>For: Change <code>function signature</code>, add new features, or add some functionallity. (no breaking change, no bug fix.)</p> <p>Example: </p> <ul> <li>Amy added new features to her function.</li> <li>Amy organized the signature of her function.</li> <li>Amy added some extra individual code to her function body.</li> </ul> <p>\\(1.0.0 \\rightarrow 1.0.1\\)</p> <p>For: Bug fix. (Should be cleared when the first two increase.)</p> <p>Example:</p> <ul> <li>Amy fixed a bug in her API function.</li> </ul>"},{"location":"2_Software_Engineering/Github/theory/","title":"Git Theory","text":"<p>When you are first using Git, you must feel confused about the questions shown below</p> Question <ul> <li>How does Git help us do version control?</li> <li>What is <code>commit</code> essentially?</li> <li>What is <code>branch</code> essentially?</li> <li>What is <code>diff</code> essentially?</li> <li>Does <code>committing</code> equal <code>patching</code>?</li> <li>What is <code>rebase</code> essentially?</li> </ul> <p>I hope this section can help you to understand Git behaviors deeply. </p>"},{"location":"2_Software_Engineering/Github/theory/#git-objects","title":"Git objects","text":"<p>Git repository is constructed by <code>Git objects</code>. Git references each object by using their <code>object ID</code> (OID for short). </p> Note <p><code>Git objects</code> has three types: <code>blob</code>, <code>tree</code>, and <code>commit</code>. They have below functions:</p> <ul> <li> <code>blob</code>  file contents </li> <li> <code>tree</code>  directory listings </li> <li> <code>commit</code>  snapshots</li> </ul> Commands and commit history that we will use <ul> <li> <p>The command that we can retrieve the <code>OID</code> of <code>Git objects</code>: <code>git rev-parse &lt;ref&gt;\u200b</code></p> <ul> <li> <p><code>&lt;ref&gt;</code> will be the parameters below: </p> <ul> <li><code>HEAD</code>: the currently checked-out branch's latest commit.</li> <li><code>HEAD^{tree}</code>: the root tree of the currently checked-out branch's latest commit.</li> <li><code>HEAD:&lt;file path&gt;</code>: the file content at the moment of the currently checked-out branch's latest commit.</li> </ul> </li> </ul> </li> <li> <p>The command that we decrypt the <code>OID</code> SHA-1 hash into plain-text files: <code>git rev-parse &lt;ref&gt;\u200b</code></p> </li> <li> <p>In the commit history, please focus on the commit hash:</p> <p> </p> </li> </ul>"},{"location":"2_Software_Engineering/Github/theory/#git-file-content-storage-blob","title":"Git file content storage: blob","text":"<p><code>blobs</code> contain file contents. </p> <p>Let's use the command lines: </p> <p> <code>git rev-parse HEAD:README.md</code> and <code>git cat-file -p &lt;OID&gt; | head -n 8</code></p> <p> </p> <p>The contents at <code>HEAD:README.md</code> matches the README.md file contents in the current working directory:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/theory/#git-directory-tree","title":"Git directory: tree","text":"<p>We should notice that <code>blobs</code> only contain file contents. However, <code>trees</code> record files' names and their directories. The concept can be seen in the graph as shown below:</p> <p> </p> <p>Let's use the command lines: </p> <p> <code>git rev-parse HEAD^{tree}</code> and <code>git cat-file -p &lt;OID&gt; | head -n 15</code></p> <p>As shown below, a <code>tree</code> is an ordered column list of: file modes, paired with object types, the OID, and path entries for the object at that path. </p> <p> </p> Reminding <p>The objects shown in the list are all <code>blobs</code>. But the objects can also be <code>trees</code>. When some objects in the tree are <code>trees</code>, they are <code>subdirectories</code>. </p> <p>Trees can point to other trees! \ud83d\ude0e</p>"},{"location":"2_Software_Engineering/Github/theory/#git-history-snapshot-commit","title":"Git history snapshot: commit","text":"<p>The <code>tree</code> itself doesn\u2019t know where it exists within the repository; that is the role of the objects pointing to the tree. The object role is the <code>commit</code>!</p> <p>To understand the <code>commit</code> more straightforward, firstly, let's use the command lines: </p> <p> <code>git rev-parse HEAD</code> and <code>git cat-file -p &lt;OID&gt;</code></p> <p> </p> <p>Combining the concept map below, each <code>commit</code> contains:</p> <ul> <li>A pointer to its root tree, representing the state of the working directory at that time.</li> <li>A list of parent commits corresponding to the previous snapshots (commits). A commit with no parents is a root commit, and a commit with multiple parents is a merge commit.</li> <li>Metadata describing the snapshot. Such as:<ul> <li>Author and committer's name, email address, and date</li> <li>A commit message. The commit message is an opportunity for the commit author to describe the purpose of that commit with respect to the parents.</li> </ul> </li> </ul> <p> </p> <p>All in all, we call <code>commit</code> a <code>snapshot</code> in time. Remember the commit history from <code>Sourcetree</code>. The <code>snapshot</code> is a \"slice\" of your local repo at some node point in time. <code>Snapshot</code> is to a repository, as a screenshot is to a video.</p>"},{"location":"2_Software_Engineering/Github/theory/#git-branch","title":"Git branch","text":"<p>In Git, we use <code>branches</code> as pointers to the commits to move around the Git history and make changes instead of directly referring to OIDs most of the time.</p> <p>In other words, the <code>branch file</code> contains the OID of a commit.</p> <p>Don't believe me? Let's see what is a <code>main branch</code> in the working directory: <code>.git/refs/heads</code>:</p> Directory Sourcetree <p>Familiar with the OID <code>0d49b6d5afa5762d5e8a261008b14f574bbc1f01</code>? Check the OID shown in the terminal of Git history snapshot: commit!</p> <p>Yes, right now <code>main branch</code> points to the same OID that <code>HEAD</code> points to:</p> <p> </p> <p> </p> Tip <p><code>Branches</code> are significantly different from <code>Git objects</code> we talked before:</p> <ul> <li><code>Commits</code>, <code>trees</code>, and <code>blobs</code> CANNOT change their contents once created (immutable).</li> <li> <p><code>Branches</code> can be moved to track a specific commit branch (like the \"<code>tail</code>\" of the <code>link list</code>). </p> <ul> <li>E.g: if we update the current branch by creating new commits, both <code>HEAD</code> and the branch <code>main</code> will update to point to that new commit!</li> </ul> </li> </ul>"},{"location":"2_Software_Engineering/Github/theory/#big-graph","title":"Big graph","text":"<p>From what we have learned from Git objects and Git branchs, we can treat the <code>local repo</code> as the objects diagram shown below:</p> <p> </p> Hierarchy <ul> <li> branches   commits</li> <li> commits \u00a0  other commits   their root trees</li> <li> trees \u2003\u2003  other trees   blobs</li> <li> blobs \u2003\u2002\u00a0  nothing. </li> </ul> Important conclusions <ul> <li>Time moves from left to right.</li> <li>Commit dependencies are from right to left.</li> <li>Each commit has a single root tree.</li> <li>Same blobs are reachable from multiple root trees. </li> <li>Since these trees reference trees and blobs by their OID, these snapshots DON'T need multiple copies. of the same data.</li> </ul>"},{"location":"2_Software_Engineering/Github/theory/#git-diff","title":"Git diff","text":"<p>So far, we know that Git stores series of <code>commits</code>. But why doesn't Git store data as a series of changesets or differences? In fact, sometimes the <code>commits</code> use the function of the <code>diff</code>, but not all the time.</p> <p>According to Derrick Stolee's favorite analogies, think of commits as having a wave/partical duality in physics, where sometimes they are treated like <code>snapshots</code> and other times they are treated like <code>diffs</code>. Simply, we can have following formula:</p> \\[ commits =  diffs \\cup snapshots \\] So, what is the <code>diff</code>? <p>The <code>diff</code> is dynamically generated from the snapshot data (blobs) by comparing the root trees of the commit and its parent. </p> <p>Git can compare ANY two snapshots in time, not just adjacent commits. The comparison starts with the root trees, which are always different. The Git performs a depth-first-search (DFS) on the subtrees by following pairs when paths for the current tree have different OIDs.</p> <p>Take the diagram as an example shown below:</p> <p> </p> Let's do DFS following pairs! <ul> <li> <p>The root trees have different values for the <code>docs</code>, so we recurse into those two trees. </p> <ul> <li> <p>Those trees have different values for <code>M.md</code>:</p> <ul> <li>so those two <code>blobs</code> are compared line-by-line;</li> <li>and that <code>diff</code> is shown. </li> </ul> </li> <li> <p>Still, within <code>docs</code>, <code>N.md</code> is the same, so that is skipped, and we pop back to the root tree.  </p> </li> </ul> </li> <li> <p>The root tree then sees that the things directories have equal OIDs as well as the <code>README.md</code> entries.</p> </li> </ul> <p>In the diagram above, we notice that the things tree is never visited, and so none of its reachable objects are visited. This way, the cost of computing a diff is relative to the number of paths with different content.</p> Notice!\u2003 commit, \u274c patch <p>With <code>commit</code>, parent information, including differences, has been stored. That's why Git does not choose the <code>patch</code> as the functional implementation. </p> <p><code>Patch</code> only implements the <code>diff</code> part but cannot traverse commit history. <code>Snapshots</code> record the commit history in time.</p>"},{"location":"2_Software_Engineering/Github/theory/#two-commands-implementing-diff","title":"Two commands implementing <code>diff</code>","text":""},{"location":"2_Software_Engineering/Github/theory/#git-cherry-pick","title":"git cherry-pick","text":"<ul> <li> <p>Brief description: A commit is accidentally made to the wrong branch. You can switch to the correct branch (now it is <code>HEAD</code> branch) and <code>cherry-pick</code> the commit to where it should belong in this <code>HEAD</code> branch.</p> </li> <li> <p>Technical details: The <code>git cherry-pick &lt;OID&gt;</code> command creates a new commit with an identical diff (arbitrary diff between two neighbor commits) to the new commit whose parent is the current commit. </p> </li> </ul> Steps of <code>cherry-pick</code>: <ol> <li>Compute the <code>diff</code> between the commit  and its parent.</li> <li>Apply that <code>diff</code> to the current HEAD.</li> <li>Create a new <code>commit</code> whose root tree matches the new working directory and whose parent is the commit at HEAD.</li> <li>Move the ref at <code>HEAD</code> to that new commit.</li> </ol> <p> </p> Important! <p>We didn\u2019t \u201cmove\u201d the commit to be on top of our current HEAD; We created a new commit whose diff matches the old commit.</p>"},{"location":"2_Software_Engineering/Github/theory/#git-rebase","title":"git rebase","text":"<p>The <code>git rebase</code> command in the most basic form is like a series of <code>git cherry-pick</code> commands, replaying <code>diffs</code> on top of a different commit.</p> Steps of <code>rebase</code>: <ol> <li> <p>In default, <code>git rebase &lt;target&gt;</code> will discover the list of commits that are reachable from <code>HEAD</code> but not reachable from <code>&lt;target&gt;</code>.</p> <ul> <li>[Example]: the common base P is computed to determine the commit list <code>A</code>, <code>B</code>, and <code>C</code>.</li> </ul> </li> <li> <p>Then, the <code>rebase</code> command navigates to the <code>&lt;target&gt;</code> location and performs <code>git cherry-pick</code> commands on this commit list, starting from the oldest commits.</p> <ul> <li>[Example]: then cherry-picked on top of the target to construct new commits in sequence: <code>A'</code>, <code>B'</code>, and <code>C'</code>.</li> </ul> </li> </ol> <p> </p> Important! <p>The commits <code>A'</code>, <code>B'</code>, and <code>C'</code> are brand new commits that share a lot of information with <code>A</code>, <code>B</code>, and <code>C</code>, but are distinct new objects (their OIDs are totally different). </p> <p>In fact, the old commits still exist in your repository until garbage collection runs.</p>"},{"location":"2_Software_Engineering/Github/theory/#git-add-and-git-commit","title":"git add and git commit","text":"<p>Known the basic theory of Git, let's go back to the two basic Git command: <code>git add</code> and <code>git commit</code>. The diagram shown below is the design of them two.</p> <p> </p>"},{"location":"2_Software_Engineering/Github/theory/#git-add","title":"git add","text":"What do <code>git add</code> do? <p><code>git add</code> create <code>blobs</code> for newly added files and append index for both creating and editing blob.</p> <p>Let's directly create a new file named <code>intro.txt</code> in the main branch and <code>git add .</code>:</p> <p> </p> <p> </p> <p>If we directly check the <code>index</code> file under <code>./.git</code>, it shows messy code. We use the command line to check what is in the index: <code>git ls-files --stage</code></p> <p> </p> <p>We can see; now an OID has been added to the index list for mapping <code>intro.txt</code>.</p> <p>Let's check the OID: <code>659096bbe255c5137a9020740d077a5071b13ff7</code> </p> <p> </p> <p>Oh yeah! It is the new file's content! </p> <p>Combining the knowledge in Git blob, you are 100% sure: The OID (or hash index/key) was appended in the <code>index folder</code> because we have also created a <code>blob</code> file when we do <code>git add</code>. </p> Explore OID: <code>659096bbe255c5137a9020740d077a5071b13ff7</code> <p>Let's check the folder: <code>./.git/objects</code>.</p> <p> </p> <p>REMEMBER: OID above is <code>65</code>+<code>9096bbe255c5137a9020740d077a5071b13ff7</code></p> <p>We select the folder named <code>65</code> since </p> <p> </p> <p>We see the file with the hash of the second part of the OID: <code>9096bbe255c5137a9020740d077a5071b13ff7</code></p> <p>In fact, we can directly use the first 7 digits of the OID to check the object's type and content:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/theory/#git-commit","title":"git commit","text":"What do <code>git commit</code> do? <p><code>git commit</code> based on the <code>blobs</code> in the local repo, furtherly create a new <code>commit</code> and it's root <code>tree</code> for them.</p> <p>Let's <code>git commit -m \"added intro.txt\"</code>:</p> <p> </p> <p>Go into the <code>./.git/objects</code> folder. We can see the two created folders:</p> <p> </p> <code>ce</code> <code>b9</code> <p>Now you are 100% sure: there is one object <code>tree</code> and another <code>commit</code>.</p> Explore folder <code>ce</code> and <code>b9</code> <p>By combining the contents in the fold file's hash, we can get two OIDs:</p> <ul> <li>OID1: <code>ce</code> + <code>bc14637e116de809cfb39fc6d021f5ba54d015</code> = <code>cebc14637e116de809cfb39fc6d021f5ba54d015</code></li> <li>OID2: <code>b9</code> + <code>56ad5fbafbfc0050d73a7289661ceb764f5a8f</code> = <code>b956ad5fbafbfc0050d73a7289661ceb764f5a8f</code></li> </ul> <p>As we concluded at the end of git add, we only use the first 7 digits and use <code>git cat-file -t &lt;OID&gt;</code> and <code>git cat-file -p  &lt;OID&gt;</code>:</p> <p> </p> <p>Yeah! <code>cebc146</code> is the <code>commit</code> object!</p> <p> </p> <p>Yeah! <code>b956ad5</code> is the <code>tree</code> object!</p> <p>Git functions looks easy but there are some concepts are confusing. I have spent a whole week figuring out what was going on in deep. Then I spent two days for the conclusion in this section. If you check this article in details, I believe, you will treat Git in different angle! \ud83c\udfd6\ufe0f\ud83c\udf7b</p> <p>Also don't forget to check if you can answer the questions at the start of this article. \ud83d\udcaf\ud83e\udd34</p>"},{"location":"2_Software_Engineering/Github/theory/#references","title":"References:","text":"<ul> <li>Commits are snapshots, not diffs</li> </ul>"},{"location":"2_Software_Engineering/Others/","title":"Others","text":"<p>Section with topics waiting for being classified.</p>"},{"location":"2_Software_Engineering/Others/Concurrency/","title":"Concurrency v.s. Parallelism","text":"<p>Look at the picture shown below (from Concurrency vs Parallelism) to understand the difference between concurrency and parallelism:</p> <p></p> Watchout! <p>Concurrent \u2190 Parallel</p> <ul> <li> <p>If a task is a <code>concurrent</code> task, it may or may not execute in <code>parallel</code>.</p> </li> <li> <p>If a task is a <code>parallel</code> task, it is definitely a <code>concurrent</code> task</p> </li> </ul>"},{"location":"2_Software_Engineering/Others/Concurrency/#references","title":"References:","text":"<ul> <li>Picture Resource 1</li> </ul>"},{"location":"2_Software_Engineering/Others/Lock_mutex_semaphore/","title":"Lock, Mutex, and Semaphore","text":""},{"location":"2_Software_Engineering/Others/Self_documenting_code/","title":"\ud83d\ude0e Self-documenting Code","text":""},{"location":"2_Software_Engineering/Others/Self_documenting_code/#about-the-topic","title":"About the topic","text":"<p>Let's look at the code case shown below:</p> Question <p>What does the code below for? question.c++<pre><code>float a, b, c; a=9.81; b=5; c= .5*a*(b^2);\n</code></pre></p> <p>Of course, it is hard to read and understand the code above. Let's see the <code>self-documenting</code> version of the last code block:</p> Self-documenting version improved_1.c++<pre><code>const float gravitationalForce = 9.81;\nfloat timeInSeconds = 5;\nfloat displacement = (1 / 2) * gravitationalForce * (timeInSeconds ^ 2);\n</code></pre> <p>Now, you can feel that <code>self-documenting</code> is a good code-writing habit for code understanding and development, even if we do not have comments. But! If your self-documenting is too complex, the variable name itself will cause code smell, which affects the readability of codes. So why not also add comments!</p> Self-documenting + Comment version improved_2.c++<pre><code>/* compute displacement with Newton's equation x = v\u2092t + \u00bdat\u00b2 */\nconst float gravitationalForce = 9.81;\nfloat timeInSeconds = 5;\nfloat displacement = (1 / 2) * gravitationalForce * (timeInSeconds ^ 2);\n</code></pre> <p>But do not add comments on each line:</p> Bad Comment example bad.c++<pre><code>const float a = 9.81; //gravitational force\nfloat b = 5; //time in seconds\nfloat c = (1/2)*a*(b^2) //multiply the time and gravity together to get displacement.\n</code></pre> <p>If your team requires <code>zero comments</code> coding style, transfer your code block with comments into <code>function closure</code>:</p> Self-documenting + Function closure version improved_3.c++<pre><code>float computeDisplacement(float timeInSeconds) {\nconst float gravitationalForce = 9.81;\nfloat displacement = (1 / 2) * gravitationalForce * (timeInSeconds ^ 2);\nreturn displacement;\n}\n</code></pre>"},{"location":"2_Software_Engineering/Others/Self_documenting_code/#self-documenting-in-swift","title":"Self-documenting in Swift","text":"<p>Let's see how to do self-documenting in <code>Swift</code>:</p> Question question.swift<pre><code>import Foundation\n\nfunc greet(_ s1: String, _ s2: String) -&gt; String {\n    return \"Hello \\(s1)!  Glad you could visit from \\(s2).\"\n}\n\nassert(greet(\"Will\", \"Portland\") == \"Hello Will!  Glad you could visit from Portland.\")\n</code></pre> Notice! <p>Swift restricts the <code>parameter name</code> before each argument input when we implement the function, i.e., you are not encouraged to run <code>greet(\"Bill\", \"Cupertino\")</code> unless you use <code>_</code> (Omitting Argument Labels) before <code>parameter name</code> in the <code>function signature</code>. This semantic diminishes ambiguities when compiler compiling.</p> <p>In Swift, each function parameter has both a <code>parameter name</code> and an <code>argument label</code>. </p> <ul> <li> <p>The <code>parameter name</code> is used in the implementation of the function (in <code>function signature</code>). </p> </li> <li> <p>The <code>argument label</code> is used when calling the function; each argument is written in the function call with its argument label before it (in <code>call site</code>). </p> </li> </ul> <p>So we do self-documenting firstly based on refining <code>parameter name</code>.</p> Self-documenting in Swift improved_1.swift<pre><code>import Foundation\n\nfunc greet(person: String, hometown: String) -&gt; String {\n    return \"Hello \\(person)!  Glad you could visit from \\(hometown).\"\n}\n\nassert(greet(person: \"Will\", hometown: \"Portland\") == \"Hello Will!  Glad you could visit from Portland.\")\n</code></pre> <p>You can observe that when implementing the function, <code>greet(person: \"Will\", hometown: \"Portland\")</code> still reads not like natural language. Let's add <code>argument label</code>!</p> Self-documenting in Swift + Argument label improved_1.swift<pre><code>import Foundation\n\nfunc greet(person: String, from hometown: String) -&gt; String {\n    return \"Hello \\(person)!  Glad you could visit from \\(hometown).\"\n}\n\nassert(greet(person: \"Will\", from: \"Portland\") == \"Hello Will!  Glad you could visit from Portland.\")\n</code></pre> <p>Thanks, the person who always visits us from Portland! </p>"},{"location":"2_Software_Engineering/Others/Self_documenting_code/#references","title":"References:","text":"<ul> <li> <p>What is self-documenting code and can it replace well documented code? [closed]</p> </li> <li> <p>Function Argument Labels and Parameter Names</p> </li> </ul>"},{"location":"2_Software_Engineering/Others/crypto/","title":"** \ud83e\uddba Cryptographic**","text":"<p>The transmission and storage of files need to be encrypted, otherwise the privacy of file content will be very easy to be disclosed. </p> <p>About file transmission, we have discussed in the section about OAuth 2.0. In this section, we are talking about the way to encrypt stored files.</p>"},{"location":"2_Software_Engineering/Others/crypto/#cryptographic-hash-function","title":"Cryptographic hash function","text":"<p>Yes, to store the file secretly, we can use <code>Cryptographic hash function</code> to generate <code>checksum</code>, which we have mentioned before in the command line sha1sum.</p> <p><code>Cryptographic hash function</code> should have below properties:</p> <ul> <li>Avalanche effect: Small changes to input should result in big changes to output, this property is called <code>Avalanche effect</code>.</li> <li>Deterministic: The same input always produces the same output.</li> <li>Non-invertible: (if you record the mapping table between plain text and hash value, it is another case.)</li> <li>Collection resistance: The algorithm should be <code>1 --&gt; mul</code>, or <code>1 --&gt; 1</code>. Should not be <code>mul --&gt; 1</code>.</li> </ul> <p>The picture below shows the property of <code>Cryptographic hash function</code>:</p> <p> </p>"},{"location":"2_Software_Engineering/Others/crypto/#hash-algorithms","title":"Hash Algorithms","text":"<p>There are three famous hash algorithms:</p> <ul> <li>SHA1: function which returns <code>160-bit (20-byte)</code> hash value. <code>commit ID</code> is forty hexadecimal characters that specify a 160-bit SHA-1 hash.</li> <li>SHA2: consists of six hash functions with digests (hash values) that are <code>224</code>, <code>256</code>, <code>384</code>, or <code>512</code> bits: <code>SHA-224</code>, <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, <code>SHA-512/224</code>, <code>SHA-512/256</code>.</li> <li>SHA3: Subset of the broader family of algorithms called <code>Keccak</code>. This algorithm won the hash function competition called NIST.</li> </ul>"},{"location":"2_Software_Engineering/Others/crypto/#hash-salt","title":"Hash salt","text":"<p>As you saw that <code>Cryptographic hash function</code> has <code>Non-invertible</code> and <code>Deterministic</code> properties. If we use the same hash, we definitely know that we are using the same file. As a hacker, it is easy for you to build a hash cheating table!</p> <p><code>Salt</code> is random data that is used as additional input to a one-way function that hashes data, a password or passphrase.</p> <p>Let's compare the <code>normal Hash</code> with <code>Hash added salt</code>.</p> Hash added salt: Username Salt value String to be hashed Hashed value = SHA256 (Password + Salt value) user1 D;%yL9TS:5PalS/d password123D;%yL9TS:5PalS/d 9C9B913EB1B6254F4737CE947EFD16F16E916F9D6EE5C1102A2002E48D4C88BD user2 )&lt;,-* password123)&lt;,-* 6058B4EB46BD6487298B59440EC8E70EAE482239FF2B4E7CA69950DFBD5532F2 normal Hash: Username String to be hashed Hashed value = SHA256 user1 password123 57DB1253B68B6802B59A969F750FA32B60CB5CC8A3CB19B87DAC28F541DC4E2A user2 password123 57DB1253B68B6802B59A969F750FA32B60CB5CC8A3CB19B87DAC28F541DC4E2A <p>It is obvious that; output with <code>Hash added salt</code> algorithm prevents the increase the <code>Non-invertible</code> property and diminishes <code>Deterministic</code> property.</p>"},{"location":"2_Software_Engineering/Others/crypto/#references","title":"References:","text":"<ul> <li> <p>SHA-1 wiki</p> </li> <li> <p>SHA-2 wiki</p> </li> <li> <p>SHA-3 wiki</p> </li> </ul>"},{"location":"2_Software_Engineering/Others/engineer/","title":"**  Engineer Principles**","text":""},{"location":"2_Software_Engineering/Others/engineer/#solid-princiles","title":"SOLID princiles","text":"<p>If we are doing <code>OOD</code> (Object-Oriented Design), we should follow the <code>SOLID</code> principles:</p> <p> </p> More resources for learning! <p>Check SOLID principles for OOP design to learn more in real cases.</p>"},{"location":"2_Software_Engineering/Others/engineer/#abstract-interface","title":"Abstract Interface","text":"<p>For the last one, <code>Dependency Inversion</code> principle, we can use the concept of <code>abstract interface</code> as an implementation.</p> <p> </p> Why do we care? <ol> <li>Decouple components -- loosely coupled</li> <li>Mock</li> <li>Unit test</li> <li>Develop in parallel</li> <li>Do user-centered design and iterate cheaper. Yeah, BFFs!</li> </ol>"},{"location":"2_Software_Engineering/Others/engineer/#rest-apis","title":"REST APIs","text":"<p>Check REST APIs.</p>"},{"location":"2_Software_Engineering/Others/engineer/#bffs","title":"BFFs","text":"<p><code>BFF</code>: Backend for Frontend. <code>Backend For Frontend</code> is a design pattern created with not only the developer but, more importantly, the user and their experience in mind. </p>"},{"location":"2_Software_Engineering/Others/engineer/#references","title":"References:","text":"<ul> <li>Picture Resource 1</li> </ul>"},{"location":"2_Software_Engineering/Swift/","title":"Swift","text":"<p>Although I am using Windows 10 and Linux, I never know when I will need to build projects for Mac OS. Time to learn!</p>"},{"location":"2_Software_Engineering/Swift/#this-sub-chapter-can-be-separated-into-two-sections","title":"This sub-chapter can be separated into two sections:","text":"<ol> <li> <p>Swift environment installation on Win10 for running Swift on Windows 10.</p> </li> <li> <p>Language Notes for the questions record my practice.</p> </li> </ol>"},{"location":"2_Software_Engineering/Swift/Notes/","title":"Notes for Swift learning","text":""},{"location":"2_Software_Engineering/Swift/Notes/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Dispatch queue and Dead lock</p> </li> <li> <p>Map, Filter and Reduce</p> </li> </ol>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/","title":"Dispatch queue and Dead lock","text":""},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#i-dispatch-queue-from-will-braynen","title":"I. Dispatch queue (from Will Braynen)","text":""},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#1-what","title":"1\ufe0f\u20e3 What?","text":"<ul> <li>A dispatch queue is an object-like structure that manages the tasks you submit to it. All dispatch queues are first-in, first-out (FIFO) data structures. Thus, the tasks you add to a queue are always started in the same order that they were added.\u201d (source: Apple documentation). That\u2019s important.</li> </ul>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#2-for","title":"2\ufe0f\u20e3 For?","text":"<ul> <li>Well, it\u2019s a way to run multi-threaded code without using threads directly. It\u2019s not as low level as working with threads. </li> </ul>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#3-diff-with-threads","title":"3\ufe0f\u20e3 Diff with threads?","text":"<ul> <li> <p>A dispatch queue can manage its own pool thread, etc, and ultimately the point of a dispatch queue is to keep track of what instruction to execute next while giving you a higher-level API instead of dealing with threads directly</p> </li> <li> <p>Whereas you can think of a thread as where instructions actually execute; for example, a thread might have <code>start</code>, <code>stop</code>, and <code>sleep</code> methods. A thread is short for a thread of execution and is the smallest sequence of programmed instructions that can be managed independently by a scheduler, which is typically [but not always] a part of the operating system\u201d (wikipedia).  </p> </li> </ul>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#ii-serial-queue-concurrent-queue-main-dispatch-queue-and-thread","title":"II. Serial queue, Concurrent queue, Main dispatch queue and Thread","text":""},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#-grammar-and-properties","title":"\ud83e\udd0f Grammar and Properties","text":"<ul> <li>The table below shows how to use the dispatch queue, and in what situation:</li> </ul> DQueue type Grammar Properties Serial queue <code>DispatchQueue(lablel:\"..\").sync/.async { \u2026 }</code> Private, conccurrent Concurrent queue <code>DispatchQueue(lablel:\"..\", attributes: .concurrent).sync/.async { \u2026 }</code> Global, parallel Main dispatch queue <code>DispatchQueue.main.sync { \u2026 }</code> Global, conccurrent"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#-dispatch-queue-vs-thread","title":"\ud83d\udc6f\u200d\u2640\ufe0f Dispatch Queue v.s. Thread","text":"<ul> <li>The table below concludes the relationship between:</li> </ul> D.Queue type / Thread Main thread Other thread Task Processing Type Serial queue <code>sync</code>: main thread  N/A N/A  <code>async</code>: multiple threads [serial] [concurrent] Concurrent queue N/A multiple threads [parallel] Main dispatch queue main thread N/A [serial] <ul> <li>Q&amp;A</li> </ul> If it is the first time your call <code>let myQueue = DispatchQueue(label:\"test queue\")</code> and <code>sync</code>, how many queues will app have for main thread? Which queue will tasks in <code>sync</code> code block be queuing? <p>Two. One is main queue. Another one is private queue created by <code>let myQueue = DispatchQueue(label:\"test queue\")</code>. Tasks in <code>sync</code> code block will be queuing in the new created private queue. You can also feel the answer from the figure in \"No dead lock case (serial queue with sync)\"</p> What <code>queue</code> will tasks in <code>sync</code> block be on? <p>When you call <code>let myQueue = DispatchQueue(label:\"test queue\")</code>, you will send the code in the block of <code>sync</code> to some other queue besides existing queue (such as main queue).</p> <p>No matter in serial, concurrent or parallel processing, you can always have multiple queues (* but not for threads).</p> What <code>thread</code> will tasks in <code>sync</code> block be on? <p>Remember: Context-switching between threads is expensive. Cheaper to stay on the same thread if you can.</p> <p>Anytime you call <code>sync</code>, even if you do not do <code>DispatchQueue.main.sync { \u2026 }</code>(to send the work to the main dispatch queue) and instead synchronously dispatch to some other queue, even a private queue you created, the task you submitted might still execute on the main thread.</p> What <code>queue</code> and <code>thread</code> will tasks in <code>DispatchQueue.main.sync { \u2026 }</code> block be on? <p>Main queue. Main thread.</p> Deadlock condition? <p><code>Same thread</code> &amp; <code>serial queue</code> &amp; <code>sync</code> ---&gt; deadlock.</p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#iii-dead-lock-in-dispatch-queue","title":"III. Dead lock in dispatch queue","text":"<p>To understand dead lock happends in dispatch queue processing, we firstly need to know what is the Concurrency.</p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#dead-lock-case-1-dispatch-queue","title":"Dead lock case 1 (dispatch queue)","text":"<p>Code</p> dl_1.swift<pre><code>import Foundation\n\nlet myQueue = DispatchQueue(label:\"test queue\")\n\nprint(\"1\")\n\nmyQueue.async{\n    print(\"2\")\n\n    myQueue.sync{\n        print(\"3\")\n    }\n\n    print(\"4\")\n}\n\nprint(\"5\")\n</code></pre> <p>Output</p> Text Only<pre><code>1\n5\n2\n</code></pre> <p>Explaination Picture</p> <p></p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#dead-lock-case-2-serial-queue","title":"Dead lock case 2 (serial queue)","text":"<p>Code</p> dl_2.swift<pre><code>import Foundation\n\nprint(\"1\")  \n\nDispatchQueue.main.sync{\n    print(\"2\")\n}\n\nprint(\"3\")\n</code></pre> <p>Output</p> Text Only<pre><code>1\n</code></pre> <p>Explaination Picture</p> <p></p> Be careful!! <p>Please DISTINGUISH the difference between <code>DispatchQueue.main.sync{...}</code> and <code>myQueue.sync{...}</code> by take a look at the case shown below </p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#no-dead-lock-case-serial-queue-with-sync","title":"No dead lock case (serial queue with <code>sync</code>)","text":"<p>Code</p> ndl.swift<pre><code>import Foundation\n\nlet myQueue = DispatchQueue(label:\"test queue\")\n\nprint(\"1\")\n\nmyQueue.sync{\n    print(\"2\")\n}\n\nprint(\"3\")\n</code></pre> <p>Output</p> Text Only<pre><code>1\n2\n3\n</code></pre> <p>Explaination Picture</p> <p></p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#application-of-dispatch-queue","title":"Application of Dispatch Queue","text":"<p>The example shown below indicates that we can use <code>Dispatch Queue</code> as a \"thread lock\" to protect the thread processing for a code block from interrupted by other thread.</p> application.swift<pre><code>import Foundation\n\n// Read-write pattern - using a serial dispatch queue\n\nprotocol DataProvider {\n    func getValue(_ key: String) -&gt; Int?\n    func updateValue(_ key: String, _ value: Int)\n}\n\nclass MockData: DataProvider {\n    func getValue(_ key: String) -&gt; Int? {\n        return 6\n    }\n\n    func updateValue(_ key: String, _ value: Int) {}\n}\n\n/// A thread-safe data provider\nclass Data: DataProvider {\n    // singleton pattern\n    static let shared = Data()\n    private init() {}\n\n    private var lookupTable: [String: Int] = [:]\n    // Dispatch queue lock for protecting read and write behaviors\n    private let lock = DispatchQueue(label: \"edu.oregonstate.data-provider-lock\")\n\n    // read\n    func getValue(_ key: String) -&gt; Int? {\n        lock.sync {\n            return lookupTable[key]\n        }\n    }\n\n    // write\n    func updateValue(_ key: String, _ value: Int) {\n        lock.async {\n            self.lookupTable[key] = value\n        }\n    }\n}\n\n// Thread 1 - reader\n\nif (Data.shared.getValue(\"a\") ?? 0) &lt; 5 {\n\n    // do important stuff\n}\n\n// Thread 2 - writer\n\nData.shared.updateValue(\"a\", 5)\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/","title":"Map, Filter and Reduce","text":"<p>Map-Filter-Reduce are well known as <code>Syntactic Sugar</code>, which is a term for syntax changes in computer programming which make it easier for humans to code. Also, it is a <code>Fan-in Fan-out</code> way to process multiple tasks.</p>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#grammar","title":"Grammar","text":"Text Only<pre><code>map(function(type1 -&gt; type1))\n</code></pre> Text Only<pre><code>filter (function(type1 -&gt; bool))\n</code></pre> Text Only<pre><code>reduce(init_val(type3), function(type1, type 2-&gt; type3))\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way1-function","title":"Way1: Function","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#example","title":"Example","text":"<p>Steven Luscher on Twitter</p>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#code","title":"Code","text":"way1.swift<pre><code>import Foundation\n\nfunc cook(food: String) -&gt; String {\n    var transformedFood = \"\"\n\n    switch food {\n        case \"\ud83c\udf3d\": \n            transformedFood = \"\ud83c\udf7f\" \n            print(1)\n        case \"\ud83d\udc2e\": \n            transformedFood = \"\ud83c\udf54\"\n            print(2)\n        case \"\ud83d\udc14\": \n            transformedFood = \"\ud83c\udf73\"\n            print(3)\n    default: transformedFood = food // remains uncooked\n    }\n\n    return transformedFood\n}\n\nfunc eat(food1: String, food2: String) -&gt; String {\n    var transformedFood = \"\ud83d\udca9\"\n    return transformedFood\n}\n\nfunc isVegetarian(dish: String) -&gt; Bool {\n    return dish==\"\ud83c\udf73\"\n}\n\n//Map\nlet meals = [\"\ud83c\udf3d\", \"\ud83d\udc2e\", \"\ud83d\udc14\"].map(cook)\n//Filter\nlet filtered_meals = meals.filter(isVegetarian)\n//Reduce\nlet result = filtered_meals.reduce(\"\",eat)\n//Print\nprint(meals)\nprint(filtered_meals)\nprint(result)\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#result","title":"Result","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way2-closure","title":"Way2: Closure","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#example_1","title":"Example","text":"<p>Realize the assert shown below with closure:</p> Q2.swift<pre><code>for _ in 0...5 {\n    let foodNames = [\"\ud83c\udf54\": \"hamburger\", \"\ud83c\udf5f\": \"french fries\", \"\ud83c\udf3d\": \"popcorn\"]\n\n    var outcome = foodNames.map({...}).filter({}).reduce(...,{...})\n    outcome.removeFirst()\n\n    assert(\n        outcome == \"Hamburger Popcorn\" ||\n        outcome == \"Popcorn Hamburger\" \n    )\n}\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#code_1","title":"Code","text":"way2.swift<pre><code>import Foundation\n\nfor _ in 0...5 {\n    let foodNames = [\"\ud83c\udf54\": \"hamburger\", \"\ud83c\udf5f\": \"french fries\", \"\ud83c\udf3d\": \"popcorn\"]\n\n    //Map\n    var mapped = foodNames.map({(key,value) -&gt; String in return value.capitalized})\n    //Filter\n    var filterred = mapped.filter({(food:String) -&gt; Bool in return !(food == \"French Fries\")})\n    //Reduce\n    var reduced = filterred.reduce(\"\",{a, b in a +  \" \" + b})\n\n    reduced.removeFirst()\n    var outcome = reduced\n\n    assert(\n        outcome == \"Hamburger Popcorn\" ||\n        outcome == \"Popcorn Hamburger\" \n    )\n}\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#result_1","title":"Result","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way3-using-the-built-in-operator","title":"Way3: Using the built-in operator","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#example_2","title":"Example","text":"<p>Realize the assert shown below with built-in operator:</p> Q3.swift<pre><code>let outcome = [2, 3, 5, 8].map({...}).filter({...}).reduce(...,...)\n\nassert(outcome == 108)\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#code_2","title":"Code","text":"way3.swift<pre><code>import Foundation\n\nlet outcome = [2, 3, 5, 8].map( {$0 + 1} ).filter( {$0 != 5} ).reduce(1, *)\n\nassert(outcome == 108)\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#result_2","title":"Result","text":""},{"location":"2_Software_Engineering/Swift/Swift_on_win10/","title":"Swift on Windows 10","text":""},{"location":"2_Software_Engineering/Swift/Swift_on_win10/#there-are-two-sections-in-this-chapter","title":"There are two sections in this chapter:","text":"<ol> <li> <p>TL;DR.</p> </li> <li> <p>VS Code-Docker for editing Swift on Win10.</p> </li> </ol>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/TL_DR/","title":"TL;DR","text":"<p>VS Code + Docker. Especially useful on Windows, but can be handy on MacOS too. For a step-by-step guide, see VS Code-Docker for editing Swift on Win10 .</p> <p>Here is Tianle Yuan\u2019s own summary from Slack.</p> <ol> <li> <p>Install the extensions of the swift, docker, and dev containers in vs code.</p> </li> <li> <p>run docker</p> </li> <li> <p>run vs code and click the docker logo on the left sidebar.</p> </li> <li> <p>run the image in vscode terminal and open the swift image in the container as u did in the docker desktop</p> </li> </ol> <p></p> <p>For testing ur swift code:</p> <ol> <li> <p><code>ctrl</code>\u00a0+\u00a0<code>shift</code>\u00a0+\u00a0<code>p</code></p> </li> <li> <p>in command window at the top, enter: docker containers: attach shell</p> </li> <li> <p>swift test in your terminal</p> </li> </ol> <p></p> <p>For example:</p> <p></p> <p>Moreover, you can even get the following instead, which looks more like what you get in Xcode:</p> <p></p> <p>See VS Code - Docker for a nice Swift edition on Windows10 for more details.</p>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/","title":"VS Code-Docker for editing Swift on Win10","text":"<p>As a student who is also confused about using Swift on Windows10, I can understand how hard you are if you cannot afford a Macbook . Let's get started and prove that we can do the same thing as a Windows pioneer!</p> <p>There are several steps here for you to reach a slightly friendly interface:</p> <ol> <li> <p>Software preparation.</p> </li> <li> <p>Set up Swift image on your local machine.</p> </li> <li> <p>Use Docker Container in your VS Code.</p> </li> <li> <p>Edit Swift code and do testing. [Not enough syntax highlighting and no autocomplete]</p> </li> <li> <p>An updated way to do Swift code editing and testing. [syntax highlighting and autocomplete]</p> </li> </ol> Text Only<pre><code>Please feel free to extend the content of the page. Window10 students need your contributions! \ud83e\udde0\ud83e\udde0\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#1-software-preparation","title":"1. Software Preparation","text":"<p>By default, make sure your system has already been installed:</p> <p>(1) Git Bash (https://git-scm.com/downloads); This requirement is optional. Since this course requires you to use the <code>git</code> command, Git Bash is the incident software for installing git on windows. You can also use your cmd or PowerShell.</p> <p>(2) VScode (https://code.visualstudio.com/Download).</p> <p>Then download and install:</p> <p>(3) Swift (https://www.swift.org/download/<code>Windows10 x86_ 64</code>). This step will help you automatically set up a <code>swift</code> command in your terminal.</p> <p>(4) Docker desktop (https://docs.docker.com/desktop/install/windows-install/).</p>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#2-set-up-swift-image-on-your-local-machine","title":"2. Set up Swift image on your local machine","text":"<p>After installing Swift and Docker desktop, you create a swift image described in Docker. Text Only<pre><code>### Try it now :point_down:\n\nIn your hw folder, run the following:\n\n`cd MyLibrary/`  \n`swift package init -- type library`  \n`cd ..`  \n`docker-compose run --rm dev`\n</code></pre> You probably will see the picture shown below:</p> <p> </p> <p>Text Only<pre><code>At this moment, you are running an image in Docker.\n</code></pre> Let\u2019s check your Docker desktop and click the item that is running:</p> <p> </p> <p> </p> Text Only<pre><code>#### Try it now (Optional) :point_down:\n\nLet\u2019s decorate the bad terminal interface! Here we will use \u201coh-my-zsh\u201c.\n\nFollow the steps:\n\n`apt update`  \n`apt install zsh`  \n`apt install curl`  \n`apt install vim`  \n`sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"`\n\nThen go to edit the format plug-in in the `.zshrc` file:\n\n`cd ~`  \n`vim .zshrc`\n\nThen change `ZSH_THEME=\"agnoster\"`.\n\nRestart your terminal in Docker and run `zsh`\n</code></pre> <p>Text Only<pre><code>A better way is do as shown in [A good model of Docker Image](https://oregonstate-innovationlab.atlassian.net/wiki/spaces/CS561/pages/74350864/A+good+model+of+Docker+Image) , so you do not have to set the environment everytime!\n</code></pre> After the decoration, you will see the terminal as shown below:</p> <p> </p> <p>Text Only<pre><code>This beautiful terminal highlight will also be seen in the VS Code terminal later. :thumbsup:\n</code></pre> 3. Use Docker Container in your VS Code</p> <p>To make VS Code your swift code editor, install the extensions: <code>swift</code>, <code>Docker</code>, and <code>dev containers</code>.</p> <p> </p> <p> </p> <p>Text Only<pre><code>#### Try it now :point_down:\n</code></pre> 1.  Now you run your docker desktop;</p> <ol> <li> <p>Go back to VS Code and click the docker logo on the left sidebar:</p> <p><p> </p></p> </li> <li> <p>Make sure your local terminal is running <code>docker-compose run --rm dev</code>. Run the image in the VS Code terminal and also open the swift image in your terminal by:     (a) <code>ctrl</code> + <code>shift</code> + <code>p</code>     (b) in the command window at the top, enter: <code>Docker Containers: Attach Shell</code></p> <p><p> </p></p> <p>\u00a9 <code>zsh</code>:</p> <p><p> </p> Text Only<pre><code>You see! The terminal shows the same beautiful highlighting as we saw in the docker desktop terminal. :thumbsup:\n</code></pre> 4. Edit Swift code and do testing</p> </li> </ol> <p>Finally, let\u2019s see how I use the VS Code to edit Swift codes.</p> <p>Firstly, <code>git fork</code> the code from the repo (https://github.com/oregon-state-innovation-lab/cs561-swift ).</p> <p> </p> <p>Then <code>git clone</code> the forked folder into your code folder in the terminal:</p> <p> </p> <p> </p> <p>Checkout to <code>async-await</code> branch:</p> <p> </p> <p> </p> <p>Open swift files by clicking the content on the left side directory:</p> <p> </p> <p>Text Only<pre><code>#### Try it now :point_down:\n</code></pre> Let\u2019s do the testing of the test folder:</p> <p> </p> <p>Check the code coverage <code>llvm-cov report ...</code>:</p> <p> </p>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#5-an-updated-way-to-do-swift-code-editing-and-testing","title":"5. An updated way to do Swift code editing and testing","text":"<p>I think you have found that using the extension in the Docker logo can not help us realize the full function of syntax highlighting and there is no autocomplete. Here I provide a way to furtherly realize the function of editing Swift code on VS Code.</p> <p> </p> <p>Rather than using the extension of the whale (squared by red), we are going to use the remote extension (squared by green) as shown above.</p> <p>Choose the <code>Containers</code> in the remote explorer:</p> <p> </p> <p>Right-click the <code>image</code> that is running and chooses <code>Attach in New Window</code>:</p> <p> </p> <p>In the new window, <code>\ud83d\udcc2 Open Folders</code> in the parent directory <code>/</code> (not the <code>/root</code>), then <code>Enter</code> using your keyboard.</p> <p> </p> <p>Now you can see your files:</p> <p> </p> <p>We still cannot see the full highlight. Let\u2019s open the extension window in the remote interface. Click the <code>Install in Container swiftlang/swift-nightly-focal (.....)</code> button and install it in your container:</p> <p> </p> <p> </p> <p> </p> <p>Now you can see the variables that can show up in the extension. Also, click the <code>Conical flask</code> extension and run the Test codes:</p> <p> </p> <p>Here is the result (with variable detection, definition tracking, autocomplete, and testing):</p> <p> </p> <p> </p> <p>Nice nice!!!! There are no differences between Windows VS Code and macOS Xcode now!! Bazinga </p> <p> Now you're a pro in Windows 10 swift programming\u2026 Feel free to add more cool stuff here!</p> <p>Tianle Yuan \u2013 10/14/2022</p>"},{"location":"2_Software_Engineering/Terminal/","title":"Bash Commands","text":""},{"location":"2_Software_Engineering/Terminal/#-table-of-concepts","title":"**  Table of Concepts:**","text":"<ol> <li> <p>ls.</p> </li> <li> <p>cd.</p> </li> <li> <p>pwd.</p> </li> <li> <p>grep.</p> </li> <li> <p>chmod.</p> </li> <li> <p>find.</p> </li> <li> <p>history.</p> </li> <li> <p>Pip (|).</p> </li> <li> <p>Output Redirect (&gt;).</p> </li> <li> <p>cat.</p> </li> <li> <p>man.</p> </li> <li> <p>more, less, most.</p> </li> <li> <p>alias.</p> </li> <li> <p>unalias.</p> </li> <li> <p>echo.</p> </li> <li> <p>which.</p> </li> <li> <p>PATH.</p> </li> <li> <p>ln.</p> </li> <li> <p>Background Processing (&amp;).</p> </li> <li> <p>code.</p> </li> <li> <p>.bash_profile vs .bashrc.</p> </li> <li> <p>Shebang (#!).</p> </li> <li> <p>sha1sum.</p> </li> </ol>"},{"location":"2_Software_Engineering/Terminal/contents/","title":"Bash Commands","text":"<p>Use this sheet to test yourself! Click the box for unfolding. </p>"},{"location":"2_Software_Engineering/Terminal/contents/#ls","title":"ls","text":"<code>ls</code> <p>Check the components in the current directory.</p> <p> </p> <code>ls -a</code> <p>Check the components in the current directory; with hidden components.</p> <p> </p> <code>ls -l</code> <p>Check the components in the current directory; with detailed information. The authority meaning of the first column:</p> <p> [dicrectory][Owner][Group][Other]</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#cd","title":"cd","text":"<code>cd</code> <p>(default) Go back to the <code>root</code> home directory of the current user.</p> <p> </p> <code>cd ~</code> <p>Go to the <code>root</code> home directory of the current user.</p> <p> </p> <code>cd /</code> <p>Takes you back to the root directory of the current drive. </p> <code>cd .</code> <p>Go to the <code>present working</code> directory.  </p> <p> </p> <code>cd ..</code> <p>Go to the <code>parent</code> directory.  </p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#pwd","title":"pwd","text":"<code>pwd</code> <p>Present working directory.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#grep","title":"grep","text":"<code>grep</code> <p>Search a <code>string</code> in a <code>given file</code>.</p> <p> </p> <code>grep -i</code> <p>Search a <code>string</code> in the <code>file</code> directory, with case-insensitive. The output will mix both <code>up &amp; low -case</code> results.</p> <p>The case below will search: <code>What</code>, <code>WhaT</code>, <code>wHAt</code>, <code>wHat</code>, .etc.</p> <p> </p> <code>grep -r</code> <p>Search a <code>string</code> from all files in the <code>current directory</code> (or in a <code>given file</code> if send the parameter) and in all of its <code>subdirectories</code>.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#chmod","title":"chmod","text":"<code>chmod</code> <p>Set <code>authority</code> for the given file. </p> <p>Note that: there are two ways to use chmod.  For example, <code>chmod 644 &lt;filename&gt;</code> and <code>chmod u+rw &lt;filename&gt;</code></p> <p> </p> Digit cheating sheetAlphabet cheating sheet Person user group other Decimal 6 4 4 Binary 110 100 100 Meaning rwx rwx rwx <p>[Person][Verb][Behavior]</p> Person u g o Meaning user group other Verb + - Meaning add remove Behavior r w x Meaning read write excute"},{"location":"2_Software_Engineering/Terminal/contents/#find","title":"find","text":"<code>find . -name &lt;filename&gt;</code> <p>Find <code>file</code> with the given <code>name</code> in the <code>current directory</code>.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#history","title":"history","text":"<code>history</code> <p>Check command <code>using history</code>.</p> <p> </p> <p></p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#pip-","title":"Pip (|)","text":"<code>|</code> -- pip operator <p>Combine two or more commands.</p> <p>e.g. I want to use <code>history</code> and <code>grep ls</code> in sequence. I use <code>history | grep ls</code></p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#output-redirect-","title":"Output Redirect (&gt;)","text":"<code>&gt;</code> -- output redirection operator <p>Redirect the contents of a command/file to another by <code>overwriting</code> it.</p> <p>e.g. </p> <p>I want to save the output of <code>history | grep ls</code> in the file <code>output.log</code>. I use <code>history | grep ls &gt; output.log</code>.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#cat","title":"cat","text":"<code>cat</code> <p><code>Print</code> the content of a <code>file</code> onto the standard output stream.</p> Cat outputVim editor comparison <p> </p> <p> </p> <p><code>cat</code> is primarily used for displaying the entire contents of one or more text files in the terminal.</p> <p><code>less</code> is a pager utility designed for viewing and navigating through large text files or long outputs that don't fit on a single screen.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#man","title":"man","text":"<code>man</code> <p>The function of <code>man</code> is like <code>--help</code>(in GitBash). It shows the <code>manual pages</code> for a command.</p> <p>e.g. I want to check <code>less</code> command using manu:</p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#more-less-most","title":"more, less, most","text":"<code>more, less, most</code> <p>The three commands are used to view the text files in the command prompt, displaying one screen at a time in case the file is large (For example log files). </p> <code>more</code><code>less</code><code>most</code> <ul> <li>Support <code>forward navigation</code> and <code>limited backward navigation</code>.</li> </ul> <ul> <li>Support both <code>forward navigation</code> and <code>backward navigation</code>.</li> <li>Has <code>search</code> options. </li> <li>Can go to the <code>beginning</code> and the <code>end</code> of a file instantly. </li> <li>Can switch to an <code>editor</code> (like opening the file in <code>vi</code> or <code>vim</code>). </li> </ul> <p><code>Arrow keys</code>: Scroll up and down.</p> <p><code>/</code>: Start a forward search.</p> <p><code>?</code>: Start a backward search.</p> <p><code>n</code>: Move to the next search result.</p> <p><code>N</code>: Move to the previous search result.</p> <p><code>q</code>: Quit the less viewer.</p> <p>It is noticeably quicker than editor when the file is large.</p> <ul> <li>Has <code>all</code> the features of <code>more</code> and <code>less</code>.</li> <li>Can also open <code>multiple files</code>, close 1 file at a time when you have multiple files open.</li> <li>Allows <code>locking</code> and <code>scrolling</code> of the open windows.</li> <li>Allows for <code>splitting</code> of open windows.</li> </ul>"},{"location":"2_Software_Engineering/Terminal/contents/#alias","title":"alias","text":"<code>alias</code> <p>Create a <code>shortcut</code> that references a command.</p> <p>e.g. Create a shortcut for <code>ls -la</code> as <code>ll</code>: <code>alias ll=\"ls -la\"</code></p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#unalias","title":"unalias","text":"<code>unalias</code> <p>Remove <code>alias</code>.</p> Note <p><code>unalias</code> not only remove the <code>alias</code> from the current session but also remove them permanently from <code>shell's configuration file</code>.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#echo","title":"echo","text":"<code>echo</code> <p>A built-in Linux feature that prints out arguments as the <code>standard output</code>. Example see in PATH.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#which","title":"which","text":"<code>which</code> <p>Use to identify the <code>location</code> of <code>executables</code>.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#path","title":"PATH","text":"<code>PATH</code> display <p>By using <code>echo $PATH</code>.</p> <p> </p> <code>PATH</code> edit <p>Q: How to make scripts execute from the present working directory without having to type a <code>./</code> before the script's name (e.g. <code>hello</code> instead of <code>./hello</code>)?</p> <p>A: <code>./</code> executes files that are not in <code>${PATH}</code>, \u201c.\u201d means it directly execute file in the current directory. Thus, we need to add hello\u2019s absolute directory in <code>${PATH}</code>, such as:</p> <p><code>PATH DEFAULT=${PATH}:/path/to/hello</code></p>"},{"location":"2_Software_Engineering/Terminal/contents/#ln","title":"ln","text":"<code>ln -s</code> <p>Create a <code>soft link</code> for an existing file. </p> <p>Grammar: <code>ln -s &lt;a: original file&gt; &lt;b: soft link file&gt;</code></p> <p></p> <p>We can use <code>rm -rf &lt;b&gt;</code> to delete the soft link.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#background-processing-","title":"Background Processing (&amp;)","text":"<code>&amp;</code> <p>For example, launching Node.js using <code>node app.js &amp;</code> vs. <code>node app.js</code></p> <p>Use the <code>background process</code> can help to keep the process running without terminal effects. However, a <code>foreground process</code> will be killed when we close the terminal.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#code","title":"code","text":"<code>code</code> <p>Open <code>VS Code</code> to edit some file.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#source","title":"source","text":"<code>source</code> <p><code>source</code> is used to read and execute the content of a file (generally a set of commands) right now instead of relaunching the shell. Those commands are passed as an argument in the current shell script.</p> <p>Let's create a <code>.bash_profile</code> in the <code>root</code> directory:</p> <p> </p> <p>Then execute the file:</p> <p> </p> <p>Oh no! All the dependencies have gone!  </p> <p>\ud83d\ude06 Do not worry about it. Remove the code in <code>.bash_profile</code> and relaunch your shell. Then your shell will be brand new! (The theory see in next topic .bash_profile vs .bashrc).</p> <p>There is another way to fix the problem: change <code>export PATH=.:</code> into <code>export PATH=.:$PATH</code>.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#bash_profile-vs-bashrc","title":".bash_profile vs .bashrc","text":"<code>.bash_profile</code> v.s. <code>.bashrc</code> <p>When invoked, <code>Bash</code> reads and excutes commands from a set of startup files, which is read depending on whether <code>shell (command explainer)</code> is invoked as [interactive/non-interactive] or [login/non-login] shell.</p> Shell type interactive non-interactive login non-login Example terminal (shell read, write) non-terminal (execute a script) remotely (via ssh) locally <code>.bash_profile</code><code>.bashrc</code> <p>For: Interactive log-in shell.</p> <p>For: Interactive non-login shell.</p> Note! <p>The components you write in <code>.bash_profile</code> and <code>.bashrc</code> is just appending more works to the current default shell settings. It is not overlapping.</p> <p>E.g. situations </p> <ul> <li>If you create an empty <code>.bash_profile</code> and execute (use <code>source</code>) immediately, it will make any changes to your shell's setting. </li> <li>If you make any changes in <code>.bash_profile</code> and execute it immediately, it will implement the changes in your shell. However, if you delete the code in <code>.bash_profile</code> for the changes and restart shell, the shell will run as the original default.</li> </ul>"},{"location":"2_Software_Engineering/Terminal/contents/#shebang-","title":"Shebang (#!)","text":"<code>#!</code> <p><code>Bash</code> commands can be used not only in command lines but also in scripts. The head of <code>Bash script</code> should mention using Bash shell with <code>#!</code>.</p> <p>e.g: With <code>#!/bin/bash</code>, generate SHA hash for <code>[A-Za-z0-9]</code>: (More bashscript learning)</p> <p></p> How to run a bash script? <p>There are two ways to run a bash script:</p> <ol> <li> <p>Use <code>source</code>. Source it immediately!</p> </li> <li> <p>Make it executable with <code>chmod 7xx &lt;script_name&gt;</code>. Then run it in any way below. Let's assume the script is named <code>Donow</code>:</p> <ul> <li>Add script path into <code>PATH</code>. Then Run it with script name. e.g.: <code>$ Donow</code></li> <li>Run relative path. e.g.: <code>$ ./Donow</code></li> <li>Run absolute path. e.g.: <code>$ &lt;Path_from_root&gt;/Donow</code></li> </ul> </li> </ol>"},{"location":"2_Software_Engineering/Terminal/contents/#sha1sum","title":"sha1sum","text":"<code>sha1sum</code> <p><code>sha1sum</code> is a cryptographic hash function. The algorithm transfer data into <code>Checksum</code>, which is convenient for confirming if your copy is the same as the original one.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#folder","title":"folder","text":"<code>mkdir</code> <p>Create folder:</p> <p></p> <code>cp</code> <ul> <li> <p>To copy a file to another location: <code>cp &lt;sourcefile&gt; &lt;destination&gt;</code></p> <p>e.g. cp myfile.txt /path/to/destination/</p> </li> <li> <p>To copy a folder and its contents recursively: <code>cp -r &lt;sourcefolder&gt; &lt;destination&gt;</code></p> <p>e.g. cp -r myfolder/ /path/to/destination/</p> </li> </ul> <code>mv</code> <ul> <li> <p>To move(cut) a file to another location: <code>cp &lt;sourcefile&gt; &lt;destination&gt;</code></p> <p>e.g. mv myfile.txt /path/to/destination/</p> </li> <li> <p>To move(cut) a folder and its contents recursively: <code>cp &lt;sourcefolder&gt; &lt;destination&gt;</code></p> <p>e.g. mv myfolder/ /path/to/destination/</p> </li> </ul> <code>rmdir</code> <p>Clear folder; <code>rmdir</code> only works on empty directories. If a directory contains files or subdirectories, <code>rmdir</code> will not remove it and will display an error message.</p> <p></p> <code>rm -rf</code> <p><code>rm -rf</code> is used for forcefully and recursively removing directories and their contents, including non-empty directories.</p> <ul> <li><code>-f</code> force; delete without informing and ignore unexistant files/para.</li> <li><code>r</code> recursive; recursivly delete the directory and its contents.</li> </ul> <p></p> <code>du -h</code> <p>Used to display the size of a directory or file.</p> <ul> <li><code>-h</code> human-readable; In units K, M, G, improve the readability of information.</li> </ul> <p></p>"},{"location":"2_Software_Engineering/Terminal/contents/#disk","title":"disk","text":"<code>df -T -h</code> <p>Disk free (<code>df</code>); Check disk space usage:</p> <p><code>-T:</code> This option is used to display the file system type for each file system.   <code>-h</code>: This option is used to display sizes in a human-readable format (e.g., in gigabytes, megabytes, etc.) rather than in raw blocks.</p> <p></p> <code>fdisk -l</code> <p>Fixed disk (<code>fdisk</code>); List disk partitions:</p> <p><code>-l</code>: This option stands for \"list\" and is used to list the partition table for all available storage devices.</p> <p></p> <code>mount</code> <p>Mount Disk Partitions:</p> <p>Grammar: <code>mount -t &lt;filesystem_type&gt; &lt;device&gt; &lt;mount_point&gt;</code></p> <p><code>&lt;device&gt;</code>: This should be replaced with the device or partition you want to mount. It can be specified as a device file, such as /dev/sda1, or a UUID (Universally Unique Identifier) for the device.</p> <p><code>&lt;mount_point&gt;</code>: This should be replaced with the directory where you want to mount the file system. This directory should already exist. For example, if you want to mount the file system on a directory called /mnt/mydata, you would replace  with /mnt/mydata.</p> <ul> <li> <p>Mount an ISO9660 file system (e.g., for CD/DVD):</p> <p><code>mount -t iso9660 &lt;device&gt; &lt;mount_point&gt;</code></p> </li> <li> <p>Mount a VFAT (FAT32) file system:</p> <p><code>mount -t vfat &lt;device&gt; &lt;mount_point&gt;</code></p> </li> <li> <p>Mount a ext4 file system:</p> <p><code>mount -t ext4 &lt;device&gt; &lt;mount_point&gt;</code></p> </li> </ul> <code>umount</code> <p>Unmount a specific device (replace  with the actual category):</p> <ul> <li><code>umount &lt;mount_point&gt;</code></li> </ul> <p>Unmount all mounted filesystems:</p> <ul> <li><code>umount -a</code></li> </ul>"},{"location":"2_Software_Engineering/Terminal/contents/#zip","title":"ZIP","text":"Compress <ol> <li> <p>Compress a file or directory into a <code>.tar.gz</code> file:</p> <p><code>tar -czvf archive.tar.gz file1 file2 ...</code></p> </li> <li> <p>Compress a file or directory into a <code>.tar.bz2</code> file:</p> <p><code>tar -cjvf archive.tar.bz2 file1 file2 ...</code></p> </li> <li> <p>Compress a file or directory into a <code>.zip</code> file:</p> <p><code>zip -r archive.zip file1 file2 ...</code></p> </li> </ol> <p><code>-c</code>: This option stands for \"create\" and instructs tar to create a new archive.</p> <p><code>-v</code>: This option stands for \"verbose\" and makes tar display the names of the files it is archiving as it processes them. It provides additional information during the archiving process.</p> <p><code>-f</code>: filename.tar: This option specifies the filename of the tar archive that will be created. In this case, it will be named filename.tar.</p> <p><code>-z/-j:</code> For gzip/bzip2 compressed or decompressed algorithms.</p> <p><code>-r</code>: This option stands for \"append.\" It instructs tar to add files or directories to an existing tar archive.</p> DeCompress <ol> <li> <p>Extract files from a <code>.tar.gz</code> archive:</p> <p><code>tar -xzvf archive.tar.gz</code></p> </li> <li> <p>Extract files from a <code>.tar.bz2</code> archive:</p> <p><code>tar -xjvf archive.tar.bz2</code></p> </li> <li> <p>Extract files from a <code>.zip</code> archive:</p> <p><code>unzip archive.zip</code></p> </li> </ol>"},{"location":"2_Software_Engineering/Terminal/contents/#networking","title":"Networking","text":"<code>ifconfig</code> <p>Display Network Interface Parameters: this command is used to display information about network interfaces on your system, including IP addresses, MAC addresses, and other network-related settings.</p> <p></p> <code>ping</code> <p>Check Connectivity: the <code>ping</code> command is used to test network connectivity to a specific IP address (replace xxx.xxx.xxx.xxx with the target IP address). It sends ICMP echo request packets to the target and waits for responses, allowing you to check if a remote host is reachable.</p> <p></p> <code>netstat</code> <p>Display Network Status: the <code>netstat</code> command is used to display network-related information. It provides various options to control what information is displayed:</p> <p></p> <p><code>-a</code>: Shows all sockets (both listening and non-listening).</p> <p><code>-l</code>: Includes listening sockets.</p> <p><code>-n</code>: Displays numerical IP addresses instead of resolving hostnames.</p> <p><code>-o</code>: Shows additional information.</p> <p><code>-r</code>: Displays the routing table.</p> <p><code>-t</code>: Lists only TCP sockets.</p> <p><code>-u</code>: Lists only UDP sockets.</p> <p><code>-w</code>: Lists only raw sockets.</p> <p><code>-x</code>: Lists only Unix Domain sockets.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#process","title":"Process","text":"<code>ps</code> <p>The <code>ps</code> command is used to display information about running processes on the system.</p> <ul> <li> <p>To list processes for the current user: <code>ps</code></p> <p></p> </li> <li> <p>To list all processes on the system: <code>ps aux</code></p> </li> <li> <p></p> </li> </ul> <code>pgrep</code> <p>The <code>pgrep</code> command is used to search for processes based on their names or other attributes and retrieve their PIDs (Process IDs).</p> <code>top</code> <p>The <code>top</code> command provides a dynamic, real-time view of system processes and their resource usage.</p> <p></p> <code>kill</code> <p>use <code>kill</code> when you know the specific PID of the process you want to terminate.</p> <ul> <li><code>kill 1234</code></li> </ul> <p>use <code>pkill</code> when you want to terminate processes based on their names or attributes.</p> <ul> <li><code>pkill myprocess</code></li> </ul>"},{"location":"2_Software_Engineering/Test/","title":"Test","text":""},{"location":"2_Software_Engineering/Test/#table-of-content","title":"Table of content","text":"<ol> <li>Test Basic.</li> </ol>"},{"location":"2_Software_Engineering/Test/test/","title":"Test","text":""},{"location":"2_Software_Engineering/Test/test/#types-of-tests","title":"Types of Tests","text":"<p>There are four major types of <code>tests</code>. You can see their relations in the diagram below:</p> <p></p> Definitions Unit testsIntegration testsSystem testsE2E testsManual tests <ul> <li>Formula: \\(A\\)</li> <li>Explanation: test the function of the smallest functional unit <code>A</code>. Each unit is independent.</li> <li>Note: <code>Code coverage</code>: for quantity, measure how much of the original code has been tested.</li> </ul> <ul> <li>Formula: \\(A\\supset B\\) or \\(A\\rightarrow B\\)</li> <li>Explanation: test the function of the parent function <code>A</code> including <code>B</code>. </li> <li>Note: Test <code>A</code> individually needs <code>dependency injection</code>. Test <code>B</code> individually can just use <code>unit test</code>.</li> </ul> <p></p> <ul> <li>Formula: \\(A\\supset B + C\\)</li> <li>Explanation: test object: Some system function from frontend <code>C</code> to backend <code>A</code>. </li> <li>Note: The <code>system test</code> is the same as <code>UI test</code>, which focuses on some system functions.</li> </ul> <ul> <li>Formula: \\(U_{Frontend} + U_{Backend}\\)</li> <li>Explanation: End to end tests. From frontend to backend for all the system functions. </li> <li>Note: One specific <code>E2E test</code> or a few <code>E2E tests</code> specific to some feature is classified into <code>system tests</code>.</li> </ul> <ul> <li>Formula: \\(\\forall \\{A|A\\in U_{Frontend}\\} + \\{C|C\\in U_{Backend}\\}\\)</li> <li>Explanation: manual and arbitrary tests from customers or maintainers.</li> </ul>"},{"location":"2_Software_Engineering/Test/test/#syntax-of-tests","title":"Syntax of Tests","text":"Tests syntax <ol> <li>Given: setup &amp; assumptions</li> <li>When: thing that actually be tested</li> <li>Then: assertions (what do you expect)</li> </ol>"},{"location":"2_Software_Engineering/Test/test/#references","title":"References:","text":"<ul> <li>Picture Resource 1</li> </ul>"},{"location":"2_Software_Engineering/VS_Code/","title":"VS Code","text":"Text Only<pre><code>{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n</code></pre> <p>{% include list.liquid all=true %}</p>"},{"location":"3_C%2B%2B/","title":"C++","text":"<p>C++ comprehension</p>"},{"location":"3_C%2B%2B/#this-chapter-can-be-separated-into-below-sections","title":"This chapter can be separated into below sections:","text":"<ol> <li> <p>Before C++98 (original fundamentals)</p> </li> <li> <p>Modern C++ (C++ 11/14/17/20 functions)</p> </li> <li> <p>STL (C++ Standard Template Library)</p> </li> <li> <p>Design_Pattern (Design blueprint for OOP)</p> </li> </ol>"},{"location":"3_C%2B%2B/fast_read/","title":"** \ud83d\udea4 Fast Read Catalog**","text":"<p>This is a special dictionary for faster anchoring.</p> <p>The fast anchoring catalog can be split into below sections:</p> <ol> <li> <p>OOP Concepts</p> </li> <li> <p>Smart Pointer</p> </li> <li> <p>Pointer &amp; Reference </p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/","title":"C++ 11/14/17/20","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>C++11</p> </li> <li> <p>C++14</p> </li> <li> <p>C++17</p> </li> <li> <p>C++20</p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/#references","title":"References:","text":"<ul> <li>Functional in C++17 and C++20</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/","title":"C++11","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>auto &amp; decltype</p> </li> <li> <p>Smart pointer</p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/","title":"auto &amp; decltype","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#auto-type","title":"auto type","text":"<p><code>auto</code> type can help the compiler to derivate the type of a variable from the right side of <code>=</code> when it is in the compiling stage.</p> auto.cpp<pre><code>auto m_int = 10; // since 10 is int type, the type of `m_int` has been automatially derivated as `int`\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#decltypeexp-type","title":"decltype(exp) type","text":"<p><code>decltype(exp)</code> can be understood as: \"declare type\" from expression. <code>decltype</code> can derivate the type of the variable from the expression <code>exp</code>. It does not care about what is showing on the right side of <code>=</code>.</p> decltype.cpp<pre><code>int m_variable = 0;\ndecltype(m_variable) m_test1 = 1;  //`m_test1` has been derivated to `int`\ndecltype(10.8) m_test2 = 5.5;      //`m_test2` has been derivated to `double`\ndecltype(m_test2 + 100) m_test3;   //`m_test3` has been derivated to `double`\n</code></pre> Watch out! <ul> <li> <p><code>auto</code> requires the initialization of the variable. <code>decltype</code> do not.</p> </li> <li> <p><code>decltype</code> can process any complex expression. But! the result of the <code>exp</code> should not be <code>void</code>.</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#decltypeexp-type-advance","title":"decltype(exp) type [advance]","text":"<p>Before we go in advance, let's figure out <code>lvalue</code> and <code>rvalue</code>:</p> \\[lvalue = rvalue\\] <ul> <li><code>lvalue</code>: data that persists after the expression is executed, that is, persistent data. We can retrieve the data by referring to its address.</li> <li><code>rvalue</code>: data that no longer exists at the end of the expression execution, that is, temporary data.</li> </ul> Three principles for compiler processing the <code>decltype(exp)</code>: <ol> <li>If <code>exp</code> is any of the cases below, the type of <code>decltype(exp)</code> is the same as <code>exp</code>.<ul> <li>an expression not surrounded by parentheses <code>()</code>;</li> <li>an expression to access a class member;</li> <li>a single variable.</li> </ul> </li> <li>If <code>exp</code> is any of the cases below, the type of <code>decltype(exp)</code> is the same as <code>exp</code>'s reference (i.e if <code>T exp</code>, then <code>T&amp; decltype(exp)</code>).<ul> <li>an lvalue;</li> <li>an expression surrounded by parentheses <code>()</code>.</li> </ul> </li> <li>If <code>exp</code> is a function call, then the type of <code>decltype(exp)</code> is the same as the type of the value returned by the function.</li> </ol> Case 1 case1.cpp<pre><code>#include &lt;string&gt;\nusing namespace std;\n\nclass Student{\npublic:\n    static int m_ID;\n    string m_name;\n};\n\nint Student::m_ID = 0;\n\nint  main(){\n    Student Daming;\n    int n_int = 0;\n    const int &amp;n_refint = n_int;\n\n    decltype(n_int) test1 = n_int;             //`n_int` is of type `int`, and `test1` is derived as type `int`\n    decltype(n_refint) test2 = test1;          //`n_refint` is of type `const int&amp;`, and `test2` is derived as type `const int&amp;`\n    decltype(Student::m_ID) test3 = 0;         //`total` is a member variable of type `int` of class `Student`, and `test3` is derived from typing `int`\n    decltype(Daming.m_name) test4 = \"Daming\";  //`total` is a string member variable of class `Student`, and `test4` is derived as a `string`\n    return 0;\n}\n</code></pre> Case 2 case2.cpp<pre><code>#include &lt;string&gt;\nusing namespace std;\n\nint  main(){\n    int&amp; func_int_r(int, char);  //the type of return is: int&amp;\n    int&amp;&amp; func_int_rr(void);     //the type of return is: int&amp;&amp;\n    int func_int(double);        //the type of return is: int\n    const int&amp; fun_cint_r(int, int, int);  //the type of return is: const int&amp;\n    const int&amp;&amp; func_cint_rr(void);        //the type of return is: const int&amp;&amp;\n\n    int n = 100;\n    decltype(func_int_r(100, 'A')) a = n;  //a's type is `int&amp;`\n    decltype(func_int_rr()) b = 0;         //b's type `int&amp;&amp;`\n    decltype(func_int(10.5)) c = 0;        //c's type `int`\n    decltype(fun_cint_r(1,2,3))  x = n;    //x's type const `int&amp;`\n    decltype(func_cint_rr()) y = 0;        //y's type const `int&amp;&amp;`   \n}\n</code></pre> Case 3 case3.cpp<pre><code>using namespace std;\n\nclass Base{\npublic:\n    int m_x;\n};\n\nint main(){\n    const Base obj;\n\n    decltype(obj.m_x) a = 0;    //`obj.m_x` is an access expression for a class member, which follows principle 1. The type of `a` is `int`\n    decltype((obj.m_x)) b = a;  //`obj.m_x` includes `()`, which follows principle 3. The type of `b` is `int&amp;`\n\n    int n = 0, m = 0;\n    decltype(n + m) c = 0;      //`n+m` get a rvalue, which follows principle 1, thus type is `int`\n    decltype(n = n + m) d = c;  //`n=n+m` get a lvalue, , which follows principle 3, thus type is `int&amp;`\n    return 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#references","title":"References:","text":"<ul> <li> <p>Tencent Cloud</p> </li> <li> <p>C++11</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/","title":"Smart Pointer","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#smart-pointer_1","title":"Smart pointer","text":"<p><code>Smart pointer</code> were first popularized during the first half of the 1990s. However, it has been refined by <code>C++ 11</code>. Let's learn this modern C++ feature!</p>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#benifits","title":"Benifits","text":"Advantages <ol> <li>Prevent memory leak. It provides Garbage Collection Mechanisms when we forget to release the mm space.</li> <li>Smart pointer is a class. When the class object is out of scope, the class automatically calls the destructor, which automatically frees the resource.</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#theory","title":"Theory","text":"How? (click to unfold) <p>A <code>smart pointer</code> is a class template that you declare on the stack, and initialize by using a raw pointer that points to its heap-allocated object. </p> <p>After the <code>smart pointer</code> is initialized, it owns the raw pointer. This means that the smart pointer is responsible for deleting the memory that the raw pointer specifies.</p> <p>The <code>smart pointer</code> destructor contains the call to delete, and because the smart pointer is declared on the stack, its destructor is invoked when the smart pointer goes out of scope, even if an exception is thrown somewhere further up the stack.</p>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#compare-with-pointer","title":"Compare with pointer","text":"Comparison comparison.cpp<pre><code>void UseRawPointer()\n{\n    // Using a raw pointer -- not recommended.\n    Song* pSong = new Song(L\"Nothing on You\", L\"Bruno Mars\"); \n\n    // Use pSong...\n\n    // Don't forget to delete!\n    delete pSong;   \n}\n\nvoid UseSmartPointer()\n{\n    // Declare a smart pointer on stack and pass it the raw pointer.\n    unique_ptr&lt;Song&gt; song2(new Song(L\"Nothing on You\", L\"Bruno Mars\"));\n\n    // Use song2...\n    wstring s = song2-&gt;duration_;\n    //...\n\n} // song2 is deleted automatically here.\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#details","title":"Details","text":"Library? <p>Use <code>#include &lt;memory&gt;</code>.</p> API? apis.cpp<pre><code>// T is the template parameter\nT* get();                      // Get the auto_ptr's native pointer encapsulated inside.\nT&amp; operator*();                // \"operator x ()\" overloads x\nT* operator-&gt;();               \nT&amp; operator=(const T&amp; val);    \nT* release();                  // Set auto_ptr's inside pointer to nullptr,\n                               //which will not effect resource it pointed\n\nvoid reset (T* ptr = nullptr); // Directly free the memory pointed to by the \n                               //encapsulated internal pointer, default set nullptr\n</code></pre> Types? <p>C++11 has already discarded original C++98 smart pointer <code>auto_ptr</code> introducing authority.</p> <p>There are three types of <code>smart pointers</code>:</p> <ol> <li>unique_ptr (substitude <code>auto_ptr</code>)</li> <li>shared_ptr (strong ref)</li> <li>weak_ptr (weak ref)</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#unique_ptr","title":"unique_ptr","text":"unique_ptr <p><code>unique_ptr</code> stores one pointer only. Only one smart pointer can point to the object at a time.</p> <ul> <li>To change the object resource control, we remove the current <code>unique_ptr</code> <code>P1</code> and assign a new <code>unique_ptr</code> <code>P2</code> so the pointer now points to <code>P2</code>.</li> </ul> <p> </p> Demo code unique_ptr.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\nusing namespace std;\n#include &lt;memory&gt;\n\nclass Rectangle {\n    int length;\n    int breadth;\n\npublic:\n    Rectangle(int l, int b){\n        length = l;\n        breadth = b;\n    }\n\n    int area(){\n        return length * breadth;\n    }\n};\n\nint main(){\n\n    unique_ptr&lt;Rectangle&gt; P1(new Rectangle(10, 5));\n    assert(P1-&gt;area()==50); // This'll print 50\n\n    // unique_ptr&lt;Rectangle&gt; P2(P1); -- Illegal\n    unique_ptr&lt;Rectangle&gt; P2;\n    // P2 = P1 -- Illegal\n    P2 = move(P1);\n    assert(P2-&gt;area()==50);// This'll print 50\n\n    // This'll give an error,\n    //assert(P1-&gt;area()==50);\n    return 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#shared_ptr","title":"shared_ptr","text":"shared_ptr <p>By using <code>shared_ptr</code>, more than one pointer can point to this one object at a time. </p> <ul> <li> <p>We can use the member function <code>use_count()</code> of the <code>shared_ptr</code> object to check how many \"referencers\" (pointer objects) are referring to the same object resource.</p> <ul> <li>use_count.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\n#include &lt;memory&gt;\n\nint main() {\n    std::shared_ptr&lt;int&gt; sp1 = std::make_shared&lt;int&gt;(42);\n    std::shared_ptr&lt;int&gt; sp2 = sp1;\n    std::shared_ptr&lt;int&gt; sp3 = sp1;\n\n    assert(sp1.use_count() == 3);\n    assert(sp2.use_count() == 3);\n    assert(sp3.use_count() == 3);\n    return 0;\n}\n</code></pre></li> </ul> </li> <li> <p><code>shared_ptr</code> can call function <code>release()</code> to give up ownership of the resource. The object resource counter will be minus one.</p> </li> <li> <p>The referred object resources will be destroyed when the last reference has been deleted (i.e. <code>Ptr.use_count() == 0</code>).</p> </li> </ul> <p> </p> Demo code shared_ptr.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\nusing namespace std;\n#include &lt;memory&gt;\n\nclass Rectangle {\n    int length;\n    int breadth;\n\npublic:\n    Rectangle(int l, int b)\n    {\n        length = l;\n        breadth = b;\n    }\n\n    int area()\n    {\n        return length * breadth;\n    }\n};\n\nint main()\n{\n\n    shared_ptr&lt;Rectangle&gt; P1(new Rectangle(10, 5));\n    // This'll print 50\n    assert(P1-&gt;area()==50);\n\n    shared_ptr&lt;Rectangle&gt; P2;\n    P2 = P1;\n\n    // This'll print 50\n    assert(P2-&gt;area()==50);\n\n    // This'll now not give an error,\n    assert(P1-&gt;area()==50);\n\n    // This'll also print 50 now\n    // This'll print 2 as Reference Counter is 2\n    assert(P1.use_count()==2);\n    return 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#weak_ptr","title":"weak_ptr","text":"weak_ptr <p><code>weak_ptr</code> does not control the life cycle of an object.</p> <ul> <li>It points to an object managed by <code>shared_ptr</code>.</li> <li>It NOT maintains a Reference Counter (<code>use_count()</code>). </li> <li><code>weak_ptr</code> do not stronghold on the object. It is designed to assist <code>shared_ptr</code> to avoid Deadlock (when two <code>shared_ptr</code> refer each other):<ul> <li>BAD: <code>shared_ptr1.use_count()</code> = <code>1</code> \u2194 <code>shared_ptr2.use_count()</code> = <code>1</code></li> <li>GOOD: <code>shared_ptr.use_count()</code> = <code>0</code> \u2194 <code>weak_ptr</code></li> </ul> </li> </ul> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#references","title":"References:","text":"<ul> <li> <p>Smart pointers (Modern C++)</p> </li> <li> <p>Smart Pointers in C++ and How to Use Them</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/","title":"C++14","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/#table-of-contents","title":"Table of contents","text":"<ol> <li>C++14</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/content/","title":"C++14","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/content/#references","title":"References:","text":"<ul> <li>Commits are snapshots, not diffs</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/","title":"C++17","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/#table-of-contents","title":"Table of contents","text":"<ol> <li>Content</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/content/","title":"C++17","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/content/#references","title":"References:","text":"<ul> <li>Commits are snapshots, not diffs</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/","title":"C++20","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/#table-of-contents","title":"Table of contents","text":"<ol> <li>Content</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/content/","title":"C++20","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/content/#references","title":"References:","text":"<ul> <li>Commits are snapshots, not diffs</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/","title":"oldschool C++","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>Basic OOP concepts</p> </li> <li> <p>Pointer &amp; Reference</p> </li> <li> <p>Inheritance</p> </li> <li> <p>Template</p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/","title":"OOP concepts","text":"<p>This material is for listing different OOP concepts:</p> ### [**OOP**](#oop) ### [**Class and Object**](#class-and-object) ### [**Inheritance**](#inheritance) ### [**Polymorphism**](#polymorphism) ### [**Encapsulation**](#encapsulation) ### [**Interface**](#interface) ### [**Abstract class**](#abstract-class) ### [**Abstract methods &amp; Virtual function (method)**](#abstract-methods--virtual-function-method) ### [**Overloading**](#overloading) ### [**Overriding**](#overriding) ### [**Compile &amp; Run time**](#compile--run-time) ### [**Static methods and variables**](#static-methods-and-variables) ### [**Constructor and Destructor**](#constructor-and-destructor) ### [**Access modifier**](#access-modifier)"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#oop","title":"OOP","text":"Benefits of <code>OOP</code> <p><code>Object-oriented programming</code> has several advantages over procedural programming:</p> <ul> <li>OOP is faster and easier to execute</li> <li>OOP provides a clear structure for the programs</li> <li>OOP helps to keep the code DRY \"Don't Repeat Yourself\". It create full reusable applications with less code and shorter development time</li> <li>OOP makes the code easier to maintain, modify and debug.</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#class-and-object","title":"Class and Object","text":"<code>Class and Object</code> <ul> <li> <p>A <code>class</code> is a template or blueprint for creating objects. </p> <ul> <li>It defines the properties and behaviors that an object of that class should have. </li> <li>A class encapsulates data and methods that operate on that data, providing a way to organize and structure complex programs.</li> </ul> </li> <li> <p>An <code>object</code> is an instance of a class. </p> <ul> <li>When a program creates an object of a class, it allocates memory for that object and initializes its member variables and methods according to the class definition. </li> <li>Objects can interact with each other and with the program through their methods and public member variables.</li> </ul> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#inheritance","title":"Inheritance","text":"<code>Inheritance</code> <p>A mechanism in OOP that allows <code>subclass(derived class)</code> to inherit properties and methods from a <code>parent class(base class)</code>. And it can add new properties and methods or override the old class's methods</p> <ul> <li> <p>Usage: <code>Subclasses</code> can inherit public and protected members from the <code>parent class</code>, but NOT private members. See C++ Inheriance for more details.</p> </li> <li> <p>Advantages: It is an important way of code reuse. (for avoiding duplicates, organizing code structure, and improving code readability and maintainability).</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#polymorphism","title":"Polymorphism","text":"<code>Polymorphism</code> <p>The ability of methods with the same name to behave differently (depending on the type of object they are called on or the arguments that are passed to them).</p> <ul> <li> <p>Usage: method overloading, method overriding, interface implementation, and more. </p> </li> <li> <p>Advantages: Improve code flexibility and extensibility, reduce code repetition, and better adhere to the open-closed principle.</p> </li> </ul> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#encapsulation","title":"Encapsulation","text":"<code>Encapsulation</code> <p>A mechanism for combining data and methods together as a single entity (class) and controls access to these data and methods through a public interface.</p> <ul> <li> <p>Usage: By encapsulating, the internal details of an object can be hidden, and only the interface exposed to the outside world can be used.</p> </li> <li> <p>Advantages: Improve code security and reliability, reduce unnecessary coupling, and make code more maintainable and easier to extend.</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#interface","title":"Interface","text":"<code>Interface</code> <p>An abstract type defines a standard specification for a set of methods WITHOUT providing an implementation. </p> <code>Interface</code> &amp; <code>Type</code> <p>Theoretically, the signature (name, parameters, and return type) of all the methods declared by an object is called the <code>Interface</code> to the object. An object's <code>interface</code> characterizes the complete set of requests that can be sent to the object. Any request that matches a signature in the object's interface may be sent to the object [ref. Gamma 94].</p> <p>A <code>type</code> is a name used to denote a particular interface. We speak of an object as having the type \"Window\" if it accepts all requests for the operations defined in the interface named \"Window.\" An object may have many types, and widely different objects can share a type.</p> <ul> <li> <p>Usage: Interfaces allow different classes to implement the same methods with specific implementation.</p> </li> <li> <p>Advantages: Improve code flexibility and extensibility (code decoupling).</p> </li> </ul> C++<pre><code>/*an interface declaration*/\nclass InterfaceClass{\n    public:\n        virtual void method_first() = 0 ; // declaring a pure virtual method by assigning 0\n        virtual void method_second() = 0;\n};\n</code></pre> Interface classAbstract class <p>Satisfy: </p> <ol> <li>has all methods declared as pure virtual methods.</li> <li>has no variable declaration.</li> </ol> <p>Satisfy: </p> <ol> <li>must have at least one pure virtual method.</li> <li>can have implemented methods.</li> <li>can have variables declaration.</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#abstract-class","title":"Abstract class","text":"<code>Abstract class</code> <p>A class that CANNOT be instantiated and defines some methods without implementation.</p> <ul> <li> <p>Usage: Its main purpose is to allow derived classes to implement these methods, thus achieving polymorphism. </p> <ul> <li>Subclasses must implement all the abstract methods in the abstract class, otherwise, the subclass must also be an abstract class.</li> <li>The abstract class &lt;==&gt; contains at least one abstract method (pure virtual function).</li> </ul> </li> <li> <p>Advantages: Provide standard. (Provide a template and standard for subclasses to ensure that subclasses implement the methods and properties defined in the abstract class.)</p> </li> </ul> C++<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\n/*Declaring an abstract class*/\nclass AbstractClass{\n    public:\n        AbstractClass(std::string msg): message(msg){}\n        virtual void method_first() = 0; // a pure virtual method\n        virtual void method_second(){   // implemented virtual method\n            std::cout &lt;&lt; message &lt;&lt; std::endl;\n        }\n\n    private:\n        std::string message;    \n}; \n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#abstract-methods--virtual-function-method","title":"Abstract methods &amp; Virtual function (method)","text":"<code>Virtual function (method)</code> <ul> <li><code>Abstract methods</code>: are pure virtual methods, which have no actual code in them, and (non-abstract) subclasses HAVE TO override the method. It can only be used in an abstract class.</li> <li><code>Virtual methods</code>: can have code, which is usually a default implementation of something, and any subclasses CAN override the method using the override modifier and provide a custom implementation to achieve polymorphism.</li> </ul> C++<pre><code>virtual void method_first() = 0; // a pure virtual method\nvirtual void method_second(){   // implemented virtual method\n    std::cout &lt;&lt; message &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#overloading","title":"Overloading","text":"<code>Overloading</code> <p>A concept specifies more than one definition for a function name or an operator in the same scope, which is called <code>function overloading</code> and <code>operator overloading</code> respectively. </p> <ul> <li> <p>Usage: when a program calls a method with the same name, the compiler automatically matches and calls the corresponding method based on the differences in parameter types and numbers. </p> </li> <li> <p>Advantages: make the code more concise and flexible, reducing code duplication and redundancy.</p> </li> </ul> Function overloadingOperator overloading function_overloading.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass printData {\n   public:\n      void print(int i) {\n        cout &lt;&lt; \"Printing int: \" &lt;&lt; i &lt;&lt; endl;\n      }\n      void print(double  f) {\n        cout &lt;&lt; \"Printing float: \" &lt;&lt; f &lt;&lt; endl;\n      }\n      void print(char* c) {\n        cout &lt;&lt; \"Printing character: \" &lt;&lt; c &lt;&lt; endl;\n      }\n};\n\nint main(void) {\n   printData pd;\n\n   // Call print to print integer\n   pd.print(5);\n\n   // Call print to print float\n   pd.print(500.263);\n\n   // Call print to print character\n   pd.print(\"Hello C++\");\n\n   return 0;\n}\n</code></pre> operator_overloading.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Point {\n    public:\n        int x, y;\n\n        Point operator+ (const Point&amp; other) {\n            Point result;\n            result.x = x + other.x;\n            result.y = y + other.y;\n            return result;\n        }\n};\n\nint main() {\n    Point p1, p2, p3;\n\n    p1.x = 5;\n    p1.y = 10;\n\n    p2.x = 3;\n    p2.y = 2;\n\n    // Add two Point objects using operator overloading\n    p3 = p1 + p2;\n\n    cout &lt;&lt; \"Result of point addition: (\" &lt;&lt; p3.x &lt;&lt; \", \" &lt;&lt; p3.y &lt;&lt; \")\" &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#overriding","title":"Overriding","text":"<code>Overrding</code> <p>A concept refers to redefining a method inherited from a base class in a derived class. </p> <ul> <li>Usage: <ul> <li>The overriding method has the same signature (name, parameters, and return type) as the base class method but can have a different implementation.</li> <li>When a program calls a same-named method of a subclass object, it first looks for an implementation of the method in the subclass. If an implementation exists, it calls the method in the subclass. If there is no implementation, it continues to look for the method in the parent class. </li> </ul> </li> </ul> <p>C++<pre><code>// C++ program to demonstrate function overriding\n// by calling the overridden function\n// of a member function from the child class\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Parent {\npublic:\n    void GeeksforGeeks_Print()\n    {\n        cout &lt;&lt; \"Base Function\" &lt;&lt; endl;\n    }\n};\n\nclass Child : public Parent {\npublic:\n    void GeeksforGeeks_Print()\n    {\n        cout &lt;&lt; \"Derived Function\" &lt;&lt; endl;\n\n        // call of overridden function\n        Parent::GeeksforGeeks_Print();\n    }\n};\n\nint main()\n{\n    Child Child_Derived;\n    Child_Derived.GeeksforGeeks_Print();\n    return 0;\n}\n</code></pre> Open Mini Compiler</p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#compile--run-time","title":"Compile &amp; Run time","text":"<code>Compile &amp; Run time</code> <ul> <li><code>Compile time</code>: the period when the program code is being translated into machine code by the compiler, which:<ul> <li>Checks the syntax, types, declarations, and other information in the code.</li> <li>Generates executable code.</li> <li>Compile-time exceptions are errors that occur during the compilation or translation of a program. These errors are caught by the compiler and reported to the programmer. <ul> <li>E.g. syntax errors, type errors, and name errors.</li> </ul> </li> </ul> </li> <li><code>Run time</code>: the period when the program is being executed, which<ul> <li>Executes the program (executable code generated by the compiler)</li> <li>Produces output based on user input and the logic of the code.</li> <li>Runtime exceptions are errors that occur during the execution of a program. They are not caught by the compiler and may cause the program to terminate abnormally.<ul> <li>E.g. invalid input, null pointer access, and arithmetic overflow.</li> </ul> </li> </ul> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#static-methods-and-variables","title":"Static methods and variables","text":"<code>Static methods and variables</code> <p>Methods and variables that are associated with a class rather than with an instance of the class. </p> <ul> <li> <p>Usage: </p> <ul> <li>When defining it, add <code>static</code> keyword.</li> <li>They can be accessed directly by the class name without needing to create an instance of the class.</li> <li><code>Static variables</code> can be accessed in any method of the class WITHOUT creating an object instance.</li> <li><code>Static methods</code> cannot access instance variables, because they do not depend on the existence of an instance.</li> </ul> </li> <li> <p>Advantages:</p> <ul> <li><code>Static variables</code> can be used to share data among all instances of a class.</li> <li><code>Static methods</code> can be used to provide some global utility functions that can be called without creating an object instance.</li> </ul> </li> </ul> <p>C++<pre><code>// The example to use static variable for counting and static method for reading the counter\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Employee {\n    private:\n        int num;\n        static int count; // static variable\n\n    public:\n        Employee(int n) {\n            num = n;\n            count++; // increment count every time a new instance is created\n        }\n\n        static int getCount() { // static method to return count\n            return count;\n        }\n\n        void getID() {\n            cout &lt;&lt; \"Instance number: \" &lt;&lt; num &lt;&lt; endl;\n        }\n};\n\nint Employee::count = 0; // initialize static variable\n\nint main() {\n    Employee ex1(1);\n    Employee ex2(2);\n    Employee ex3(3);\n\n    ex1.getID();\n    ex2.getID();\n    ex3.getID();\n\n    cout &lt;&lt; \"Total number of instances: \" &lt;&lt; Example::getCount() &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> Open Mini Compiler</p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#constructor-and-destructor","title":"Constructor and Destructor","text":"<code>Constructor and Destructor</code> <ul> <li>A <code>constructor</code> is a special function used to create objects. When an object is created, the compiler automatically calls the constructor of the class to initialize the object.</li> <li>A <code>destructor</code> is a special function used to destroy objects. When an object is destroyed, the compiler automatically calls the destructor of the class to clean up the object, such as releasing dynamically allocated memory. </li> <li> <p>Usage: </p> <ul> <li>The <code>constructor</code> must have the same name as the class, no return type (including void), and can have a parameter list.</li> <li>The <code>destructor</code> must have the same name as the class, with a tilde (~) in front, and no return type or parameter list. </li> </ul> </li> <li> <p>Advantages: Save coding time and system do it automatically for you.     C++<pre><code>// Without constructor\nint main() {\n    Car Ford;\n    Ford.model = \"Mustang\";\n    Ford.color = \"red\";\n    Ford.year = 1969;\n\n    Car Opel;\n    Opel.model = \"Astra\";\n    Opel.color = \"white\";\n    Opel.year = 2005;\n}\n// With constructor\nint main() {\n    Car Ford(\"Mustang\", \"Red\", 1969);\n    Car Opel(\"Astra\", \"White\", 2005);\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass MyClass {\npublic:\n    // Constructor\n    MyClass() {\n        cout &lt;&lt; \"Constructor called.\" &lt;&lt; endl;\n    }\n\n    // \u6790\u6784\u51fd\u6570\n    ~MyClass() {\n        cout &lt;&lt; \"Destructor called.\" &lt;&lt; endl;\n    }\n};\n\nint main() {\n    // \u521b\u5efa\u5bf9\u8c61\n    MyClass obj;\n    return 0;\n}\n</code></pre> Open Mini Compiler</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#access-modifier","title":"Access modifier","text":"<code>Access modifier</code> <p><code>Access modifier</code> is the keyword used to set the class member's accessibility for others (classes, fields, methods and properties).</p> <ul> <li> <p>Usage: See Access modifier.</p> </li> <li> <p>Advantages:</p> <ul> <li>Data encapsulation: Gaurantee encapsulation.</li> <li>Behavior concealment: Create public APIs but hide it's corresponding inside behaviors in the class.</li> </ul> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#reference","title":"Reference","text":"<ul> <li>Picture resource 1</li> <li>OpenAI</li> <li>Abstract class vs Interface in C++</li> <li>C++ Overloading (Operator and Function)</li> <li>Design Patterns Elements of Reusable Object-Oriented Software</li> </ul> <p> C++ Code Compiler </p> <p> </p> <p> </p> <p></p>          C++ Code Compiler         \u2715 ? Input: Code: Compile C++ C C++98 C++11 C++14 C++17 C++20 SQL Python2.7 Swift ruby bash Haskell OCaml Lua Output:"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/","title":"Pointer and Reference","text":"<p>This material is focusing on describing the difference when passing parameters</p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#definition-difference","title":"Definition difference","text":"Definition diff? DefinitionVariabilityConstNULLsizeof++SafetyLayers <ul> <li>A <code>pointer</code> is a variable, except that the variable stores an address that points to a storage unit in memory.</li> <li>A <code>reference</code> is essentially the same thing as the original variable, just an alias for the original variable</li> </ul> <ul> <li>The value of the <code>pointer</code> is changeable after initialization</li> <li>A <code>reference</code> can only be initialized once in a definition. Then it cannot be changed.</li> </ul> <ul> <li>Const pointer: <code>int* const a</code></li> <li>No const reference: no <code>int&amp; const a</code></li> <li>We can have a const referred value\uff1a <code>const int&amp; a</code></li> </ul> <ul> <li><code>Pointer</code>'s value can be <code>NULL</code>.</li> <li><code>Reference</code>'s value cannot be <code>NULL</code>. References must be initialized when they are defined</li> </ul> <ul> <li><code>Pointer</code>: the size of pointer.</li> <li><code>Reference</code>': the size of referred variable.</li> </ul> C++<pre><code>int a[2] = {0,10}\nint *pa =a\uff1bpa++   //now pa == a[1] == 10;\nint &amp;pa =a\uff1bpa++   //now pa == a[0] == 1;\n</code></pre> <ul> <li><code>Pointer</code> is not type safe</li> <li><code>Reference</code> is type safe since it has type checking</li> </ul> <ul> <li><code>Pointer</code> can have several layers such as <code>int** p</code></li> <li><code>Reference</code> can not have several layer such as <code>int&amp;&amp; p</code> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#parameter-passing-diff","title":"Parameter passing diff","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#pass-by-value","title":"Pass by value","text":"What is pass by value? <ul> <li> <p>When calling function passes parameter in called function, <code>stack</code> will open up a new space for storing a memory copy of the value of <code>actual parameter</code> from the calling function.</p> </li> <li> <p>Any operation in the called function on a formal parameter is performed as a local variable since you are using the copied value. It does not affect the value of the <code>actual parameter</code> of the main calling function.</p> </li> </ul> value.cpp<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nvoid Rfun(int p) // Called function: copy the value from \"a\"\n{\n    cout&lt;&lt;\"local p's address:\"&lt;&lt;&amp;p&lt;&lt;endl;         //0x6ffdf0\n    cout&lt;&lt;\"local p's value:\"&lt;&lt;p&lt;&lt;endl;            //16\n    p=0Xff;\n}\n\nint main()\n{\n    int a=0x10;\n    cout&lt;&lt;\"a's address:\"&lt;&lt;&amp;a&lt;&lt;endl;               //0x6ffe1c\n    cout&lt;&lt;\"a's value:\"&lt;&lt;a&lt;&lt;endl;                  //16\n    Rfun(a);     // Calling function: passing a's value\n    cout&lt;&lt;\"a's now address:\"&lt;&lt;a&lt;&lt;endl;            //16\n}\n\n&gt;&gt;&gt;\na's address:0x7ffd8a777d04\na's value:16\nlocal p's address:0x7ffd8a777cec\nlocal p's value:16\na's now address:16\n</code></pre> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#pointer-passing","title":"Pointer passing","text":"Pointer passing <p><code>Pointer parameter passing</code> is essentially <code>Pass by value</code>. It passes an address as value. </p> pointer.cpp<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nvoid Pfun(int* p) // Called function: copy the address value from \"a\"\n{\n    //new address for storing address value passed by \"a\"\n    cout&lt;&lt;\"local p's address:\"&lt;&lt;&amp;p&lt;&lt;endl;         //0x6ffdf0\n    cout&lt;&lt;\"local p's value:\"&lt;&lt;p&lt;&lt;endl;            //0x6ffe1c\n\n    //test if p points to a's value\n    cout&lt;&lt;\"local p's pointing value:\"&lt;&lt;*p&lt;&lt;endl;  //16\n    *p=0Xff;\n\n    //test if p will affect \"a\"'s address value\n    p++;\n    cout&lt;&lt;\"local p's updated value:\"&lt;&lt;p&lt;&lt;endl;    //0x6ffe1d\n}\n\nint main() \n{\n    int a=0x10;\n    cout&lt;&lt;\"a's address:\"&lt;&lt;&amp;a&lt;&lt;endl;               //0X6ffe1c\n    cout&lt;&lt;\"a's value:\"&lt;&lt;a&lt;&lt;endl;                  //16\n    Pfun(&amp;a);   // Calling function: passing a's address\n    cout&lt;&lt;\"a's now address:\"&lt;&lt;&amp;a&lt;&lt;endl;           //0X6ffe1c\n    cout&lt;&lt;\"a's now value:\"&lt;&lt;a&lt;&lt;endl;              //255\n}\n\n&lt;&lt;&lt;\na's address:0x7ffd233a9854\na's value:16\nlocal p's address:0x7ffd233a9838\nlocal p's value:0x7ffd233a9854\nlocal p's pointing value:16\nlocal p's updated value:0x7ffd233a9858\na's now address:0x7ffd233a9854\na's now value:255\n</code></pre> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#reference-passing","title":"Reference passing","text":"Reference passing <ul> <li> <p>When calling function passes parameter in called function, <code>stack</code> will open up a new space for storing a memory copy of the address of <code>actual parameter</code> from the calling function.</p> </li> <li> <p>Any operation in the called function on a formal parameter will affect the value of the <code>actual parameter</code> since you are tracking and editing the content in the same address.</p> </li> </ul> reference.cpp<pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nvoid Rfun(int &amp;p)\n{\n    cout&lt;&lt;\"local p's address:\"&lt;&lt;&amp;p&lt;&lt;endl;         //0x6ffdf0\n    cout&lt;&lt;\"local p's value:\"&lt;&lt;p&lt;&lt;endl;            //16\n    p=0Xff;\n}\n\nint main()\n{\n    int a=0x10;\n    cout&lt;&lt;\"a's address:\"&lt;&lt;&amp;a&lt;&lt;endl;               //0x6ffe1c\n    cout&lt;&lt;\"a's value:\"&lt;&lt;a&lt;&lt;endl;                  //16\n    Rfun(a);\n    cout&lt;&lt;\"a's now address:\"&lt;&lt;a&lt;&lt;endl;            //255\n}\n\n&gt;&gt;&gt;\na's address:0x7ffebbcabd44\na's value:16\nlocal p's address:0x7ffebbcabd44\nlocal p's value:16\na's now address:255\n</code></pre> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#reference","title":"Reference","text":"<p>Picture source 1</p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/","title":"Inheritance","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>Basic Inheritance</p> </li> <li> <p>Multiple Inheritance</p> </li> <li> <p>Inheritance Access</p> </li> <li> <p><code>Public</code>, <code>Private</code>, and <code>Protected</code> Inheritances</p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/","title":"Inheritance","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#basic-inheritance","title":"Basic Inheritance","text":"For? <p>Inherit <code>Attributes</code> and <code>Methods</code> from Base class (parent) to Derived class (child).</p> Grammar? <p>Use the <code>:</code> symbol.</p> Let's do it! <p>Problem: Let the <code>Car</code> class (child) inherits the Attributes and Methods from the <code>Vehicle</code> class (parent):</p> inher_base.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt; \nusing namespace std;\n\n//Base class\nclass Vehicle{\n    public:\n        Vehicle(){}\n        ~Vehicle(){}\n    public:\n        string m_brand = \"Ford\";\n    public:\n        string Honk(){\n            return \"Tu, tu! \\n\";\n        }\n};\n\n//Derived class\nclass Car: public Vehicle{\n    public:\n        string m_model = \"Tesla\";\n};\n\nint main(){\n    Car newCar;\n    assert (newCar.Honk() == \"Tu, tu! \\n\");\n    assert (newCar.m_brand == \"Ford\"); //cout &lt;&lt; newCar.brand   &lt;&lt; endl;\n    assert (newCar.m_model == \"Tesla\"); //cout &lt;&lt; newCar.   model &lt;&lt; endl;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#multiple-inheritance","title":"Multiple Inheritance","text":"Let's do it! <p>Problem: Let the <code>Son</code> class (child) inherits the Attributes and Methods from both the <code>Mom</code> and <code>Dad</code> class (parents):</p> inher_multi_.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt; \nusing namespace std;\n\n//Base class\nclass Mom{\n    public:\n        int m_age = 32;\n    public:\n        string Speak(){\n            return \"Mom is me!\";\n        }\n};\n\nclass Dad{\n    public:\n        int m_age = 44;\n    public:\n        string Say(){\n            return \"Dad is me!\";\n        }\n};\n\n//Derived class\nclass Son: public Mom, public Dad{\n    public:\n        int m_age = 5;\n    public:\n        string Say(){\n            return \"I am son!\";\n        }\n};\n\nint main(){\n    Son ason;\n    assert (ason.Speak() == \"Mom is me!\");\n    assert (ason.Say() == \"I am son!\"); \n    assert (ason.m_age == 5);\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#inheritance-access","title":"Inheritance Access","text":"What is <code>access specifiers</code> for methods? <p>Access specifiers define how the members (attributes and methods) of a class can be accessed.</p> <p>There are three access specifiers: <code>public</code>, <code>private</code>, <code>protected</code>.</p> <ul> <li> <p><code>public</code>: members are accessible from outside the class.</p> </li> <li> <p><code>private</code>: members cannot be accessed (or viewed) from outside the class (but is accessable with in the class).</p> </li> <li> <p><code>protected</code>: members cannot be accessed from outside the class. However, they can be accessed in inherited classes.</p> </li> </ul> Let's do it! <p>Problem: Let the <code>Programmer</code> class (child) inherits the Attributes and Methods from both the <code>Employee</code> class (parents) in a safe way:</p> inher_access.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt; \nusing namespace std;\n\n//Base class\nclass Employee{\n    protected:\n        int m_salary = 32;\n};\n\n//Derived class\nclass Programmer: public Employee{\n    public:\n        int m_bonus = 44;\n    public:\n        void setSalary(int s){\n            m_salary = s;\n        }\n        int getSalary(){\n            return m_salary;\n        }\n};\n\nint main(){\n    Programmer Mark;\n    Mark.setSalary(50000);\n    assert (Mark.getSalary() == 50000);\n\n    Mark.m_salary = 90000;     //error: \u2018int Employee::m_salary\u2019 is protected within this context\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#public-private-and-protected-inheritances","title":"<code>Public</code>, <code>Private</code>, and <code>Protected</code> Inheritances","text":"What is <code>access specifiers</code> for inheritances? <ul> <li> <p><code>public inheritances</code>: Basic class's <code>public</code> and <code>protected</code> members remain the original status in the derived class.</p> </li> <li> <p><code>private inheritances</code>: Basic class's <code>public</code> and <code>protected</code> members become private in the derived class.</p> </li> <li> <p><code>protected inheritances</code>: Basic class's <code>public</code> and <code>protected</code> members become protected in the derived class.</p> </li> <li> <p>Note: <code>private</code> members of the base class are inaccessible to the derived class.</p> </li> </ul> Let's do it! <p>Problem: illustrate all the inheritances method:</p> inher_allway.c++<pre><code>class Base {\n  public:\n    int x;\n  protected:\n    int y;\n  private:\n    int z;\n};\n\nclass PublicDerived: public Base {\n  // x is public\n  // y is protected\n  // z is not accessible from PublicDerived\n};\n\nclass ProtectedDerived: protected Base {\n  // x is protected\n  // y is protected\n  // z is not accessible from ProtectedDerived\n};\n\nclass PrivateDerived: private Base {\n  // x is private\n  // y is private\n  // z is not accessible from PrivateDerived\n};\n</code></pre> Let's do it! <p>Problem 1: C++ <code>public</code> Inheritance:</p> <p>inher_pub_inher.c++<pre><code>// C++ program to demonstrate the working of public inheritance\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base {\n  private:\n    int pvt = 1;\n\n  protected:\n    int prot = 2;\n\n  public:\n    int pub = 3;\n\n    // function to access private member\n    int getPVT() {\n      return pvt;\n    }\n};\n\nclass PublicDerived : public Base {\n  public:\n    // function to access protected member from Base\n    int getProt() {\n      return prot;\n    }\n};\n\nint main() {\n  PublicDerived object1;\n  cout &lt;&lt; \"Private = \" &lt;&lt; object1.getPVT() &lt;&lt; endl;\n  cout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\n  cout &lt;&lt; \"Public = \" &lt;&lt; object1.pub &lt;&lt; endl;\n  return 0;\n}\n</code></pre> output<pre><code>Private = 1\nProtected = 2\nPublic = 3\n</code></pre></p> Let's do it! <p>Problem 2: C++ <code>protected</code> Inheritance:</p> <p>inher_pro_inher.c++<pre><code>// C++ program to demonstrate the working of protected inheritance\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base {\n  private:\n    int pvt = 1;\n\n  protected:\n    int prot = 2;\n\n   public:\n    int pub = 3;\n\n    // function to access private member\n    int getPVT() {\n      return pvt;\n    }\n};\n\nclass ProtectedDerived : protected Base {\n  public:\n    // function to access protected member from Base\n    int getProt() {\n      return prot;\n    }\n\n    // function to access public member from Base\n    int getPub() {\n      return pub;\n    }\n};\n\nint main() {\n  ProtectedDerived object1;\n  cout &lt;&lt; \"Private cannot be accessed.\" &lt;&lt; endl;\n  cout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\n  cout &lt;&lt; \"Public = \" &lt;&lt; object1.getPub() &lt;&lt; endl;\n  return 0;\n}\n</code></pre> output<pre><code>Private cannot be accessed.\nProtected = 2\nPublic = 3\n</code></pre></p> Let's do it! <p>Problem 3: C++ <code>private</code> Inheritance:</p> <p>inher_pri_inher.c++<pre><code>// C++ program to demonstrate the working of private inheritance\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base {\n  private:\n    int pvt = 1;\n\n  protected:\n    int prot = 2;\n\n  public:\n    int pub = 3;\n\n    // function to access private member\n    int getPVT() {\n      return pvt;\n    }\n};\n\nclass PrivateDerived : private Base {\n  public:\n    // function to access protected member from Base\n    int getProt() {\n      return prot;\n    }\n\n    // function to access private member\n    int getPub() {\n      return pub;\n    }\n};\n\nint main() {\n  PrivateDerived object1;\n  cout &lt;&lt; \"Private cannot be accessed.\" &lt;&lt; endl;\n  cout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\n  cout &lt;&lt; \"Public = \" &lt;&lt; object1.getPub() &lt;&lt; endl;\n  return 0;\n}\n</code></pre> output<pre><code>Private cannot be accessed.\nProtected = 2\nPublic = 3\n</code></pre></p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#references","title":"References:","text":"<ul> <li> <p>w3schools: C++ Inheritance</p> </li> <li> <p>Programiz: C++ Public, Protected and Private Inheritance</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/","title":"Template","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/#table-of-contents","title":"Table of contents","text":"<ol> <li>Basic Inheritance</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/","title":"Template","text":"What? <p>C++ adds two new keywords to support templates: <code>template</code> and <code>typename</code>. <code>typename</code> can always be replaced by the keyword <code>class</code>.</p> For? <p>When we want to use some classes or functions for different data types. But we do not want to write multiple versions of the identical code implementation.</p> How does it work? <p>Templates are expanded at compiler time. </p> <p>The function is basically like macros. The DIFFERENCE is:</p> <ul> <li>Compiler needs to do type checking before template expansion.</li> <li>Compiled code will finally contain multiple copies of the same templated class/function</li> <li>For the same type of function/class calling, the compiler will not create a new copy; instead, it uses the old copy. </li> </ul> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#function-templates","title":"Function Templates","text":"<p>For functions that are used for different data types:</p> Function Templates func_temp.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\nusing namespace std;\n\n//Function template that is used to compare size.\ntemplate &lt;typename T&gt; T myMax(T x, T y)\n{\n    return (x &gt; y) ? x : y;\n}\n\nint main()\n{\n    assert(myMax&lt;int&gt;(3, 7) == 7); // Call myMax for int\n    assert(myMax&lt;double&gt;(3.0, 7.0) == 7); // call myMax for double\n    assert(myMax&lt;char&gt;('g', 'e') == 'g'); // call myMax for char\n\n    return 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#class-templates","title":"Class Templates","text":"<p>For classes that are used for different data types:</p> Class Templates class_temp.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;cassert&gt;\nusing namespace std;\n\ntemplate &lt;typename T&gt; class Array {\nprivate:\n    T* ptr;\n    int size;\n\npublic:\n    Array(T arr[], int s);\n    string print();\n};\n\ntemplate &lt;typename T&gt; Array&lt;T&gt;::Array(T arr[], int s)\n{\n    ptr = new T[s];\n    size = s;\n    for (int i = 0; i &lt; size; i++)\n        ptr[i] = arr[i];\n}\n\ntemplate &lt;class T&gt; string Array&lt;T&gt;::print()\n{\n    string result = \"\";\n    for (int i = 0; i &lt; size; i++)\n        result += \" \" + to_string(*(ptr + i));\n    return result;\n}\n\nint main()\n{\n    int arr[5] = { 1, 2, 3, 4, 5 };\n    Array&lt;int&gt; a(arr, 5);\n    assert(a.print() == \" 1 2 3 4 5\");\n    return 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#multiple-arguments-to-templates","title":"Multiple arguments to Templates","text":"Multiple Arguments Templates mul_temp.c++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class T, class U&gt; class A {\n    T x;\n    U y;\n\npublic:\n    A() { cout &lt;&lt; \"Constructor Called\" &lt;&lt; endl; }\n};\n\nint main()\n{\n    A&lt;char, char&gt; a;\n    A&lt;int, double&gt; b;\n    return 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#default-argument-type-to-templates","title":"Default argument type to Templates","text":"Default Argument Type Templates da_temp.c++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;class T, class U = char&gt; class A {\npublic:\n    T x;\n    U y;\n    A() { cout &lt;&lt; \"Constructor Called\" &lt;&lt; endl; }\n};\n\nint main()\n{\n    A&lt;char&gt; a; // This will call A&lt;char, char&gt;\n    return 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#references","title":"References:","text":"<ul> <li>Templates in C++ with Examples</li> </ul>"},{"location":"3_C%2B%2B/Design_Pattern/","title":"**  Design Pattern**","text":"<p>Here is the section talking about the Desgin Pattern for OOP projects.</p> <p>The section can be split into below fragments:</p> <ol> <li>UML class diagram for OOP</li> <li>Software desgin principles</li> <li>Programming techniques</li> <li>Desgin Patterns</li> </ol>"},{"location":"3_C%2B%2B/Design_Pattern/UML/","title":"**  UML &amp; Object relationships**","text":"<p>Let's see how to express OOP by using UML class diagram. With UML we then import the relationship between classes.</p> <ul> <li>UML<ul> <li>1.1 Classes</li> <li>1.2 Visibility</li> <li>1.3 Multiplicity on relations</li> <li>1.4 Annotations on classes</li> </ul> </li> <li>Object relationships</li> </ul>"},{"location":"3_C%2B%2B/Design_Pattern/UML/#uml","title":"UML","text":"<p><code>Unified Modeling Language (UML)</code> is a type of static structure diagram used to show the structure of a system, including: - Classes - Attributes (Properties) - Methods (Operations) - Relationships (between objects)</p>"},{"location":"3_C%2B%2B/Design_Pattern/UML/#11-classes","title":"1.1 Classes","text":"How to express <code>class</code>? <p>A <code>class</code> in <code>UML</code> should encapsulate the class name, state (attributes), and behavior (methods).</p> <p>C++<pre><code>class BankAccount{\n    public:\n        int m_ownerID;\n        float m_balance;\n    public:\n        int Deposit(int amount){...};\n        int Withdrawal(int ID){...};\n}\n</code></pre> Let's say we have a class as above; then we can show the diagram below (w/o signature):</p> Class with signatureClass without signature <pre><code>classDiagram\n    class BankAccount{\n        +m_ownerID : int\n        +m_balance : float\n        +Deposit(amount : int) int\n        +Withdrawal(amount : int) int\n    }</code></pre> <pre><code>classDiagram\n    class BankAccount\n    BankAccount : +m_ownerID\n    BankAccount : +m_balance\n    BankAccount : +Deposit()\n    BankAccount : +Withdrawal()</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/UML/#12-visibility","title":"1.2 Visibility","text":"How to set visibility of attribute and method? <p>We can change the symbol before the attributes or methods as below:</p> <ul> <li><code>+</code> denotes <code>public</code> attributes or method</li> <li><code>-</code> denotes <code>private</code> attributes or method</li> <li><code>#</code> denotes <code>protected</code> attributes or method</li> </ul> <p>C++<pre><code>class BankAccount{\n    private:\n        int m_ownerID;\n    protect:\n        float m_balance;\n    public:\n        int m_age;\n\n}\n</code></pre> Let's say we have a class as above; then we can show the diagram below (w/o signature):</p> <pre><code>classDiagram\n    class BankAccount{\n        -m_ownerID : int\n        #m_balance : float\n        +m_age : int\n    }</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/UML/#13-multiplicity-on-relations","title":"1.3 Multiplicity on relations","text":"How to express multiplicity between classes? <p>Multiplicity or cardinality in class diagrams indicates the number of instances of one class that can be linked to an instance of the other class.</p> <p>The different cardinality options are :</p> <ul> <li><code>1</code> Only 1</li> <li><code>0..1</code> Zero or One</li> <li><code>1..*</code> One or more</li> <li><code>*</code> Many</li> <li><code>n n</code></li> <li><code>0..n</code> zero to n</li> <li><code>1..n</code> one to n</li> </ul> <pre><code>classDiagram\n    direction TB\n    Customer \"1\" --&gt; \"*\" Ticket\n    Student \"1\" --&gt; \"1..*\" Course\n    Galaxy --&gt; \"many\" Star : Contains</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/UML/#14-annotations-on-classes","title":"1.4 Annotations on classes","text":"How to add annotations on classes? <p>Some common annotations include:</p> <ul> <li><code>&lt;&lt;Interface&gt;&gt;</code> To represent an Interface class</li> <li><code>&lt;&lt;Abstract&gt;&gt;</code> To represent an abstract class</li> <li><code>&lt;&lt;Service&gt;&gt;</code> To represent a service class</li> <li><code>&lt;&lt;Enumeration&gt;&gt;</code> To represent an enum</li> </ul> <pre><code>classDiagram\n    direction TB\n    class A{\n        &lt;&lt;interface&gt;&gt;\n    }\n    class B{\n        &lt;&lt;Abstract&gt;&gt;\n    }\n\n    class C{\n        &lt;&lt;Service&gt;&gt;\n    }\n\n    class D{\n        &lt;&lt;Enumeration&gt;&gt;\n    }</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/UML/#object-relationships","title":"Object relationships","text":"<p>Now we have the <code>UML</code> diagram as a tool for visualizing relationships. Let's look at the relationships between objects.</p> How to express relationships between classes? <p> </p> <p>Below are all the relationships used among classes.</p> DependencyAssociationAggregationCompositionRealizationInheritance <ul> <li> <p>Intuition: The behavior of one object depends on another object.</p> </li> <li> <p>Iff: <code>class A</code> depends on <code>class B</code> (The edition of <code>class B</code> will affect <code>class A</code>).</p> </li> <li> <p>E.g: A car (<code>A</code>) needs to have tires, an engine, and oil (<code>B</code>) to work correctly.</p> </li> </ul> <pre><code>classDiagram\n    direction LR\n    classA ..&gt; classB : Dependency</code></pre> <ul> <li> <p>Intuition: The relationship among multiple objects.</p> </li> <li> <p>Iff: <code>class A</code> depends on <code>class B</code></p> <ul> <li><code>object A</code> can visit info in <code>object B</code></li> </ul> </li> <li> <p>E.g: An order form (<code>A</code>) associated with one customer object and multiple product objects (<code>B</code>).</p> </li> </ul> <pre><code>classDiagram\n    direction LR\n    classA --&gt; classB: Association</code></pre> <ul> <li> <p>Intuition: The relationship between the whole and the parts. The parts can survive without the whole.</p> </li> <li> <p>Iff: <code>class A</code> depends on <code>class B</code></p> <ul> <li><code>object A</code> can visit info in <code>object B</code></li> <li><code>object A</code> is constructed by <code>object B</code> </li> <li><code>object A</code> do not controls the life-circle of <code>object B</code>(<code>object B</code> can survive without <code>object A</code>)</li> </ul> </li> <li> <p>E.g: An order form (<code>A</code>) associated with one customer object and multiple product objects (<code>B</code>).</p> </li> </ul> <pre><code>classDiagram\n    direction LR\n    classA --o classB : Aggregation</code></pre> <ul> <li> <p>Intuition: The relationship between the whole and the parts. The parts cannot survive without the whole.</p> </li> <li> <p>Iff: <code>class A</code> depends on <code>class B</code></p> <ul> <li><code>object A</code> can visit info in <code>object B</code></li> <li><code>object A</code> is constructed by <code>object B</code></li> <li><code>object A</code> controls the life-circle of <code>object B</code> (<code>object B</code> can not live without <code>object A</code>)</li> </ul> </li> <li> <p>E.g: A car (<code>A</code>) needs to have tires, an engine, and oil (<code>B</code>) to work correctly.</p> </li> </ul> <pre><code>classDiagram\n    direction LR\n    classA --* classB : Composition</code></pre> <ul> <li> <p>Intuition: The relationship between the interface and class implimentation.</p> </li> <li> <p>Iff: <code>class A</code> depends on <code>class B</code></p> <ul> <li><code>object A</code> can be seen as <code>object B</code></li> <li><code>method A</code> (Methods defined in class A) is declared by <code>interface B</code></li> </ul> </li> <li> <p>E.g: An interface (<code>B</code>) defines a set of methods that an implementation class implements (<code>A</code>).</p> </li> </ul> <pre><code>classDiagram\n    direction LR\n    classA ..|&gt; classB : Realization</code></pre> <ul> <li> <p>Intuition: The relationship between the interface and class implimentation.</p> </li> <li> <p>Iff: <code>class A</code> depends on <code>class B</code></p> <ul> <li><code>object A</code> can be seen as <code>object B</code></li> <li><code>class A</code> inherits interfaces and implementations in <code>class B</code> and can extend them.</li> </ul> </li> <li> <p>E.g: An animal (<code>B</code>) as a parent, dogs and cats as a subclass (<code>A</code>) inherit some of the characteristics and behaviors of animals, while having their own unique characteristics and behaviors</p> </li> </ul> <pre><code>classDiagram\n    direction LR\n    classA --|&gt; classB : Inheritance</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/UML/#reference","title":"Reference","text":"<p>-UML Class Diagram Tutorial</p>"},{"location":"3_C%2B%2B/Design_Pattern/basic/","title":"**  Software desgin principles**","text":"<p>Before we start to learn the design pattern, we need to know what is a good software design.</p> <ul> <li>Good SW desgin?</li> <li>Basic design principles<ul> <li>1.1 Encapsulate varies</li> <li>1.2 Program to an interface</li> <li>1.3 Favor Composition over Inheritance</li> </ul> </li> <li>SOLID principles<ul> <li>2.1 Single Responsibility Principle</li> <li>2.2 Open/Closed Principle</li> <li>2.3 Liskov Substitution Principle</li> <li>2.4 Interface Segregation Principle</li> <li>2.5 Dependency Inversion Principle</li> </ul> </li> <li>Programming techniques</li> </ul>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#good-sw-desgin","title":"Good SW desgin?","text":"How to define a good SW desgin? <p>A good software design should show code reuse and extensibility.</p>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#basic-design-principles","title":"Basic design principles","text":"<p>Here we show the <code>basic principles</code> to make SW flexible, robust, and understandable.</p>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#11-encapsulate-varies","title":"1.1 Encapsulate varies","text":"<p>There are two types of encapsulation: <code>Method encapsulation</code> and <code>Class encapsulation</code>.</p> Method encapsulation <p>When some operation in a method needs to be used or edited frequently, we choose to encapsulate the operations into submethods to increase the readability and flexibility.</p> <p>See the highlight lines as an example. After the <code>method encapsulation</code>, the frequent-changed tax algorithms become a manageable unit.</p> BeforeAfter method.cpp<pre><code>//Calculate total money need to pay\nfloat getTotal(Order order){ \n    int sum = 0, total = 0;\n\n    //1. Calculate sum of all books' price\n    for (auto item: order.m_items) sum += item.price * item.quantity; \n\n    //2. Calculate consumption tax\n    if (order.m_country == \"CN\") \n        total += total * 0.05;\n    else\n        total += total * 0.07;\n\n    return total;\n}\n</code></pre> method_encap.cpp<pre><code>void addTax(Order &amp; order, float &amp; total){\n    if (order.m_country == \"CN\") \n        total += total * 0.05;\n    else\n        total += total * 0.07;\n}\n//Calculate total money need to pay\nfloat getTotal(Order order){\n    int sum = 0, total = 0;\n\n    //1. Calculate sum of all books' price\n    for (auto item: order.m_items) sum += item.price * item.quantity;\n\n    //2. Calculate consumption tax\n    addTax(order, total);\n\n    return total;\n}\n</code></pre> Class encapsulation <p>If the operation in a function contains too many assistant variables and methods, we abstract it into a new class to increase the readability and logic.</p> BeforeAfter <pre><code>classDiagram\n    class Order{\n        - m_items : item\n        - m_country : string\n        - m_other_info1\n        - m_other_info2\n        - ...\n        - getOrderTotal()\n        - addTax(m_country, m_other_info1, m_other_info2, ...)\n    }</code></pre> <pre><code>classDiagram\n    direction LR\n    Order ..&gt; TaxCalculator : Depends on\n    note for Order \"for (auto item: m_items) {\\n.   total = item.price*item.quantity;\\n.   total += total * addTax(m_country, m_other_info1, m_other_info2, ...);\\n}\"\n    class Order{\n        - m_items : item\n        - m_country : string\n        - m_other_info1\n        - m_other_info2\n        - ...\n        - getOrderTotal()\n    }\n    class TaxCalculator{\n        + addTax(country, info1, info2, ...)\n        - getCountryTax(country)\n        - getInfo1Tax(info1)\n        - getInfo2Tax(info2)\n    }</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#12-program-to-an-interface","title":"1.2 Program to an interface","text":"<p>Program to an interface, not an implementation. It means making the dependency more flexible (decoupled)</p> <ul> <li>Figure out the method, which demands the dependent class.</li> <li>Using a new <code>Interface</code> or <code>Abstract class</code> to abstract the method.</li> <li>Let the dependent class implement the abstraction.</li> <li>Dependency injection (now the class in demand depends on the abstraction).</li> </ul> Example <p>Dog loves eating bones. Now let's make the code more extensible (although it temporally looks more complicated):</p> BeforeAfter <pre><code>classDiagram\n    direction LR\n    Dog ..&gt; Bone : Depends on\n    note for Dog \"this.m_energy += b.getNutrition();\"\n    class Dog{\n        - m_energy : float\n        + Eat(Bone b)\n    }\n    class Bone{\n        - ...\n        + getNutrition()\n        + getFlavor()\n        + getSize()\n    }</code></pre> <pre><code>classDiagram\n    direction LR\n    Dog ..&gt; Food : Depends on\n    Bone ..|&gt; Food : Realize\n    note for Dog \"this.m_energy += b.getNutrition();\"\n    class Dog{\n        - m_energy : float\n        + Eat(Food b)\n    }\n    class Food{\n        &lt;&lt;interface&gt;&gt;\n        + getNutrition()\n    }\n    class Bone{\n        - ...\n        + getNutrition()\n        + getFlavor()\n        + getSize()\n    }</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#13-favor-composition-over-inheritance","title":"1.3 Favor Composition over Inheritance","text":"<p>To put <code>Reuse Mechanism</code> to work, we normally do NOT do <code>inheritance</code>, which will cause some problems:</p> <ul> <li> <p>The subclass can't abandon any interfaces of the superclass. All the abstract methods (pure virtual functions) in the superclass have to be implemented in the subclass, even though some of them are useless.</p> </li> <li> <p>When overriding, should check compatibility between the new behavior and the base one. In case some code needs to use the subclass object to pass in superclass as the parameter.</p> </li> <li> <p>Inheritance breaks superclasses' encapsulation. Subclasses have <code>protect</code> authority to visit their superclass. Vise, parents can also visit children.</p> </li> <li> <p>Subclasses are tightly coupled to superclasses. Editing superclasses will destroy the functions of subclasses.</p> </li> <li> <p>Reusing code through inheritance can lead to parallel inheritance hierarchies. The combination of classes will explode.</p> </li> </ul> <p>Let's use <code>Composition</code>. The technique we are using is called <code>Delegation</code></p> <code>Inheritance</code> \u2192 <code>Composition</code>! <p>Check the picture in UML class diagram again:</p> <p> </p> <p>With the same depth, we can change from using Inheritance to <code>Composition</code> or looser <code>Aggregation</code>.</p> <p>E.g. Let's take vehicles as an example:</p> InheritanceComposition &amp; Aggregation <p>You can see lots of repeat codes since subclass cannot inherit two classes in the same type for ambiguity (diamond problem).</p> <pre><code>classDiagram\n    direction BT\n    Sedan --|&gt; vehicles\n    SUV --|&gt; vehicles\n    `Electronic Sedan` --|&gt; Sedan\n    `Fuel Sedan` --|&gt; Sedan\n    `Autopilot Electronic Sedan` --|&gt; `Electronic Sedan`\n    `Manual Electronic Sedan` --|&gt; `Electronic Sedan`\n    `Manual Fuel Sedan` --|&gt; `Fuel Sedan`\n    `Electronic SUV` --|&gt; SUV\n    `Fuel SUV` --|&gt; SUV\n    `Autopilot Electronic SUV` --|&gt; `Electronic SUV`\n    `Autopilot Fuel SUV` --|&gt; `Fuel SUV`\n    `Manual Fuel SUV` --|&gt; `Fuel SUV`</code></pre> <p>You can solve this problem with composition. Instead of car objects implementing a behavior on their own, they can delegate it to other objects.</p> <pre><code>classDiagram \n    direction BT\n    Engine *-- vehicles\n    Driver o-- vehicles\n    `Fuel Engine` --|&gt; Engine\n    `Electronic Engine` --|&gt; Engine\n    Robot --|&gt; Driver\n    Human --|&gt; Driver\n\n    class vehicles{\n        - engine\n        - tire\n        + deliver(src,dst,cargo) \n    }\n    class Engine{\n        &lt;&lt;interface&gt;&gt;\n        + move()\n    }\n    class Driver{\n        &lt;&lt;interface&gt;&gt;\n        + navigate()\n    }</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#solid-principles","title":"SOLID principles","text":"<p>Besides the <code>basic design principles</code> we talked above, <code>SOLID principles</code> makes software design easier to understand, more flexible, and more maintainable. Here we focus more on using C++ examples for better understanding.</p>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#21-single-responsibility-principle","title":"2.1 Single Responsibility Principle","text":"<p>One class should be responsible for behaviors as simple as possible.</p> BeforeAfter <pre><code>classDiagram \n    direction TB\n    class Student{\n        - ID : int\n        + getID()\n        + printTranscript()\n    }</code></pre> <pre><code>classDiagram \n    direction LR\n    Transcript ..&gt; Student\n    class Transcript{\n        - ...\n        + print(studentID : int)\n    }\n    class Student{\n        - ID : int\n        + getID()\n    }</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#22-openclosed-principle","title":"2.2 Open/Closed Principle","text":"<p>For any extension, the class should be \"open-minded\"; For any edition, the class should be \"enclosed\".</p> <ul> <li>\"Open-minded\" (developing status): add new methods and attributes, and rewrite superclass.</li> <li>\"Enclosed\" (releasing status): interfaces have been defined, and behaviors will not be edited anymore.</li> <li>*Note: when the class itself has some bugs, directly edit it instead of create new subclasses.</li> </ul> BeforeAfter <p>There is a finished <code>Order</code> class. <pre><code>classDiagram \n    direction LR\n    note for Order \"int getShippingCost(){\\n . if(m_ship_method == 'air') return 80;\\n . else return 20;\\n}\"\n    class Order{\n        - m_items\n        - m_ship_method\n        + getTotalCost()\n        + getShippingCost()\n        + setShippingType(string)\n        + getShippingType()\n    }</code></pre></p> <p>To add a new shipping method, you have to edit the original class. We can use the interface to extend the uneditable <code>Order</code> class.</p> <pre><code>classDiagram \n    direction LR\n    note for Order \"int getShippingCost(){\\n . return Shipping.getCost(this);\\n}\"\n    Order --o Shipping\n    Ground ..|&gt; Shipping\n    Air ..|&gt; Shipping\n    class Order{\n        - m_items\n        - m_ship_method: Shipping\n        + getTotalCost()\n        + getShippingCost()\n        + setShippingType(m_ship_method)\n        + getShippingType()\n    }\n    class Shipping{\n        &lt;&lt;Interface&gt;&gt;\n        + getCost(order)\n    }\n    class Ground{\n        + getCost(order)\n    }\n    class Air{\n        + getCost(order)\n    }</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/basic/#23-liskov-substitution-principle","title":"2.3 Liskov Substitution Principle","text":""},{"location":"3_C%2B%2B/Design_Pattern/basic/#24-interface-segregation-principle","title":"2.4 Interface Segregation Principle","text":""},{"location":"3_C%2B%2B/Design_Pattern/basic/#25-dependency-inversion-principle","title":"2.5 Dependency Inversion Principle","text":""},{"location":"3_C%2B%2B/Design_Pattern/basic/#programming-techniques","title":"Programming techniques","text":""},{"location":"3_C%2B%2B/Design_Pattern/basic/#reference","title":"Reference","text":"<ul> <li>DESIGN PATTERNS</li> </ul>"},{"location":"3_C%2B%2B/Design_Pattern/contents/","title":"**  Desgin Patterns**","text":"<p><code>Design pattern</code> is a reusable solution to a commonly occurring problem in software design. It provides a general framework for solving a particular design problem, which can be adapted to suit the specific needs of a particular application.</p> <p>Design patterns are typically classified into three categories:</p> Creational patternsStructural patternsBehavioral patterns <ul> <li>Creational patterns<ul> <li>1.1 Singleton</li> <li>1.2 Factory Method</li> <li>1.3 Abstract Factory</li> <li>1.4 Builder</li> <li>1.5 Prototype</li> </ul> </li> </ul> <ul> <li>Structural patterns<ul> <li>2.1 Adapter</li> <li>2.2 Bridge</li> <li>2.3 Composite</li> <li>2.4 Decorator</li> <li>2.5 Facade</li> <li>2.6 Flyweight</li> <li>2.7 Proxy</li> </ul> </li> </ul> <ul> <li>Behavioral patterns<ul> <li>3.1 Chain of Responsibility</li> <li>3.2 Command</li> <li>3.3 Interpreter</li> <li>3.4 Iterator</li> <li>3.5 Mediator</li> <li>3.6 Memento</li> <li>3.7 Observer</li> <li>3.8 State</li> <li>3.9 Strategy</li> <li>3.10 Template Method</li> <li>3.11 Visitor</li> </ul> </li> </ul> <p>The relationship among them can be seen in picture below: </p>"},{"location":"3_C%2B%2B/Design_Pattern/contents/#creational-patterns","title":"Creational patterns","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#11-singleton","title":"1.1 Singleton","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#12-factory-method","title":"1.2 Factory Method","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#13-abstract-factory","title":"1.3 Abstract Factory","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#14-builder","title":"1.4 Builder","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#15-prototype","title":"1.5 Prototype","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#structural-patterns","title":"Structural patterns","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#21-adapter","title":"2.1 Adapter","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#22-bridge","title":"2.2 Bridge","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#23-composite","title":"2.3 Composite","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#24-decorator","title":"2.4 Decorator","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#25-facade","title":"2.5 Facade","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#26-flyweight","title":"2.6 Flyweight","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#27-proxy","title":"2.7 Proxy","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#behavioral-patterns","title":"Behavioral patterns","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#31-chain-of-responsibility","title":"3.1 Chain of Responsibility","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#32-command","title":"3.2 Command","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#33-interpreter","title":"3.3 Interpreter","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#34-iterator","title":"3.4 Iterator","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#35-mediator","title":"3.5 Mediator","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#36-memento","title":"3.6 Memento","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#37-observer","title":"3.7 Observer","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#38-state","title":"3.8 State","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#39-strategy","title":"3.9 Strategy","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#310-template-method","title":"3.10 Template Method","text":""},{"location":"3_C%2B%2B/Design_Pattern/contents/#311-visitor","title":"3.11 Visitor","text":""},{"location":"3_C%2B%2B/Design_Pattern/prog_tech/","title":"**  Programming techniques**","text":"<p>Let's see some programming techniques used for design pattern.</p>"},{"location":"3_C%2B%2B/Design_Pattern/prog_tech/#delegation","title":"Delegation","text":"<p>For enhancing code reuse, we followed the basic principle: Favor Composition over Inheritance. The <code>Delegation</code> is the technique to implement the principle of <code>Composition</code>.</p>"},{"location":"3_C%2B%2B/Design_Pattern/prog_tech/#11-definition","title":"1.1 Definition","text":"<p>Two objects are involved in handling a request:</p> <p>\\(Receving\\;object\\;(subclass) \\xrightarrow[]{\\text{delegates operations}} Delegate\\;object\\;(superclass)\\)</p> <pre><code>    classDiagram\n        direction LR\n        Delegator --* Delegatee : REQUEST behavior (Operation2)\n        class Delegator{\n            - target : Delegatee\n            + Operation()\n        }\n        note for Delegator \"void Operation(){\\n. target.Operation2(); \\n}\"\n        class Delegatee{\n            + Operation2()\n        }</code></pre>"},{"location":"3_C%2B%2B/Design_Pattern/prog_tech/#12-example","title":"1.2 Example","text":"<p>Let's say there is a class <code>Window</code> wanna calculate its area (<code>Area1()</code>). There are two plans:</p> <ol> <li>Abstract <code>Window</code> to a superclass <code>Rectangular</code> as an inheritance.</li> <li>Delegate area-calculate behavior to a reusable <code>Rectangular</code> instance.</li> </ol> Plan1: AbstractionPlan2: Delegation <p><pre><code>    classDiagram\n        direction BT\n        Window --|&gt; Rectangle\n        class Window{\n            - win_width : int\n            - win_height : int\n            + Area1()\n        }\n        note for Window \"float Area1(){\\n. return this-&gt;win_width * this-&gt;win_height; \\n}\"\n        class Rectangle{\n            - rec_width : int\n            - rec_height : int\n            + Area2()\n        }\n        note for Rectangle \"float Area2(){\\n. return this-&gt;rec_width * this-&gt;rec_height; \\n}\"</code></pre> <code>Window</code> inherits the operation <code>Area2()</code> from <code>Rectangle</code>.</p> <pre><code>    classDiagram\n        direction BT\n        Window --* Rectangle\n        class Window{\n            - rectangle : Rectangle\n            + Area1()\n        }\n        note for Window \"float Area(){\\n. return rectangle.Area2(window); \\n}\"\n        class Rectangle{\n            - rec_width : int\n            - rec_height : int\n            + Area2(ptr)\n        }\n        note for Rectangle \"float Area2(ptr){\\n. return this-&gt;rec_width * this-&gt;rec_height + ptr.info; \\n}\"</code></pre> <p><code>Window</code> must now forward requests to its <code>Rectangle</code> instance explicitly.</p> <p>Instead of a Window being a Rectangle, with the help of delegation, it would change to have a Rectangle.</p>"},{"location":"3_C%2B%2B/Design_Pattern/prog_tech/#13-advantages","title":"1.3 Advantages","text":"<ul> <li>It makes it easy to compose behaviors at run-time;</li> <li>It makes it easy to change the way they're composed. </li> </ul>"},{"location":"3_C%2B%2B/Design_Pattern/prog_tech/#14-improvement","title":"1.4 Improvement","text":"<p>The completed <code>delegation</code> UML diagram can be seen below:</p> <pre><code>classDiagram\n    direction LR\n    Delegator(Will) ..&gt; Interface(ScrumMaster) : Depends on behavior of\n    Delegatee1(Tianle) ..|&gt; Interface(ScrumMaster) : Realize\n    Delegatee2(Yun) ..|&gt; Interface(ScrumMaster) : Realize\n    class Delegator(Will){\n        - target : Interface(ScrumMaster)\n        + Operation()\n    }\n    note for Delegator(Will) \"void Operation(){\\n. target.Operation2(); \\n}\"\n    class Delegatee1(Tianle){\n        + Operation2()\n    }\n    class Delegatee2(Yun){\n        + Operation2()\n    }\n    class Interface(ScrumMaster){\n        &lt;&lt;Interface&gt;&gt;\n        + Operation2()\n    }</code></pre> <p>C++<pre><code>protocol ScrumMaster {\n    func standup()\n}\n\nclass Tianle: ScrumMaster {\n    func standup() { ... }\n}\n\nclass Yun: ScrumMaster {\n    func standup() { ... }\n}\n\nclass Will: ScrumMaster {\n    static let shared = Will()\n    var hasSchedulingConflict = false\n    weak var target: ScrumMaster?\n\n    private init()\n\n    func standup() {\n        guard !hasSchedulingConflict else {\n            target?.standup()\n        }\n\n        ...\n    }\n}\n</code></pre> E.g: Our <code>window</code> can become <code>circular</code> at run-time simply by replacing its Rectangle instance with a Circle instance, assuming Rectangle and Circle have the same type.</p>"},{"location":"3_C%2B%2B/Design_Pattern/prog_tech/#15-use-case","title":"1.5 Use case","text":"<p>Here we list the design patterns that use </p> Use heavilyLess heavily <ul> <li>State [Behavioral Design Pattern]</li> <li>Strategy [Behavioral Design Pattern]</li> <li>Visitor [Behavioral Design Pattern]</li> </ul> <ul> <li>Mediator [Behavioral Design Pattern]</li> <li>Responsibility [Behavioral Design Pattern]</li> <li>Bridge [Structural Design Pattern]</li> </ul>"},{"location":"3_C%2B%2B/Design_Pattern/prog_tech/#reference","title":"Reference","text":"<ul> <li>Design Patterns Elements of Reusable Object-Oriented Software</li> </ul>"},{"location":"3_C%2B%2B/STL/","title":"C++ STL","text":""},{"location":"3_C%2B%2B/STL/#this-section-can-be-separated-into-below-sub-sections","title":"This section can be separated into below sub-sections:","text":"<ol> <li> <p>xx.</p> </li> <li> <p>xx.</p> </li> <li> <p>Unordered_set.</p> </li> </ol>"},{"location":"3_C%2B%2B/STL/unodered_set/","title":"Unordered Set","text":"<p>This data structure is used for the case we DON'T need the key-value pairs like in the unordered_map. It is a easy way to implement presence/absence</p> Declaration declaration.c++<pre><code>std::unordered_set&lt;int&gt; Set;\n</code></pre>"},{"location":"3_C%2B%2B/STL/unodered_set/#directory","title":"Directory","text":"<ul> <li>Insert elements: insert().</li> <li>Count element presence time: count().</li> <li>Check element existence: find.</li> </ul>"},{"location":"3_C%2B%2B/STL/unodered_set/#insert","title":"insert()","text":"insert().c++<pre><code>Set.insert(1);\n</code></pre> Example <p> #include &lt;iostream&gt; #include &lt;unordered_set&gt; using namespace std;   //declare an unordered set globally unordered_set Set = {2, -1};   int main() {     //insert the element     Set.insert(1);           for (auto itr = Set.begin(); itr != Set.end(); itr++)     {         cout &lt;&lt; (*itr) &lt;&lt; endl;     } }  </p>"},{"location":"3_C%2B%2B/STL/unodered_set/#count","title":"count()","text":"count().c++<pre><code>Set.count(2);\n</code></pre> Details <p>Used to check if an element is present in the container or not. The function returns <code>1</code> if the element is present in the container; otherwise, it returns <code>0</code>.</p> <p>Equals to <code>return (Set.find(&lt;element&gt;) != Set.end());</code>. Same performance. See find().</p> Example <p> #include &lt;iostream&gt; #include &lt;unordered_set&gt; using namespace std;   //declare an unordered set globally unordered_set Set = {2, -1, 1, 2};   int main() {     cout &lt;&lt; \"2 exsists times: \" &lt;&lt; Set.count(2) &lt;&lt; endl;           cout &lt;&lt; \"All elements:\" &lt;&lt; endl;     for (auto itr = Set.begin(); itr != Set.end(); itr++)     {         cout &lt;&lt; (*itr) &lt;&lt; \" \" &lt;&lt; endl;     } }  </p>"},{"location":"3_C%2B%2B/STL/unodered_set/#find","title":"find()","text":"find().c++<pre><code>Set.find(-1);\n</code></pre> Example <p> #include &lt;iostream&gt; #include &lt;unordered_set&gt; using namespace std;   //declare an unordered set globally unordered_set Set = {2, -1, 1, 2};   int main() {     //Check result using find()     cout &lt;&lt; (Set.find(-1) != Set.end()) &lt;&lt; endl;           //Check result using count()     cout &lt;&lt; Set.count(-1) &lt;&lt; endl; }  </p>"},{"location":"3_C%2B%2B/STL/unodered_set/#references","title":"References","text":""},{"location":"4_Algorithms/","title":"Algorithms","text":"<p>As a software engineer, being familier with algorithms and data structures is the basic skill for our job interview and solid skill improvement.</p>"},{"location":"4_Algorithms/#this-chapter-can-be-separated-into-two-sections","title":"This chapter can be separated into two sections:","text":"<ol> <li> <p>Typical Algorithms for the typical solution that I have learned before.</p> </li> <li> <p>Practice Sheet for the questions record of my practice.</p> </li> </ol>"},{"location":"4_Algorithms/Practice_Sheet/","title":"Practice Sheet","text":"<p>I record all the leetcode practice I have done here:</p>"},{"location":"4_Algorithms/Typical_Questions/","title":"Typical Algorithms","text":"<p>This is not a garage for questions. This section is aiming to record all the structured question type. That is to say, pseudo-code is more important than code itself.</p>"},{"location":"4_Algorithms/Typical_Questions/#the-questions-have-been-listed-here","title":"The questions have been listed here:","text":"<p>I. From  Leetcode:</p> MatrixGraphicsSlide WindowSorting <ol> <li>Topology Sort</li> <li>Backtracking </li> </ol> <ol> <li>Dijkstra</li> <li>Bipartition Check</li> <li>Union-Find </li> </ol> <ol> <li>Monotonic Queue</li> </ol> <ol> <li>Quick Sort</li> <li>Counting Sort</li> </ol> <p>II. From  Hackerrank:</p> <ol> <li>STDIN and STDOUT</li> </ol>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/","title":"STDIN and STDOUT","text":"<p>Keywords: Standard I/O</p>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#situation","title":"Situation","text":"<p>Below is the typical question format:</p> Question type C++<pre><code>#include &lt;cmath&gt;\n#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   \n    return 0;\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#stdin","title":"STDIN","text":"<p>The situation of STDIN can be separated into below types:</p> <ul> <li>Load element</li> <li>Load single line</li> <li>Load several lines</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#load-element","title":"Load element","text":"Load element cin&gt;&gt;cin.get C++<pre><code>......\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ \n    char a;\n    int b;\n    string c;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; c;\n    //input: x 1 7g qt\n    //output: x 1 7g\n    return 0;\n}\n</code></pre> Warning! Space , Enter , and Tab <ul> <li><code>&gt;&gt;</code> will filter(auto jump) all the input unseen characters.</li> <li>If input type is <code>string</code> or <code>char[]</code>, the character loading will stop when meet the unseen characters.</li> </ul> C++<pre><code>......\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ \n    //WAY1: use \"int cin.get()\"\n    int cha,chb,chc;\n    cha = cin.get();\n    chb = cin.get();\n    chc = cin.get();\n    cout &lt;&lt; cha &lt;&lt; \" \" &lt;&lt; chb &lt;&lt; \" \" &lt;&lt; chc &lt;&lt; endl;\n    //input: a b c\n    //output: 97(a) 32(space) 98(b)\n\n    //WAY2: use \"istream&amp; cin.get(char&amp; var)\"\n    char a[4] = {};\n    cin.get(a, 4);\n\n    //input: a b c\n    //output: a_b_ (\"_\" means space)\n\n    return 0;\n}\n</code></pre> Warning! <ul> <li>Even though <code>get()</code> returns <code>int</code>, the return value represents <code>ASCll</code> value.<ul> <li>Successful read: return the of the <code>ASCll</code> value character. When an end-of-file character is encountered, return <code>EOF</code> or <code>-1</code>.</li> </ul> </li> <li>The <code>get()</code> function reads characters from the buffer WITHOUT ignoring the separator.</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#load-single-line","title":"Load single line","text":"Load single line Text Only<pre><code>```cpp\n......\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ \n    char a[10] = {};\n    char b[10] = {};\n    string line;\n    cin.getline(a,3);         //read line until: length (including 'enter') == 3\n    cin.getline(b,5,'\\n');    //indicate end symbol: '\\n'\n    getline(cin,line);        //read the whole line into string including space.\n    cout &lt;&lt; a &lt;&lt; \",\" &lt;&lt; b &lt;&lt; \",\" &lt;&lt; line; \n\n    //input:ak \n    //      ksks\n    //      cmas;ckmaslc\n    //output: ak,ksks,cmas;ckmaslc\n\n    return 0;\n}\n```\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#load-multiple-line","title":"Load multiple line","text":"Load multiple line WAY 1WAY 2 C++<pre><code>......\nint main() {\n    vector&lt;int&gt; a;\n    int temp;\n\n    cin &gt;&gt; temp;\n    a.push_back(temp);\n    while (cin.get() != '\\n') \n    {\n        cin &gt;&gt; temp;\n        a.push_back(temp);\n    }\n    //input: 1 2 3\n    //output: 1 2 3\n    return 0;\n}\n</code></pre> C++<pre><code>......\nvector&lt;int&gt; a;\nstring line, word;\nint main() {\n    getline(cin, line);\n    istringstream record(line);\n    while (record &gt;&gt; word)\n    {\n        a.push_back(atoi(word.c_str()));\n    }\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#stdout","title":"STDOUT","text":""},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#references","title":"References:","text":"<ul> <li>Smart pointers (Modern C++)</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/","title":"Backtracking","text":"<p>Keywords: 2D Matrix</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#situation","title":"Situation","text":"Situation <p><code>Backtracking</code>, which is a methodology where we mark the current path of exploration, if the path does not lead to a solution, we then revert the change (i.e. backtracking) and try another path.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#question-example","title":"Question Example","text":"79. Word Search <p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> if word exists in the grid.</p> <p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#example","title":"Example","text":"Example Example 1:Example 2: <ul> <li>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"</li> <li>Output: true</li> </ul> <ul> <li>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"</li> <li>Output: true</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#pseudo-code","title":"Pseudo-code","text":"Code frame Pseudo<pre><code>bool Find_Solution(matrix, path) {\n    for candidate in matrix:\n        if backtrace(candidate, path[0]) return true;\n    return false;\n}\n\nbool backtrace(candidate, path[index]){\n    //Step1. Check the bottom case\n    if(index == path.end) -&gt; return true\n\n    //Step2. Check if candidates locates at the outside the boundaries\n    if(candidate at out || candidate != path[index]) -&gt; return false\n\n    //Step3. If match explore the neighbors in DFS\n    candidate = '#'; // mark as used\n\n    for neighbor of candidate:\n        if (backtrace(neighbor, path[index+1])) -&gt; return true\n\n    //Step4. Clean up and return the false as the wrong path\n    candidate = path[index]; // mark back when fail\n    return false;\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#answer","title":"Answer","text":"Simplified Solution solution.c++<pre><code>class Solution {\nprivate:\n    int rows, cols;\npublic:\n    bool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) {\n        rows = board.size();\n        cols = board[0].size();\n        for(int row = 0; row &lt; rows; row++){\n            for(int col = 0; col &lt; cols; col++){\n                if(backtrace(row, col, board, word, 0)) return true;\n            }\n        }\n        return false;\n    }\n\n    bool backtrace(int row, int col, vector&lt;vector&lt;char&gt;&gt;&amp; board, string word, int index){\n        //Step1. Check the bottom case\n        if(index&gt;=word.length())\n            return true;\n\n        //Step2. Check the boundaries\n        if(row &lt; 0|| row == rows||col &lt; 0|| col == cols|| board[row][col] != word[index]){\n            return false;\n        }\n\n        //Step3. If match explore the neighbors in DFS\n        board[row][col] = '#'; // mark as used\n\n        int row_offset[4] = {0, 1, 0, -1}, col_offset[4] = {1, 0, -1, 0};\n        for(int i = 0; i &lt; 4; i++){\n            if (backtrace(row+row_offset[i], col+col_offset[i], board, word, index+1))\n                return true;\n        }\n\n        //Step4. Clean up and return the false as the wrong path\n        board[row][col] = word[index];\n        return false;\n    }\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#references","title":"References","text":"<p>Solution of 79. Word Search</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Bipartition/","title":"Bipartition Graph Check","text":"<p>Keywords: 2D Graphics</p> <p>See this link: Possible Bipartition</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/","title":"Counting Sort","text":"<p>Keywords: Sorting</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#description","title":"Description","text":"Counting Sort? <p><code>Counting Sort</code> works by iterating through the input, counting the number of times each item occurs, and using those counts to compute an item's index in the final, sorted array.</p> Efficiency? <p>Time complexity: \\(O(N+M)\\) (where <code>M</code> is \\(max(arr[])-min(arr[])\\) and <code>N</code> is equal to size(arr[])).</p> <p><code>Counting sort</code> is better than the comparison-based sorting techniques because there is no comparison between elements in counting sort. </p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#algorithm-details","title":"Algorithm Details","text":"Steps <p>Step1. \"Count\": pick a <code>pivot</code> in the array. We normally pick the most left element.</p> <p>Step2. \"Read\": scan the whole counting array in sequence, and output the sorted array.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#diagram","title":"Diagram","text":"Example of \"Partition\""},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#answer","title":"Answer","text":"Realization solution.c++<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan\"\n//--------------------------------------------\n#include &lt;iostream&gt;\n#include &lt;cassert&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nvector&lt;int&gt; countingSort(vector&lt;int&gt; array, int max_val){\n    //Count\n    int count[max_val+1] = {0};\n    for(auto a: array){\n        count[a] += 1;\n    }\n\n    //Read\n    vector&lt;int&gt; result;\n    for(int i = 0; i &lt; max_val+1; i++){\n        while(count[i]&gt;0){\n            result.push_back(i);\n            count[i]--;\n        }\n    }\n    return result;\n}\n\nint main()\n{\n    vector&lt;int&gt; input = {4,1,5,3,6};\n\n    vector&lt;int&gt; output = countingSort(input, 6);\n    vector&lt;int&gt; test = {1,3,4,5,6};\n    assert(output == test);\n    //cout&lt;&lt;\"output:\";\n    //for(auto i: output)\n    //{\n    //    if(i==output.back()){\n    //        cout&lt;&lt;i&lt;&lt;endl;\n    //    }\n    //    else cout&lt;&lt;i&lt;&lt;\",\";\n    //}\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#references","title":"References:","text":"<ul> <li>Counting Sort Algorithm</li> <li>Picture resource</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/","title":"Dijkstra","text":"<p>Keywords: 2D Graphics, shortest path</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#situation","title":"Situation","text":"Situation <p><code>Dijkstra</code> is an algorithm used to find the shortest path between nodes of the graph. The algorithm creates the tree of the shortest paths from the starting source vertex from all other points in the graph.</p> Working conditions <p>Dijkstra's algorithm only works with the graph that possesses positive weights. </p> Is Dijkstra BFS or DFS? <p>None of them. <code>Dijkstra</code> is a priority first algorithm (or <code>best first</code>). </p> <p>Between <code>BFS</code> and <code>DFS</code> algorithms, the priority will be more to <code>BFS</code> rather than <code>DFS</code>. However, <code>Dijkstra</code> is much more than the <code>BFS</code> algorithm. </p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#question","title":"Question","text":"Question <p>Consider the following situation: </p> <p> </p> Example: <ul> <li>Input: Graphic matrix[5][5], (A,B,C,D,E)</li> <li>Output: Dist[0,7,3,9,5], Trac matrix[path_for_A, path_for_B, path_for_C...]</li> <li>Explanation: Take \"B\" as an example: A --3\u2192 C --4\u2192 B =&gt; Dist[1] = 3+4 = 7 </li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#explanation","title":"Explanation","text":"Explanation Algorithm Description:Algorithm Diagram: <ol> <li>First of all, we will mark all vertex as unvisited vertex</li> <li>Then, we will mark the source vertex as 0 and all other vertices as infinity</li> <li>Consider the source vertex as current vertex</li> <li>Calculate the path length of all the neighboring vertex from the current vertex by adding the weight of  the edge in the current vertex</li> <li>Now, if the new path length is smaller than the previous path length, then replace it otherwise ignore it</li> <li>Mark the current vertex as visited after visiting the neighbor vertex of the current vertex</li> <li>Select the vertex with the smallest path length as the new current vertex and go back to step 4.</li> <li>Repeat this process until all the vertex are marked as visited.</li> </ol> <ol> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ol>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#pseudo-code","title":"Pseudo-code","text":"Pseudo-code Pseudo-code<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan, Shivali Bhadaniya\"\n//--------------------------------------------\n\n//G is the graph, S is the Sources Vertex\nfunction dijkstra(G, S){\n    dist[] //record distance from each Vertex to the Source Vertex\n    prev[]\n    for each vertex V in G\n        dist[V] &lt;- infinite\n        prev[V] &lt;- NULL\n        If V != S, add V to Priority Queue Q\n        dist[S] &lt;- 0\n\n    while Q != \u2205\n        //U is another Vertex\n        U &lt;- Extract MIN from Q //Pop the top of heap Q\n        for each unvisited neighbour V of U\n            temperoryDist &lt;- dist[U] + edgeWeight(U, V)\n            if temperoryDist &lt; dist[V]\n                dist[V] &lt;- temperoryDist\n                prev[V] &lt;- U\n    return dist[], prev[]\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#answer","title":"Answer","text":"Realization solution.c++<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan, Shivali Bhadaniya\"\n//--------------------------------------------\n\n#include&lt;iostream&gt;\nusing namespace std;\n\n// global variables\nint dimension;\nvector&lt;bool&gt; grabage_set; // boolean array to mark visited and unvisited for each node\nvector&lt;int&gt; distance_set; // // array to calculate the minimum distance for each node \nvector&lt;vector&lt;int&gt;&gt; prev_set;\n\n//Algorithm body\nvoid Dijkstra(vector&lt;vector&lt;int&gt;&gt; graph, int src)   // adjacency matrix \n{                     \n    distance_set[src] = 0;   // Source vertex distance is set 0               \n\n    priority_queue&lt;pair&lt;int,int&gt;, vector&lt;pair&lt;int,int&gt;&gt;, greater&lt;pair&lt;int,int&gt;&gt;&gt; heap;\n    heap.push({src, 0});\n\n    while (heap.size() != 0){\n        auto current = heap.top().second;\n        heap.pop();\n\n        grabage_set[current] = true;\n        for(int k = 0; k &lt; dimension; k++)                  \n        {\n            // updating the distance of neighbouring vertex\n            int tempdist = distance_set[current] + graph[current][k];\n            if(!grabage_set[k] &amp;&amp; graph[current][k])\n            {\n                if (tempdist &lt; distance_set[k])\n                {   \n                    distance_set[k] = tempdist;\n                    prev_set[k].push_back(current);\n                }                    \n                heap.push({tempdist,k});\n                //cout &lt;&lt; tempdist &lt;&lt; \",\" &lt;&lt; k  &lt;&lt; endl;\n            }\n        }\n    }\n}\n\nvoid printout();\n\nint main()\n{\n    vector&lt;vector&lt;int&gt;&gt; graph={\n        {0, 10, 3, 0, 0},\n        {0, 0, 1, 2, 0},\n        {0, 4, 0, 8, 2},\n        {0, 0, 0, 0, 7},\n        {0, 0, 0, 9, 0}};\n    dimension = graph[0].size();\n    grabage_set.resize(dimension,false); \n    distance_set.resize(dimension,INT_MAX);\n    prev_set.resize(dimension,vector&lt;int&gt;());\n\n    Dijkstra(graph,0);\n\n    printout();\n    return 0;                           \n}\n\nvoid printout(){\n    for(auto i: distance_set)\n    {\n        cout &lt;&lt; i &lt;&lt; endl;\n    }\n    cout &lt;&lt; endl;\n    for(int k = 1; k &lt; prev_set.size(); k++)\n    {\n        cout &lt;&lt; char('A'+ k) &lt;&lt; \" to A: \";\n        for (int t = 0; t &lt; prev_set[k].size(); t++)\n        {\n            if (t &lt; prev_set[k].size() - 1)\n                cout &lt;&lt; char('A'+ prev_set[k][t]) &lt;&lt; \" &lt;- \";\n            else\n                cout &lt;&lt; char('A'+ prev_set[k][t]) &lt;&lt; \" &lt;- \" &lt;&lt; char('A'+ k) &lt;&lt; endl;\n        }\n    }\n}\n</code></pre> Output<pre><code>0\n7\n3\n9\n5\n\nB to A: A &lt;- C &lt;- B\nC to A: A &lt;- C\nD to A: C &lt;- B &lt;- D\nE to A: C &lt;- E\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#references","title":"References:","text":"<ul> <li>Dijkstra's Algorithm in C++ | Shortest Path Algorithm</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/","title":"Monotonic Decreasing Queue","text":"<p>Keywords: Slide Window, Array</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#situation","title":"Situation","text":"239. Sliding Window Maximum <p>You are given an array of integers <code>nums</code>. There is a sliding window of size <code>k</code>, which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return the max sliding window.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#example","title":"Example","text":"Example Example 1:Example 2: <ul> <li>Input: <code>nums</code> = [1,3,-1,-3,5,3,6,7], <code>k</code> = 3</li> <li>Output: [3,3,5,5,6,7]</li> <li>Explanation: </li> </ul> Window position Max [1  3  -1] -3  5  3  6  7 3 1 [3  -1  -3] 5  3  6  7 3 1  3 [-1  -3  5] 3  6  7 5 1  3  -1 [-3  5  3] 6  7 5 1  3  -1  -3 [5  3  6] 7 6 1  3  -1  -3  5 [3  6  7] 7 <ul> <li>Input: <code>nums</code> = [1], <code>k</code> = 1</li> <li>Output: [1]</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#pseudo-code","title":"Pseudo-code","text":"Pseudo-code Pseudo-code<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan\"\n//--------------------------------------------\n\nclass Monoqueue {\n\n    deque&lt;int&gt; myque; // The monotonic queue is constructed based on dequeue. Every element in this queue is maintained to be monotonously decreasing.\n\npublic:\n\n    //Monotonize: when push in a new element, keep popping out current back elements until E_back &gt;= E_pushin.\n    void push(int n) {\n        while(!myque.empty() &amp;&amp; myque.back() &lt; n) myque.pop_back();\n        myque.push_back(n);\n    }\n\n    //\"Large Front\": return front element (magnitude compared after monotonization) in the data structure\n    int front() {\n        return myque.front();\n    }\n\n    //Pop \"Large Front\": if the value has already been popped previously (small than the current, we do not have to pop it again)\n    void pop(int n) {  \n        if(n == myque.front())\n            myque.pop_front();\n    }\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#explainations","title":"Explainations","text":"Monotonize &amp; \"Large Front\"? <p>Assume our <code>monotonic queue</code> looks like the below, and we need to monotonize it when pushing back elements in. Run the codes below:</p> <ul> <li><code>myque</code>: [6, 2] </li> <li><code>myque.push(-3)</code> \u2192 <code>-3</code> is smaller than any elements inside, which should stay in the queue back. </li> <li> <p><code>myque.push(5)</code> </p> <ul> <li>\u2192 <code>5</code> is bigger than <code>-3</code>; pop out <code>-3</code>, which is out.</li> <li>\u2192 <code>5</code> is bigger than <code>2</code>; pop out <code>2</code>, which is out.</li> <li>\u2192 <code>5</code> is smaller than <code>6</code>; stop popping and push back 5.</li> </ul> </li> <li> <p><code>myque.front()</code>: 6 now is the \"Large Front\".</p> </li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#answer","title":"Answer","text":"Realization solution.c++<pre><code>class Monoqueue {\n    deque&lt;int&gt; myque;\npublic:\n    void push(int n) {\n        while(!myque.empty() &amp;&amp; myque.back() &lt; n) myque.pop_back();\n        myque.push_back(n);\n    }\n    int front() {\n        return myque.front();\n    }\n    void pop(int n) {\n        if(n == myque.front()) myque.pop_front();\n    }\n};\n\nclass Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        Monoqueue mq;\n        vector&lt;int&gt; res;\n        for(int i = 0; i &lt; nums.size(); ++i) { //scan all the elements\n            if(i &lt; k-1) mq.push(nums[i]);      //initialize the dequeue\n            else {\n                mq.push(nums[i]);           //push in new element, monotonize queue\n                res.push_back(mq.front());  //record the \"large front\"\n                mq.pop(nums[i-k+1]);        //start from the k-1 element, we pop the front of the monotonic queue\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#references","title":"References:","text":"<ul> <li>[L \u5916\u5546\u9762\u8a66\u8003\u984c] Sliding Window Maximum \u2013 Monotonic queue \u7684\u61c9\u7528</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/","title":"Quick Sort","text":"<p>Keywords: Sorting</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#description","title":"Description","text":"Quick Sort? <p><code>Quick Sort</code> is a sorting method that implements the <code>divide and conquer</code> idea. </p> <p>The related <code>Quickselect</code> algorithm is known as Hoare's selection algorithm, developed by Tony Hoare.</p> Efficiency? <p>Average time complexity: \\(O(n\\log n)\\)</p> <p>Worst time complexity: \\(O(n^2)\\)</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#algorithm-details","title":"Algorithm Details","text":"Steps <p>Step1. \"Pivot\": pick a <code>pivot</code> in the array. We normally pick the most left element.</p> <p>Step2. \"Partition\": scan the whole array. Compare the scanned element with the <code>pivot</code>: </p> <ul> <li><code>element &gt; pivot</code> -&gt; move the right part, get the right part.</li> <li><code>element &lt; pivot</code> -&gt; move the left part, get the left part.</li> </ul> <p>Step3. \"Recursive\": redo left and right parts separately with Step1 and Step2.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#diagram","title":"Diagram","text":"Example of \"Partition\" <p>Let's part the array below when setting the left element as the <code>pivot</code>:</p> <p> </p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#answer","title":"Answer","text":"Realization solution.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n//partition\nint partitionArray(vector&lt;int&gt; &amp;nums, int low, int high){\n        if(low &gt;= high) return -1;\n        int pivot = low, l = pivot + 1, r = high;\n        while(l &lt;= r){\n            if(nums[l] &lt; nums[pivot]) l++;\n            else if(nums[r] &gt;= nums[pivot]) r--; // larger and  equal are all located at the right side\n            else swap(nums[l], nums[r]);\n        }\n        swap(nums[pivot], nums[r]);\n        return r;\n    }\n\n//recursive body\nvoid quickSort(vector&lt;int&gt; &amp;nums, int low, int high){  \n    if(low &gt;= high) return;\n    swap(nums[low + rand() % (high - low + 1)], nums[low]);\n    int pivot = partitionArray(nums, low, high);\n    quickSort(nums,low, pivot);\n    quickSort(nums,pivot+1, high);\n}\n\nint main()\n{\n    vector&lt;int&gt; input = {4,1,5,3,6};\n    //cout&lt;&lt;\"input:\";\n    //for(auto i: input)\n    //{\n    //    if(i==input.back()){\n    //        cout&lt;&lt;i&lt;&lt;endl;\n    //    }\n    //    else cout&lt;&lt;i&lt;&lt;\",\";\n    //}\n    quickSort(input,0,input.size()-1);\n    vector&lt;int&gt; test = {1,3,4,5,6};\n    assert(output == test);\n    //cout&lt;&lt;\"output:\";\n    //for(auto i: input)\n    //{\n    //    if(i==input.back()){\n    //        cout&lt;&lt;i&lt;&lt;endl;\n    //    }\n    //    else cout&lt;&lt;i&lt;&lt;\",\";\n    //}\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#references","title":"References:","text":"<ul> <li>7.8. The Quick Sort</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/","title":"Topology Sort","text":"<p>Keywords: 2D map, BFS</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#situation","title":"Situation","text":"207. Course Schedule <p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [ai, bi]</code> indicates that you must take course <code>bi</code> first if you want to take course <code>ai</code>.</p> <ul> <li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#example","title":"Example","text":"Example Example 1:Example 2: <ul> <li>Input: <code>numCourses</code> = 2, <code>prerequisites</code> = [[1,0]]</li> <li>Output: true</li> <li>Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</li> </ul> <ul> <li>Input: <code>numCourses</code> = 2, <code>prerequisites</code> = [[1,0],[0,1]]</li> <li>Output: false</li> <li>Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#pseudo-code","title":"Pseudo-code","text":"Pseudo-code Pseudo-code<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan\"\n//--------------------------------------------\n\n//0. Results\n    &lt;type&gt; result\n//1. Define adjecent matrix &amp; ingoing degree\n    vector&lt;vector&lt;int&gt;&gt; adj(numCourses, vector&lt;int&gt;())\n    vector&lt;int&gt; degree(numCourses, 0)\n//2. Initialization\n    adj[][] &lt;-&gt; outgoing for each point\n    degree[] &lt;-&gt; ingoing for each point\n//3. Define Queue\n    queue&lt;int&gt; q\n//4. Initialize Queue\n    for all points{\n        //some condiction, e.g:\n        q.push(point -&gt; degree==0)\n    }\n//5. Queue's Size satisfy some function\n    while(q.size()!=0){\n        current = q.front\n        q pop top\n        operate result\n        for (next -&gt; adj[current])\n        {\n            if (--degree[next]==0/ some condition) \n                q.push(next)\n        }\n    }\n//6. Output result\n    return result\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#answer","title":"Answer","text":"Realization solution.c++<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan\"\n//--------------------------------------------\n\nbool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp;prerequisites) { \"kk\"\n    vector&lt;vector&lt;int&gt;&gt; adj(numCourses, vector&lt;int&gt;()); //good place!! initialize vector into fixed store size \n    vector&lt;int&gt; degree(numCourses, 0);\n    for (auto p: prerequisites)\n    {\n        //\"0 &lt;= 1\"\n        adj[p[1]].push_back(p[0]);//outgoing \n        degree[p[0]]++; //ingoing degree\n    }\n    queue&lt;int&gt; q;\n    for (int i = 0; i &lt; numCourses; i++)\n    {\n        if (degree[i] == 0)\n            q.push(i);\n    }\n    while(q.size() != 0)\n    {\n        int current = q.front();\n        q.pop();\n        numCourses--;\n        for (auto next: adj[current])\n        {\n            if (--degree[next]==0) q.push(next);\n        }\n    }\n    return numCourses==0;\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/","title":"Union-find","text":"<p>Keywords: Graph, Set</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#situation","title":"Situation","text":"Situation <p>Need to process the structure of <code>disjoint-set</code> (which has no overlapping with other disjoint subsets).</p> <p>A <code>union-find</code> algorithm can help to do below two things:</p> <ul> <li>Find: Determine which subset a particular element is in. This can be used for determining if two elements are in the same subset.</li> <li>Union: Join two subsets into a single subset. Here first we have to check if the two subsets belong to same set. If no, then we cannot perform union. </li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#question-example","title":"Question Example","text":"323. Number of Connected Components in an Undirected Graph <p>You have a graph of <code>n</code> nodes. You are given an integer <code>n</code> and an array <code>edges</code> where <code>edges[i] = [ai, bi]</code> indicates that there is an edge between <code>ai</code> and <code>bi</code> in the graph.</p> <p>Return the number of connected components in the graph.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#example","title":"Example","text":"Example Example 1:Example 2: <ul> <li>Input: <code>n</code> = 5, <code>edges</code> = [[0,1],[1,2],[3,4]]</li> <li>Output: 2</li> </ul> <ul> <li>Input: <code>n</code> = 5, <code>edges</code> = [[0,1],[1,2],[2,3],[3,4]]</li> <li>Output: 1</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#pseudo-code","title":"Pseudo-code","text":"Basic code structure Basic<pre><code>class Solution {\nprivate:\n    vector&lt;int&gt; parents;\n    int find(int x) {\n        while (x != parents[x]) {\n            parents[x] = parents[parents[x]];  // compression\n            x = parents[x];\n        }\n        return x;\n    }\n    bool unions(int p, int q) {\n        int x = find(p);\n        int y = find(q);\n        if (x != y) {\n            parents[x] = y;\n            return true;\n        }\n        return false;\n    }\npublic:\n    int countComponents(int n, vector&lt;pair&lt;int, int&gt;&gt;&amp; edges) {\n        parents.resize(n);\n        for (int i = 0; i &lt; n; i++) {\n            parents[i] = i;\n        }\n        int count = n;\n        for (const auto&amp; edge: edges) {\n            if (unions(edge.first, edge.second)) {  //for each edges check if they are \"unionable\"\n                --count;\n            }\n        }\n        return count;\n    }\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#answer","title":"Answer","text":"Simplified Solution solution.c++<pre><code>class Solution {\n    int countComponents(int n, vector&lt;pair&lt;int, int&gt;&gt;&amp; edges) {\n        vector&lt;int&gt; p(n);             //sets\n\n        iota(begin(p), end(p), 0);    //indexing\n        //equivalent sentence:\n        //for (int i=0; i&lt;n; i++)\n        //    p[i] = i;\n\n        for (auto&amp; edge : edges) {\n            int v = edge.first, w = edge.second;\n            while (p[v] != v) v = p[v] = p[p[v]];  //find1\n            while (p[w] != w) w = p[w] = p[p[w]];  //find2\n            p[v] = w;                 //union\n            n -= v != w;              \n        }\n        return n;\n    }\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#references","title":"References","text":"<p>C++ basic Union find solution, and BFS solution</p> <p>Short Union-Find in Python / Ruby / C++</p>"},{"location":"5_FullStack/","title":"\ud83d\udcbb Full Stack","text":""},{"location":"5_FullStack/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ul> <li> <p>Basic knowledge</p> </li> <li> <p>Programming language</p> </li> </ul>"},{"location":"5_FullStack/#references","title":"References:","text":"<ul> <li>Picture resource 1</li> </ul>"},{"location":"5_FullStack/BASIC/","title":"** \ud83d\udcbb Full Stack Concepts**","text":""},{"location":"5_FullStack/BASIC/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ol> <li> <p>Front End</p> </li> <li> <p>APIs</p> </li> <li> <p>Back End</p> </li> <li> <p>Networking</p> </li> </ol>"},{"location":"5_FullStack/BASIC/API/","title":"APIs","text":""},{"location":"5_FullStack/BASIC/API/#table-of-contents","title":"Table of contents:","text":"<ol> <li>REST API</li> </ol>"},{"location":"5_FullStack/BASIC/API/rest_api/","title":"REST API","text":"<p><code>REST API</code>, also known as <code>RESTful API</code>, is a web service that allows various clients  including browser apps to communicate with a server.</p>"},{"location":"5_FullStack/BASIC/API/rest_api/#basic-knowledge","title":"Basic Knowledge","text":""},{"location":"5_FullStack/BASIC/API/rest_api/#rest","title":"REST","text":"<code>REST</code>? <ul> <li> <p>Definition: Representational State Transfer. It describes a way how a clients and servers interact with each other. </p> </li> <li> <p>Property: REST conforms to specific architectural constraints, like stateless communication and cacheable data. </p> </li> </ul> Operating principle <p><code>REST</code> communication typically bases on HTTP protocol (but that isn't a requirement). Requests are made to a resource URI, possibly containing additional request data. Replies can be anything: <code>HTML</code>, <code>XML</code>, <code>JSON ([RFCs 8259](https://www.rfc-editor.org/rfc/rfc8259))</code>, <code>CSV</code>, <code>plain-text</code>, or even <code>raw binary data</code>. </p> Benifits <ul> <li>Scalability </li> <li>Independent </li> <li>Generality </li> <li>Latency </li> <li>Security </li> <li>Legacy </li> <li>Stateless </li> </ul>"},{"location":"5_FullStack/BASIC/API/rest_api/#rest-over-http-request-to-backend","title":"REST over HTTP (request to backend)","text":"notes <p>In computer programming, <code>create</code>, <code>read</code>, <code>update</code>, and <code>delete</code> (CRUD operations) are the four basic operations of persistent storage.</p> <p>Each letter in the acronym may be mapped to a Hypertext Transfer Protocol (HTTP) method:</p> CRUD HTTP Details Create <code>POST</code>, <code>PUT</code> if we have <code>id</code> or <code>uuid</code> submits new data to the server. Read <code>GET</code> retrieves resources. Update <code>PUT</code>, <code>PATCH</code> updates existing data (specific one). Delete <code>DELETE</code> removes data. Example <p>We can refer to the code described in Express.js to learn how to implement <code>CRUD</code>    operations using <code>Javascript</code>.</p>"},{"location":"5_FullStack/BASIC/API/rest_api/#rest-response-response-to-frontend","title":"REST Response (response to frontend)","text":"Number Meaning 2XX Success 4XX Client Problem 5XX Server Problem"},{"location":"5_FullStack/BASIC/API/rest_api/#implementation-sketch","title":"Implementation Sketch","text":""},{"location":"5_FullStack/BASIC/API/rest_api/#rest-api_1","title":"REST API","text":"<code>REST API</code>? <p><code>API</code>: application programming interface.</p> <p>To access a REST service, the client needs to know the <code>REST API</code> that the service if offering, so there must be documentation, and you need to write code according to that documentation. </p> <p>With <code>OpenAPI</code> this step is automated. With <code>OpenAPI</code>, there exists a machine parseable file that explains to computers how a <code>REST API</code> works. It tells the code what requests exist and what replies to expect.</p> <code>Open API</code>? <p>Suppose you have an OpenAPI implementation and an OpenAPI description file of a REST API. In that case, you can feed that description file to the OpenAPI implementation, and this implementation now knows how to use the REST API, it can generate human-readable documentation for you, or it could even auto-generate code to use the REST API in different languages.</p> Example: Happy Day! <p></p>"},{"location":"5_FullStack/BASIC/API/rest_api/#references","title":"References:","text":"<ul> <li> <p>Best practices for REST API design</p> </li> <li> <p>Open API vs. REST API - difference</p> </li> </ul>"},{"location":"5_FullStack/BASIC/Backend/","title":"Back End","text":""},{"location":"5_FullStack/BASIC/Backend/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Node.js.</p> </li> <li> <p>Express.js.</p> </li> <li> <p>Routing.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Backend/expressjs/","title":"Express.js","text":""},{"location":"5_FullStack/BASIC/Backend/expressjs/#definiton","title":"Definiton","text":"What <p><code>Express.js</code>, or simply <code>Express</code>, is a back end web application framework for building <code>RESTful APIs</code> with <code>Node.js</code>, released as free and open-source software under the MIT License. It has been called the de facto standard server framework for Node.js.</p> For <p>It is designed for building web applications and APIs. </p>"},{"location":"5_FullStack/BASIC/Backend/expressjs/#usage","title":"Usage","text":"Code using <p><pre>\n//declare using Express.js\nconst express = require('express')\nconst app = express() \n\u00a0\n//app starts a server listens on port 3000 for connections\nconst port = 3000\n\u00a0\n//app responds with \u201cHello World!\u201d for requests to the root URL (/) or route. For every other path, it will respond with a 404 Not Found.\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!')\n})\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p> Steps of running locally <ol> <li>Create a directory named <code>myapp</code>.</li> <li><code>cd</code> into the directory and run: <code>npm init</code>.</li> <li>Command prompts you for a number of things:<ul> <li>name: (RETURN for default).</li> <li>version of your application: (RETURN for default).</li> <li>entry point: (default: index.js) <code>app.js</code></li> </ul> </li> <li>Install express as a dependency (choose one):<ul> <li>install Express in the <code>myapp</code> directory and save it in the dependency list: <code>npm install express</code> </li> <li>install Express in the <code>myapp</code> directory temprarily and not add it to the dependency list: <code>npm install express --no-save</code> </li> </ul> </li> <li>Run the app with command: <code>node app.js</code></li> <li>Then, load <code>http://localhost:&lt;port&gt;/</code> in a browser to see the output.</li> </ol>"},{"location":"5_FullStack/BASIC/Backend/expressjs/#implement-routing","title":"Implement Routing","text":"<p>We have already learn Backend Routing. Here, let's see how to implement <code>Routing</code> by using Express.js.</p> Routing example <p>Please go to Hoppscotch for implementing <code>POST</code>, <code>PUT</code> and <code>DELETE</code></p> <p><pre>\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\u00a0\napp.use(bodyParser.json());\n\u00a0\napp.get('/articles', (req, res) =&gt; {\n  const articles = [];\n  // code to retrieve an article...\n  res.json(articles);\n});\n\u00a0\napp.post('/articles', (req, res) =&gt; {\n  // code to add a new article...\n  res.json(req.body);\n});\n\u00a0\napp.put('/articles/:id', (req, res) =&gt; {\n  const { id } = req.params;\n  // code to update an article...\n  res.json(req.body);\n});\n\u00a0\napp.delete('/articles/:id', (req, res) =&gt; {\n  const { id } = req.params;\n  // code to delete an article...\n  res.json({ deleted: id });\n});\n\u00a0\napp.listen(3000, () =&gt; console.log('server started'));\n</pre></p>"},{"location":"5_FullStack/BASIC/Backend/expressjs/#references","title":"References:","text":"<ul> <li>Express.js wiki</li> </ul>"},{"location":"5_FullStack/BASIC/Backend/nodejs/","title":"Node.js","text":"<p>Node.js represents a \"JavaScript everywhere\" paradigm, unifying web-application development around a single programming language, rather than different languages for server-side and client-side scripts.</p> What? <p><code>Node.js</code> is an open-source server environment. <code>Node.js</code> is cross-platform and runs on Windows, Linux, Unix, and macOS. </p> <p><code>Node.js</code> is a back-end JavaScript runtime environment. </p> <p><code>Node.js</code> runs on the V8 JavaScript Engine and executes JavaScript code outside a web browser.</p>"},{"location":"5_FullStack/BASIC/Backend/nodejs/#references","title":"References:","text":"<ul> <li>Node.js wiki</li> </ul>"},{"location":"5_FullStack/BASIC/Backend/routing/","title":"** Backend Routing**","text":""},{"location":"5_FullStack/BASIC/Backend/routing/#definiton","title":"Definiton","text":"When? (background) <p>client requests to a particular <code>endpoint</code> [ &lt;=&gt; <code>URI</code> + <code>HTTP</code> request method (<code>GET</code>, <code>POST</code>, ...) ]. </p> What? (import routing) <p>To handle the request, in <code>backend routing</code>, the server handles every request by responding to the client with a code <code>201</code>(I got that thing you want!) or a <code>404</code>(Nope, I don\u2019t have that!).</p> Situation? (example) <p>Let\u2019s say a user fills out a form with his name, address, favorite hobby and sends a <code>POST</code> request by submitting the form. That <code>GET request url</code> is sent to the server, and the server serves back the <code>requested url</code> to the client as a static file that is stored on the server. </p> <p>If the server doesn\u2019t have the requested file, then it returns a <code>404</code> response error. </p>"},{"location":"5_FullStack/BASIC/Backend/routing/#usage","title":"Usage","text":"Code using Express.js syntax <p><code>app.METHOD(PATH, HANDLER)</code></p> <ul> <li><code>app</code>: an instance of express.</li> <li><code>METHOD</code>: an HTTP request method, in lowercase.</li> <li><code>PATH</code>: a path on the server.</li> <li><code>HANDLER</code>: the function executed when the route is matched.</li> </ul> Example code <p><pre>\n//Respond with Hello World! on the homepage:\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!')\n})\n</pre></p> <p><pre>\n//Respond to POST request on the root route (/), the application\u2019s home page:\napp.post('/', (req, res) =&gt; {\n    res.send('Got a POST request')\n})\n</pre></p> <p><pre>\n//Respond to a PUT request to the /user route:\napp.put('/user', (req, res) =&gt; {\n    res.send('Got a PUT request at /user')\n})\n</pre></p> <p><pre>\n//Respond to a DELETE request to the /user route:\napp.delete('/user', (req, res) =&gt; {\n    res.send('Got a DELETE request at /user')\n})\n</pre></p>"},{"location":"5_FullStack/BASIC/Backend/routing/#handlers-for-routing","title":"Handlers for Routing","text":"<p>Open the boxes below to see the examples \ud83d\udc47</p> Four classes of handler 1\u00b0 <code>A single callback function</code> can handle a route <p><pre>\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\u00a0\napp.get('/', (req, res) =&gt; {\n    res.send('Hello from A!')\n})\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p> 2\u00b0 <code>More than one callback function</code> can handle a route (use <code>next()</code> to control the next callback.) <p><pre>\nconst express = require('express')\nconst app = express() \nconst port = 3000\n\u00a0\napp.get('/', (req, res, next) =&gt; {\n    console.log('the response will be sent by the next function ...')\n    next()\n}, (req, res) =&gt; {\n    res.send('Hello from B!')\n})\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p> 3\u00b0 <code>An array of callback functions</code> can handle a route <p><pre>\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\u00a0\nconst cb0 = function (req, res, next) {\n    console.log('CB0')\n    next()\n}\n\u00a0\nconst cb1 = function (req, res, next) {\n    console.log('CB1')\n    next()\n}\n\u00a0\nconst cb2 = function (req, res) {\n    res.send('Hello from C!')\n}\n\u00a0\napp.get('/', [cb0, cb1, cb2])\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p> 4\u00b0 <code>A combination of independent functions and arrays of functions</code> can handle a route <p><pre>\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\u00a0\nconst cb0 = function (req, res, next) {\n  console.log('CB0')\n  next()\n}\n\u00a0\nconst cb1 = function (req, res, next) {\n  console.log('CB1')\n  next()\n}\n\u00a0\napp.get('/', [cb0, cb1], (req, res, next) =&gt; {\n  console.log('the response will be sent by the next function ...')\n  next()\n}, (req, res) =&gt; {\n  res.send('Hello from D!')\n})\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p>"},{"location":"5_FullStack/BASIC/Backend/routing/#references","title":"References:","text":"<ul> <li> <p>Frontend Routing vs Backend Routing</p> </li> <li> <p>Express.js wiki</p> </li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/","title":"**  Front End**","text":""},{"location":"5_FullStack/BASIC/Frontend/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Mock</p> </li> <li> <p>Auth.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Frontend/Auth/","title":"Auth","text":""},{"location":"5_FullStack/BASIC/Frontend/Auth/#auth_1","title":"Auth","text":"Auth? <p><code>Auth</code> points to Authentication and Authorization. They come from REST API communication. </p> <ul> <li>Without Authentication \u2192 401 (Do not know who you are).</li> <li>Without Authorization \u2192 403 (Do not have permission to access resources).</li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#token","title":"Token","text":"<p>To realize the two Auth principles. Including <code>Token</code> becomes essential.</p> Why <code>Token</code>? <p>Compared with username &amp; password, tokens are temporary, stored in browser or device. When sessions complete or exceed the expiration time, not like username &amp; password, they are automatically destroyed.</p>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#jwtio","title":"JWT.io","text":"<code>JWT.io</code> for <code>Token</code> generation <p><code>JWT.io</code> is constructed by below components:</p> <ul> <li>Header: Identify:<ul> <li>Which algorithm(normally HS256) to generate the signature.</li> <li>What token type (Here JWT).</li> </ul> </li> <li>Payload: A set of claims.</li> <li>Signature: Securely validates the token, calculated by encoding the header and payload using <code>Base64URL Encoding [RFC 7519](https://www.rfc-editor.org/rfc/rfc7519)</code></li> </ul> <p> </p>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#how-to-use-token","title":"How to use Token","text":"How to apply <code>Token</code>? <p>We inject tokens in the HTTP header.</p>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#oauth-20","title":"OAuth 2.0","text":"Why need two <code>Tokens</code>? <p>It limits the <code>blast radius</code> of a <code>credential attack</code>.</p> Credential attack! Username-Password Auth <p> </p> One Token Auth <p> </p> Two Token Auth (OAuth 2.0) <p> </p>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#implement-oauth-20","title":"Implement OAuth 2.0","text":"<p>For the two tokens, one is named <code>Access Token</code>; another is named <code>Refresh Token</code>.</p> Difference between the two tokens? <ul> <li> <p><code>Access token</code> have <code>\"Time-to-live\"</code>, which is the maximum that the access token will be valid for use within the application.</p> </li> <li> <p><code>Refresh tokens</code> have longer expiration times than access tokens. The exsistance of <code>refresh tokens</code> allows you to use shorter lifetimes for access tokens WITHOUT having to request user credentials multiple times.</p> </li> </ul> Iterations Diagram <p> </p> <p> </p> <p> </p> <p> </p> <p> </p>"},{"location":"5_FullStack/BASIC/Frontend/Mock/","title":"Mock","text":""},{"location":"5_FullStack/BASIC/Frontend/Mock/#mock_1","title":"Mock","text":"Mock? <p><code>Mock</code> means \"fake\". The point of using <code>mock</code> is for <code>parallelize development</code>. When we want to test the frontend, if the backend is still in development, we can use a <code>mock server</code> or <code>mock data</code> for temporal use.</p> When use mock? <ol> <li>Testing (unit test, integration test).</li> <li>Parallelize work (frontend and backend).</li> <li>Develop without the payment \ud83d\udcb0\ud83d\udcb0\ud83d\udcb0 for real server responses and requests.</li> </ol>"},{"location":"5_FullStack/BASIC/Frontend/Mock/#mock-server","title":"Mock Server","text":"Mock Server <p>Definition: imitate a real server by providing realistic mock responses to requests.</p> <p>Properties:</p> <ul> <li>Same abstract interface/contract (e.g. REST API).</li> <li>Not a real implementation.</li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/Mock/#mock-object","title":"Mock Object","text":"Mock Object <p>Definition: in OOP (object-oriented programming), <code>mock object</code> is a simulated object that mimics the behavior of real objects in controlled ways (e.g. Mock class, Mock struct).</p>"},{"location":"5_FullStack/BASIC/Frontend/uri/","title":"Uniform Resource Identifier(URI)","text":"<p>In web development we always say <code>endpoints</code>. The concept refers to <code>URI</code> + <code>HTTP request method</code> (GET, POST, etc.). So what is <code>URI</code>, what is the difference between <code>URI</code> and <code>URL</code>?</p>"},{"location":"5_FullStack/BASIC/Frontend/uri/#definition","title":"Definition","text":"What is <code>URI</code> and <code>URL</code> <ul> <li> <p><code>URI</code>: Uniform Resource Identifier.</p> </li> <li> <p><code>URL</code>: Uniform Resource Locator. </p> </li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/uri/#difference","title":"Difference","text":"Difference between <code>URI</code> and <code>URL</code>? <ul> <li><code>URI</code> identifies a resource and differentiates it from others by using a name, location, or both. </li> <li><code>URL</code> identifies the web address or location of a unique resource. </li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/uri/#syntax","title":"Syntax","text":"Syntax of <code>URI</code>/<code>URL</code> <p><code>scheme:[//authority]path[?query][#fragment]</code></p> <p> </p> SchemeAuthority ComponentPathQuery ComponentFragment Component <p>The first component of a URI defines the addressing system: </p> <ol> <li>in some cases, it is a protocol used to access a resource. </li> <li>meanwhile, other techniques may NOT specify any protocol.</li> </ol> <p><code>Scheme</code> can contain any combination of letters, digits, plus signs, periods, or hyphens followed by a colon. The most common URI schemes include <code>HTTP</code>, <code>HTTPS</code>, <code>FTP</code>, <code>mailto</code>, and <code>file</code>.  </p> HTTP, HTTPS, and FTP <ol> <li><code>HTTP</code> (Hypertext transfer protocol) \u2013 allows users to access data from web pages using hypertext links.</li> <li><code>HTTPS</code> (Hypertext transfer protocol secure) \u2013 protects data transmission between the user\u2019s browser and site.</li> <li><code>FTP</code> (File transfer protocol) \u2013 used for a file transfer between different devices via a network.</li> </ol> <p>e.g. <code>file:website.com/pathtofile/intro.pdf</code></p> <p>An optional component preceded by a double slash and terminated by a slash, a question mark, or a hash symbol. It consists of three sub-components:</p> <ol> <li>Userinfo \u2013 includes a <code>username</code> and a <code>password</code> separated by a colon.</li> <li>Host \u2013 consists of either an <code>IP address</code> or a <code>registered name</code>. The IP address should be inserted into brackets.</li> <li>Port \u2013 a <code>protocol</code> used for connecting the server. It is an optional sub-component followed by a colon.</li> </ol> <p>e.g. <code>file:(//)website.com/pathtofile/intro.pdf</code></p> <p>The thrid component contains a sequence of data segments that describes the location of a resource in a directory structure. It should be empty or separated by a slash. </p> <p>e.g. <code>telnet://192.0.2.16:80/ </code> (valid URI with an empty path)</p> <p>e.g. <code>foo://info.example.com ?fred</code> (valid URI with an empty path)</p> <p>e.g. <code>file:(//)website.com/pathtofile/intro.pdf</code></p> <p>A component that contains a query string of non-hierarchical data. It is often a string of <code>key=value</code> pairs. This component is preceded by a <code>question mark</code>. </p> <p>e.g. <code>https://example.org/test/test1?search=test-question#part2</code></p> <p>This optional component includes a fragment identifier that provides the direction to a secondary resource. A fragment is preceded by a <code>hash symbol</code> and terminated by the end of a URI.</p> <p>e.g. <code>https://example.org/test/test1?search=test-question#part2</code></p>"},{"location":"5_FullStack/BASIC/Frontend/uri/#references","title":"References:","text":"<ul> <li> <p>URI vs URL: Differences and When to Use Them</p> </li> <li> <p>picture resource 1</p> </li> <li> <p>picture resource 2</p> </li> </ul>"},{"location":"5_FullStack/BASIC/Web/","title":"**  Computer Networking**","text":""},{"location":"5_FullStack/BASIC/Web/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Performance Indices, for basic indices knowledge.</p> </li> <li> <p>OIS, for system details of networking.</p> </li> <li> <p>Protocols, for only want to learn protocols.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/Indices/","title":"Performance Indices","text":""},{"location":"5_FullStack/BASIC/Web/Indices/#speed","title":"Speed","text":"Networking <code>speed</code>? <p>The data (bit: <code>0</code> or <code>1</code>) transmission speed.</p> <p>e.g. <code>bps</code> or <code>bit/sec</code> -- bits per second</p> <ul> <li><code>Mbps</code>: 1,000,000 bit/s, is how many millions of bits a network can theoretically transfer each second.   </li> <li><code>mbps</code>: 0.001 bit/s.</li> <li><code>kbps</code>: 1,000 bit/s.</li> <li><code>Gbps</code>: 1,000,000,000 bit/s.</li> </ul>"},{"location":"5_FullStack/BASIC/Web/Indices/#bandwidth","title":"Bandwidth","text":"Networking <code>bandwidth</code>? <p>Maximum amount of data your connection can handle at a moment (normally a second).</p> <p>e.g. Ethernet bandwidth: <code>10 Mbit/s</code> \u2192 the maximum amount of data can be transferred in a second is 10 Mbit.</p>"},{"location":"5_FullStack/BASIC/Web/Indices/#throughput","title":"Throughput","text":"Networking <code>throughput</code>? <p>The amount of data passing through a network (or channel, or interface) in a unit time.</p> <p>e.g. We can understand it as real-time \"traffic\" on a \"bandwidth lane\". But the number of \"cars\" cannot be more than the number the \"bandwidth lane\" allows.</p>"},{"location":"5_FullStack/BASIC/Web/Indices/#delay","title":"Delay","text":"Networking <code>delay</code>? <p>The time (<code>s</code>) required to travel from one end of a network to another end.</p> <p> </p> <p>There are 4 types of delays, corresponding to the concepts shown in the picture above:</p> Transmission delay <p>The <code>transmission delay</code> measures the speed of data. </p> <p>It's the time from when the first bit of a file reaches a link to when the last bit reaches the link.</p> \\[Transmission\\:Delay = \\dfrac{L(bis)}{R(bits/sec)}\\] <p>\\(L\\) is the file size (bits). \\(R\\) is the transmission speed (bits/sec).</p> Propagation delay <p>The <code>propagation delay</code> measures the speed of the medium. </p> <p>It's the amount of time a bit on the link needs to travel from the source to the destination, where the speed is dependent on the medium of communication.</p> \\[Propagation\\:Delay = \\dfrac{D(m)}{S(m/s)}\\] <p>\\(D\\) is the distance (meter). \\(S\\) is the propagation speed (meter/sec).</p> Queuing delay <p>The <code>queuing delay</code> measures the buffering rate. </p> <p>If a packet arrives at its destination and the destination is busy, it will not handle that packet immediately. Instead, the packet has to wait in the <code>input/output queues</code>. </p> <p>This delay depends on the following factors:</p> <ul> <li>The number of packets arriving in a short time interval.</li> <li>The transmission capacity.</li> <li>The size of the queue.</li> </ul> Processing Delay <p>The <code>processing delay</code> measures the speed of the processor (router or host machine).</p> <p>It is the time taken by a processor to process the data packet. </p>"},{"location":"5_FullStack/BASIC/Web/Indices/#round-trip-time","title":"Round-Trip Time","text":"Networking <code>Round-Trip time</code>? <p>The duration in milliseconds (ms), taken by the network to go from a start-point sending a request to the start-point getting the response that the end-point has received the data.</p>"},{"location":"5_FullStack/BASIC/Web/Indices/#bandwidth-delay-product","title":"Bandwidth-Delay Product","text":"Networking <code>bandwidth-delay product</code>? \\[Transmission\\: delay\\times Bandwidth\\]"},{"location":"5_FullStack/BASIC/Web/Indices/#references","title":"References","text":"<p>What are the different kinds of computing network delays?</p> <p>Picture resource</p>"},{"location":"5_FullStack/BASIC/Web/SSH/","title":"SSH and HTTPS","text":""},{"location":"5_FullStack/BASIC/Web/SSH/#https","title":"HTTPS","text":"HTTPS?"},{"location":"5_FullStack/BASIC/Web/SSH/#ssh","title":"SSH","text":"SSH? <p><code>SSH</code> is Secured Shell, which is a protocol that needs to use public-key and private-key cryptography to finish communication authority. SSH is like HTTPS, which is much safer than HTTP.</p>"},{"location":"5_FullStack/BASIC/Web/OIS/","title":"**  OIS**","text":""},{"location":"5_FullStack/BASIC/Web/OIS/#ois-model","title":"OIS Model","text":"<p><code>OIS</code> (Open Systems Interconnection) model can be split into 7 levels:</p> <p> </p>"},{"location":"5_FullStack/BASIC/Web/OIS/#ois-catlog","title":"OIS Catlog","text":"<ol> <li> <p> Physical Layer.</p> </li> <li> <p> Data Link Layer.</p> </li> <li> <p> Network Layer.</p> </li> <li> <p>Transport Layer.</p> </li> <li> <p>Session Layer.</p> </li> <li> <p>Presentaion Layer.</p> </li> <li> <p>Application Layer.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/application/","title":"Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/application/#_1","title":"****","text":"?"},{"location":"5_FullStack/BASIC/Web/OIS/application/#references","title":"References","text":""},{"location":"5_FullStack/BASIC/Web/OIS/datalink/","title":"Data Link Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#definition","title":"Definition","text":"Demand? <p>The <code>bitstream</code> can cause errors (see physical layer's cons) when it is transmitted on a medium. We need a new layer that provides high-quality (error free) data transfer services to topper layers (such as network layer).</p> <pre><code>graph LR\n    A[Network Layer] -- packets --- B[Data Link Layer]\n    B -- \"frames (bit-by-bit)\" --- C[Physical Layer]</code></pre> For? <p><code>Data Link Layer</code> has below functions:</p> <ol> <li>Framing. </li> <li>Addressing.</li> <li>Transparent Transmission.</li> <li>Error Detection</li> <li>Error Correction</li> <li>Flow Control</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#abstracting","title":"Abstracting","text":"From <code>physical layer</code> to <code>data link layer</code> <p>We know that in the <code>physical layer</code>, information is communicated with bit stream through cable or WIFI. </p> <p>To abstract the <code>data link Layer</code>, we classify the \"communication channel\" in this layer into two types:</p> <ol> <li>Point-to-point communication channel (use P2P protocol).</li> <li>Broadcast communication channel (use CSMA/CA protocol).</li> </ol> <p> </p> Notice! <p>To understand the <code>data link layer</code> better, we think about the case of broadcasting first. </p> <p>LAN (local area network) is a computer network that has the broadcasting function.</p> <p>Furthermore, from all the <code>LAN</code> products, we peak <code>Ethernet</code>, which fllow the standard of DIX Ethernet V2 or IEEE 802.3.</p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#anatomy","title":"Anatomy","text":"Dissect the <code>data link layer</code> <p>In order to make the <code>data link layer</code> more suitable for  various <code>LAN</code> standards, the 802 committee divided the <code>data link layer</code> into two sub-layers:</p> <ul> <li>Logical Link Control (LLC): provides the logic for the data link.</li> <li>Medium Access Control (MAC)\uff1aprovides controls for accessing the transmission medium. It is transparent to <code>LLC</code> sublayer</li> </ul> <p> </p> <p>Let's go to check them one by one! \ud83d\udef8\ud83d\udef8 Drink some coffee first!  </p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#1-mac-sublayer","title":"1. MAC Sublayer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#mac-address","title":"Mac address","text":"MAC Address? <p><code>MAC Address</code> is also called as the <code>physical Address</code> of a network device. <code>MAC Address</code> is used by the <code>MAC sublayer</code>. <code>MAC Address</code> is worldwide unique (since millions of network devices exist, we need to uniquely identify each). </p> <p></p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#functions-of-mac-sublayer","title":"Functions of MAC Sublayer","text":"<p><code>MAC</code> sublayer is responsible for:</p> <ol> <li>Framing</li> <li>Addressing</li> <li>Transparent Transmission</li> <li>Control physical medium access</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#11-framing","title":"1.1 Framing","text":"<code>Framing</code>? <p>Transfer network data (a stream of <code>bits</code>) into <code>frames</code>, which is discernible blocks of information.</p> <code>Frame</code>? <p>Transferred <code>protocol data units</code> (PDUs) in the <code>data link layer</code>.</p> Types of <code>Framing</code> <p> </p> <p>There are two types of <code>Framing</code>:</p> <ul> <li> <p>Fixed-size Framing:</p> <p>The <code>frame</code> is of fixed size. No need to add delimiters.</p> Con <p>When the data size is smaller than the fixed frame size, the frame itself will suffer   internal fragmentation. We need to <code>pad</code> it.</p> </li> <li> <p>Variable-size Framing:</p> <p>The <code>frame</code> needs to indicate the begin and end to be distinguished.</p> Ways to implement <ol> <li> <p><code>Length field</code> : define the length in the frame.</p> <ul> <li>e.g. Ethernet (802.3) \u2192 <code>Ethernet frame</code>.</li> <li>Cons: Length field may get corrupted sometimes.</li> </ul> </li> <li> <p><code>ED (End Delimeter)</code> : add end delimiter (like Period in English).</p> <ul> <li>e.g. Token Ring (802.5).</li> <li>Cons: The end delimiter can appear in the data.</li> <li>Types: <ul> <li>Character/Byte Stuffing (see later in 1.2 Transparent transmission)</li> <li>Bit Stuffing</li> </ul> </li> </ul> </li> </ol> </li> </ul> Schematic Diagram of <code>Ethernet frame</code> <p>Here below is the <code>Ethernet frame</code> format:</p> <p> </p> <ol> <li> <p>The Preamble area is used by the receiving interface\u2019s circuitry to determine when a frame arrives and the amount of time between encoded bits (called <code>clock recovery</code>).</p> </li> <li> <p>The SFD and Preamble area indicates when the frame start.</p> </li> <li> <p>The Basic Frame (/Frame) field starts from the <code>Destination (DST)</code> and <code>Source (SRC)</code> address fields. </p> </li> <li> <p>Both DST (destination) and SRC (source) areas are all MAC addresses or known by other names such as:</p> <ul> <li>Link-layer address</li> <li>802 address</li> <li>Hardware address</li> <li>Physical address</li> </ul> </li> <li> <p>The Type/Lenth area identifies the type of data that follows the header. It is for layer three using layer two frames. It indicates which layer three's protocol is used. Popular values used with <code>TCP/IP</code> networks include:</p> <ul> <li>IPv4 (0x0800)</li> <li>IPv6 (0x86DD)</li> <li>ARP (0x0806).</li> </ul> </li> <li> <p>The DST, SRC, and Type/Lenth are composed as the <code>MAC header</code>.</p> </li> <li> <p>In the MAC Client Data field, we ignore the optional parts and only focus on the Payload area, which is the data the frame carries from source to destination. The Payload data is <code>encapsulated</code> by the layer three.</p> </li> <li> <p>The FCS (frame check sequence) is used to identify any errors in the frame.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#12-addressing","title":"1.2 Addressing","text":"<p>As we know, <code>MAC address</code> is unique for each device. Thus, we can encapsulate the unique <code>MAC address</code> -- the source (<code>SRC</code>) and destination (<code>DST</code>) address in the header of each <code>frame</code> to ensure node-to-node delivery.</p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#13-transparent-transmission","title":"1.3 Transparent transmission","text":"What is the <code>transparent transmission</code>? <p>It describes a phenomenon of data transmission without error. It's as if the transmission itself doesn't exist.</p> Why? <ul> <li>If the data transmitted is printable characters (95 in total) in <code>ASCII</code> code, everything is okay.</li> <li>However, if the data transmitted contains unprintable characters, errors will show up.</li> </ul> How? <p>Remember <code>Variable-size Framing</code>? Besides using the <code>length field</code> to implement <code>frame</code>, we can also refer the <code>ED (End Delimeter)</code> method! Here we use <code>Byte Stuffing</code>(or <code>Character Stuffing</code>) \ud83d\udc24.</p> Implement <code>Byte Stuffing</code> <p></p> <p>As the diagram shows above, we give the following explanations:</p> <ol> <li><code>Flag</code> can be <code>SOH</code> or <code>EOT</code>. </li> <li><code>SOH</code> is the head part of the frame. We can use the <code>Preamble</code>+<code>SFD</code> areas as an example.</li> <li><code>EOT</code> is the tail part of the frame. We can use the <code>Carrier Extension</code> areas as an example.</li> <li>When the <code>MAC Client Data</code> field exists unprintable characters such as <code>Flag</code> (<code>SOH</code> or <code>EOT</code>) OR <code>ESC</code>, we can add an extra <code>escape character</code> -- <code>ESC</code> to diminish ambiguation.</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#14-control-physical-medium-access","title":"1.4 Control physical medium access","text":"<p>No more explanations here; just know it as literal meaning.</p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#2-llc-sublayer","title":"2. LLC Sublayer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#functions-of-llc-sublayer","title":"Functions of LLC Sublayer","text":"<p><code>LLC</code> sublayer is responsible for:</p> <ol> <li>Error Detection</li> <li>Error Correction</li> <li>Flow Control</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#21-error-detection","title":"2.1 Error Detection","text":"What Error? <p>When data is transmitted, ,<code>0</code> can possibly be changed into <code>1</code>, which we call it as <code>bit errors</code>. It can be caused by: - Noise - Interference - Distortion - Bit synchronization errors</p> <code>BER</code> (Bit Error Rate) <p><code>BER</code> (Bit Error Rate): The percentage of incorrect transmitted bits to the total number of transmitted bits.</p> <p>\\(BER = \\frac{Error\\;Bits}{Transmitted\\;Bits}\\)</p> How to detect? <p><code>CRC</code> (Cyclic redundancy check) is the method we use for error detection. </p> <p>Below diagram shows the idea of <code>CRC</code>:</p> <p> </p> <p>A good link for checking the methods for Error Detection: Error Detection in Computer Networks</p> Unreliable Transmission Protocols <p>Generally, on the transmission link with poor communication quality (<code>errors</code> exists), we will add the <code>acknowledgement</code> and <code>retransmission</code> mechanisms to make sure the correctness of frame data. </p> <p>Without the two mechanisms we call the protocol an <code>unreliable transmission protocol</code>, such as:</p> <ul> <li>PPP (for Point-to-point communication)</li> <li>CSMA/CD (for Broadcast communication)</li> <li>UDP (for the third layer, we will mention it later)</li> </ul>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#22-error-correction","title":"2.2 Error Correction","text":"<p>Just for simple knowing:</p> <p>Error Correction Techniques:</p> <ol> <li> <p>Backward Error Correction (Retransmission) \u2212  If the receiver detects an error in the incoming frame, it requests the sender to retransmit the frame. It is a relatively simple technique. But it can be efficiently used only where retransmitting is not expensive, as in fiber optics and the time for retransmission is low relative to the requirements of the application.</p> </li> <li> <p>Forward Error Correction \u2212  If the receiver detects some error in the incoming frame, it executes the error-correcting code that generates the actual frame. This saves the bandwidth required for retransmission. It is inevitable in real-time systems. However, if there are too many errors, the frames need to be retransmitted.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#23-flow-control","title":"2.3 Flow Control","text":"<p>It is about processing the frame flow when transmitting. Details about the concepts see in Flow Control in Data Link Layer. There are basically two type of methods:</p> <p> </p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#devices-in-data-link","title":"Devices in Data Link","text":"<p>Finally, let's check some devices used in the <code>Data Link Layer</code>. </p> <code>Network Interface Card (NIC)</code> <p> </p> <p>Computer output data, through the <code>Network Interface Card</code> (NIC / Ethernet Card), will become <code>Ethernet frames</code>. <code>Network card</code> will also complete some broadcast link management (CDMA/CD implementation).</p> <code>Network bridge</code> <p>A bridge can be used to: - Interconnect two <code>LANs</code> together. - Separate network <code>segments</code>, which is a section of a network separated by <code>bridges</code>, <code>switches</code>, and <code>routers</code>.</p> <p> </p> <code>Ethernet switches</code> <p>Picture first: \ud83d\udc40  </p> <p>If you have ever traveled to any computer room before, you must have seen the sightseeing below: </p> <p>Roughly, we can use <code>Hub</code>, <code>Switch</code>, and <code>Router</code> for <code>Ethernet switches</code>.  </p> <p>But what is the difference?</p> Hub <p><code>Hub</code> is a type of device that\u2019s commonly used as a connection point for various devices in a <code>Local Area Network (LAN)</code>.</p> <ul> <li>It works by receiving packets that arrive at one of its multiple ports, copying the packets, and sending them to its other ports so that all <code>LAN</code> segments can see the data.</li> </ul> Watch out! <p><code>Hub</code> cannot handle the transmit collision. Once the collision happens, the collision will repeat and impact all the devices it connects to. That's why we should use <code>Switch.</code></p> Switch (switching hub) <p><code>Switch</code> is a more efficient, more intelligent version of a <code>hub</code>.</p> <ul> <li> <p>It uses packet switching to receive and forward data to its intended destination within a network.</p> </li> <li> <p>Rather than blindly passing along data to all devices in a network as <code>Hub</code>, a switch records and \"learn\" the addresses of the connected devices.</p> </li> <li> <p>Thus, <code>switch</code> can isolated <code>conflict domains</code> (which refers to the range that only one device can send information at a time).</p> </li> </ul> <p> </p> Router <p><code>Router</code> is the most intelligent and complex of the three network connection devices. <code>Router</code> is the device in the <code>network layer</code>.</p> <ul> <li> <p>Rather than just forwarding data packets to other devices in a single network, routers are designed to forward data packets between two or more networks. It also directs traffic between those networks.</p> </li> <li> <p><code>Router</code>'s function = <code>Switch</code> + <code>Hub</code> + More.</p> </li> <li> <p>Thus, <code>router</code> can isolated <code>broadcast domain</code> (which refers to the range when the site sends out a broadcast signal, all the devices can receive the signal).</p> </li> </ul> <p>Okay, no more knowledge today! Enough details! Cheers the coffee \u2615\u2615  </p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#references","title":"References","text":"<p>Picture Resource 1</p> <p>Picture Resource 2</p> <p>Picture Resource 3</p> <p>Picture Resource 4</p> <p>Picture Resource 5</p> <p>Picture Resource 6</p> <p>Picture Resource 7</p> <p>Error Detection and Correction in Data link Layer</p> <p>Picture Resource 8</p> <p>Picture Resource 9</p> <p>Picture Resource 10</p> <p>Networking Fundamentals: OSI 7 - Layer 2 - the data link layer - Part 2</p> <p>THE DIFFERENCE BETWEEN A HUB, SWITCH, &amp; ROUTER</p>"},{"location":"5_FullStack/BASIC/Web/OIS/network/","title":"Network Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/network/#definition","title":"Definition","text":"Demand? <p>Data need to be transferred from one location to another.</p> Why don't we use <code>Data Link Layer</code>? <p>If we need the data to be transferred from the western coast <code>LAN</code> to the eastern coast <code>LAN</code> across the US, we have the below plans:</p> <ul> <li>Plan A: LAN is limited locally. So we should use other long-distance links such as using <code>PPP</code>/<code>MPLS</code>/<code>ATM</code>. Obviously, building specific <code>p2p</code> networking is costly and messy. </li> <li>Plan B: The <code>protocols</code> used in the <code>Layer2 network</code> are not always the same. Compatibility is a problem.</li> </ul> <p> </p> How? <p>To solve this problem, we need to import a new layer. <code>Layer3</code> -- <code>Network Layer</code> is where <code>Internetworking</code> comes from. </p> <p>We need to use <code>IP protocol</code> and <code>IP packets</code>.</p> <p></p>"},{"location":"5_FullStack/BASIC/Web/OIS/network/#ip-packets","title":"IP packets","text":"<code>IP packets</code>? <p><code>IP packets</code> is the data unit used within the Internet Protocol. It is similar to <code>frame</code> in the <code>Layer 2</code>. </p> <p><code>Datagram</code> is an alternative term for \"packet\".</p> Structure <p>There are two types of IP packets for <code>IPv4</code> (Internet Protocol version 4) and <code>IPv6</code> (Internet Protocol version 6):</p> <p> </p>"},{"location":"5_FullStack/BASIC/Web/OIS/network/#references","title":"References","text":"<p>Networking Fundamentals: OSI 7 - Layer 3 - the network layer - Part 1</p>"},{"location":"5_FullStack/BASIC/Web/OIS/physical/","title":"Physical Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/physical/#definition","title":"Definition","text":"What? <p>Instead of representing physical mediums, <code>physical layer</code> is a standard:</p> <ul> <li>Electrical Specification: The logic level is used in <code>+10v ~ +15v</code> to represent binary <code>0</code>; <code>-10v ~ -15v</code> to represent binary <code>1</code>.</li> <li>Physical Specification: Such as timing, rates, distances, modulation, and connectors.</li> <li>Rules: For transmission media interfaces -- transmission and reception of raw <code>bit streams</code>.</li> </ul>"},{"location":"5_FullStack/BASIC/Web/OIS/physical/#transmission-mediums","title":"Transmission Mediums","text":"Transmission Mediums <p>There are three major types:</p> <ol> <li>Copper (electrical).</li> <li>Optical Fiber (light).</li> <li>WIFI (RF).</li> </ol> Optical Fiber for network? <p>Principles of <code>optical fiber</code> communication:</p> <pre><code>graph LR\n    A[\"Device (network card)\"]-- electrical signal --&gt;B([transportation])\n    subgraph Optical Fiber\n    B-. optical pulse .-&gt;C([Before the server])\n    end\n    C-- electrical signal --&gt;D[server]</code></pre> Why faster? <p>In the time sequence, turning on the light pulse means <code>1</code>, and turning off the light pulse means <code>0</code>. </p> <p>Since the frequency of visible light is about <code>10~8 MHz</code>, the bandwidth of the <code>optical fiber</code> communication system is much larger than that of other transmission media.</p> Repeater? Background? <p>The <code>signal power</code> transmitted on the physical medium will gradually decay. When the attenuation reaches a certain level, the signal will be distorted. Thus the <code>reception error</code> will be caused.</p> What? <p><code>Repeater</code> is a device that can regenerate and restore the signal to increase the transmission distance of the signal.</p> Note! <p>The two ends of the repeater are connected to different <code>network segments</code>, NOT <code>subnets</code>.</p> Example! <ul> <li> <p>wireless: Normally, we can see a wireless <code>repeater</code> as a <code>WIFI extender</code>. There is a free Ad. here \ud83d\ude06:</p> <p> </p> </li> <li> <p>wired: The old school uses wired ones:</p> <p> </p> </li> </ul>"},{"location":"5_FullStack/BASIC/Web/OIS/physical/#cons","title":"Cons","text":"Cons of Physical Layer <p>There are three major cons that <code>Physical Layer</code> has:</p> <ol> <li>No access control (e.g. \"entrance guard\").</li> <li>No collision detection (e.g. \"traffic police\") \u2192 there are collisions.</li> <li>No uniquely identified devices (e.g. \"workers without names in one office\").</li> <li>No device communications (e.g. \"cannot find specific worker since he/she doesn't have a name\").</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/physical/#references","title":"References","text":"<p>Network Byte</p> <p>Xiaomi Exterder</p> <p>Network Basics: Repeaters</p>"},{"location":"5_FullStack/BASIC/Web/OIS/presentation/","title":"Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/presentation/#_1","title":"****","text":"?"},{"location":"5_FullStack/BASIC/Web/OIS/presentation/#references","title":"References","text":""},{"location":"5_FullStack/BASIC/Web/OIS/session/","title":"Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/session/#_1","title":"****","text":"?"},{"location":"5_FullStack/BASIC/Web/OIS/session/#references","title":"References","text":""},{"location":"5_FullStack/BASIC/Web/OIS/transport/","title":"Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/transport/#_1","title":"****","text":"?"},{"location":"5_FullStack/BASIC/Web/OIS/transport/#references","title":"References","text":""},{"location":"5_FullStack/BASIC/Web/Protocols/","title":"**  Protocols**","text":""},{"location":"5_FullStack/BASIC/Web/Protocols/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>TCP/IP</p> </li> <li> <p>HTTP.</p> </li> <li> <p>FTP</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/Protocols/HTTP/","title":"HTTP","text":""},{"location":"5_FullStack/BASIC/Web/Protocols/HTTP/#http_1","title":"HTTP","text":"HTTP? <p><code>HTTP</code>, Hypertext Transfer Protocol, is a protocol. <code>HTTP</code> uses plain text for all information communication between client and server, which is unsafe as it uses the internet. </p>"},{"location":"5_FullStack/BASIC/Web/Protocols/HTTP/#anatomy-of-an-http-request","title":"Anatomy of an HTTP request","text":"Level Details Response &amp; Request URL Structure: CRUD method + HEAD (optional) + Path + HTTP version Details: see in URL. Password &amp; Key HTTP Header - Request headers  - General headers - Representation headers JWT (Base64 encoded RFC 7519) HTTP body (optional) - Single-resource body  - Multiple-resource bodys JSON (RFCs 8259)"},{"location":"5_FullStack/LANG/","title":"** \ud83d\udcbb Full Stack Language**","text":""},{"location":"5_FullStack/LANG/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ul> <li>Javascript</li> <li>SQL</li> </ul>"},{"location":"5_FullStack/LANG/#references","title":"References:","text":"<ul> <li>Picture resource 1</li> </ul>"},{"location":"5_FullStack/LANG/SQL/","title":"**  SQL**","text":""},{"location":"5_FullStack/LANG/SQL/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ul> <li>Basic Management</li> <li>Structural Operators</li> <li>Higher level Management</li> <li>Multiple Table Operation</li> </ul>"},{"location":"5_FullStack/LANG/SQL/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"5_FullStack/LANG/SQL/basic/","title":"**  Basic Management**","text":""},{"location":"5_FullStack/LANG/SQL/basic/#glance-of-contents","title":"Glance of contents","text":"<p>To better review <code>SQL</code> management pipeline, I sort the famouse \"verbs\" in the sequence from <code>0 - 1</code>:</p> <ul> <li><code>CREATE TABLE</code> - creates a new table</li> <li><code>INSERT INTO</code> - inserts new data into a database</li> <li><code>SELECT</code> - extracts data from a database</li> <li><code>WHERE</code> - filter records</li> <li><code>UPDATE</code> - edit data in a database</li> <li><code>DELETE</code> - deletes data from a database</li> <li><code>DROP TABLE</code> - deletes a table</li> </ul>"},{"location":"5_FullStack/LANG/SQL/basic/#create-table","title":"Create Table","text":"Create Table <p>The <code>CREATE TABLE</code> statement is used to create a new table in a database.</p> Syntax SQL<pre><code>CREATE TABLE table_name (\n    column1 datatype;\n    column2 datatype;\n    column3 datatype;\n    ....\n);\n</code></pre> <p>Then, you will get a table like below:</p> PersonID LastName FirstName Address City click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) );  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#insert-into","title":"Insert Into","text":"Insert Into <p>The <code>INSERT INTO</code> statement is used to insert new records in a table.</p> Syntax SQL<pre><code>INSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n</code></pre> <p>After the example below, you will get a table like:</p> PersonID LastName FirstName Address City 123 Tom Skage OR Albany click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) );   INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'Skage', 'OR', 'Albany');  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#select","title":"Select","text":"Select <p>The <code>SELECT</code> statement is used to select data from a database</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name;\n</code></pre> SQL<pre><code>SELECT * FROM table_name; -- select all the fields available in the table\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'Skage', 'OR', 'Albany');   SELECT * FROM Marks_family; SELECT PersonID, City FROM Marks_family;       </p>"},{"location":"5_FullStack/LANG/SQL/basic/#where","title":"Where","text":"Where <p>The <code>WHERE</code> clause is used to filter records. It is used in statements: <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>, etc.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Euguene');   SELECT * FROM Marks_family WHERE City='Albany';  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#update","title":"Update","text":"Update <p>The <code>UPDATE</code> statement is used to modify the existing records in a table.</p> Syntax SQL<pre><code>UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition; -- if omit this line, all records in the table will be updated\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Euguene');   UPDATE Marks_family SET LastName = 'Changed', FirstName = 'Haha' WHERE PersonID ='123'; -- Out put and check SELECT * FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#delete","title":"Delete","text":"Delete <p>The <code>DELETE</code> statement is used to delete existing records in a table.</p> Syntax SQL<pre><code>DELETE FROM table_name \nWHERE condition;  -- if omit this line, all records in the table will be deleted\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Euguene');   DELETE FROM Marks_family WHERE PersonID = '124'; -- Out put and check SELECT * FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#drop-table","title":"Drop Table","text":"Drop Table <p>The <code>DROP TABLE</code> statement is used to drop an existing table in a database.</p> Syntax SQL<pre><code>DROP TABLE table_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), //hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) );   DROP TABLE Marks_family;  </p> Note! <p>We can also use <code>TRUNCATE TABLE</code> to delete the data inside a table; instead of deleting the table itself.</p>"},{"location":"5_FullStack/LANG/SQL/basic/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"5_FullStack/LANG/SQL/higher/","title":"**  Higher Level Management**","text":""},{"location":"5_FullStack/LANG/SQL/higher/#glance-of-contents","title":"Glance of contents","text":"<p>Here are some higher-level uses:</p> <ul> <li><code>DROP</code> - Delete database or table.</li> <li><code>Stored PROCEDURES</code> - Store SQL code for reuse.</li> <li><code>SELECT DISTINCT</code> - extracts distinct data from a database</li> <li><code>LIKE</code> - Specify the data format in WHERE.</li> <li><code>WILDCARDS</code> - For regex expression.</li> <li>[<code>ALTER TABLE</code>]</li> <li>[<code>SELECT INTO</code>]</li> <li>[<code>INSERT INTO SELECT</code>]</li> <li>[<code>Case</code>]</li> </ul>"},{"location":"5_FullStack/LANG/SQL/higher/#drop","title":"DROP","text":"DROP <p>The <code>DROP</code> statement is used to delete the whole database or table.</p> Syntax SQL<pre><code>DROP DATABASE databasename;\nDROP TABLE table_name;\nTRUNCATE TABLE table_name;  -- delete all the data inside a table, but not the table itself.\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (223,'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Albany');   DROP TABLE Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/higher/#stored-procedures","title":"Stored PROCEDURES","text":"Stored PROCEDURES <p>A <code>stored PROCEDURES</code> is a prepared SQL code that you can save, so the code can be reused over and over again.</p> Syntax SQL<pre><code>-- Stored Procedure Syntax\nCREATE PROCEDURE procedure_name --definition\nAS\nsql_statement                   --function body\nGO;\n-- Execute a Stored Procedure\nEXEC procedure_name;            --use the function\n</code></pre> click to see an example <p> -- EG1 -- Stored Procedure Syntax CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10) AS SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode GO; -- Execute a Stored Procedure EXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP';</p> <p>-- EG2 -- Stored Procedure Syntax CREATE PROCEDURE SelectAllCustomers AS SELECT * FROM Customers GO; -- Execute a Stored Procedure EXEC SelectAllCustomers; </p>"},{"location":"5_FullStack/LANG/SQL/higher/#select-distinct","title":"SELECT DISTINCT","text":"SELECT DISTINCT <p>The <code>SELECT DISTINCT</code> statement is used to return only distinct (different) values.</p> Syntax SQL<pre><code>SELECT DISTINCT column1, column2, ...\nFROM table_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (223,'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Albany');   SELECT * FROM Marks_family;       SELECT DISTINCT PersonID, City FROM Marks_family; --will return distinct tuples SELECT DISTINCT City FROM Marks_family; SELECT DISTINCT PersonID FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/higher/#like","title":"LIKE","text":"LIKE <p>The <code>LIKE</code> operator is used in a WHERE clause to search for a specified pattern in a column.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE columnN LIKE pattern;\n</code></pre> LIKE Operator Description WHERE CustomerName LIKE 'a%' Finds any values that start with \"a\" WHERE CustomerName LIKE '%a' Finds any values that end with \"a\" WHERE CustomerName LIKE '%or%' Finds any values that have \"or\" in any position WHERE CustomerName LIKE '_r%' Finds any values that have \"r\" in the second position WHERE CustomerName LIKE 'a_%' Finds any values that start with \"a\" and are at least 2 characters in length WHERE CustomerName LIKE 'a__%' Finds any values that start with \"a\" and are at least 3 characters in length WHERE ContactName LIKE 'a%o' Finds any values that start with \"a\" and ends with \"o\" click to see an example <p> SELECT * FROM Customers WHERE CustomerName LIKE 'a%'; </p>"},{"location":"5_FullStack/LANG/SQL/higher/#wildcard","title":"Wildcard","text":"Wildcard <p><code>Wildcard</code> characters are used with the <code>LIKE</code> operator. The <code>LIKE</code> operator is used in a <code>WHERE</code> clause to search for a specified pattern in a column.</p> click to see an example Symbol Description Example % Represents zero or more characters bl% finds bl, black, blue, and blob _ Represents a single character h_t finds hot, hat, and hit [] Represents any single character within the brackets h[oa]t finds hot and hat, but not hit ^ Represents any character not in the brackets h[^oa]t finds hit, but not hot and hat - Represents any single character within the specified range c[a-b]t finds cat and cbt"},{"location":"5_FullStack/LANG/SQL/higher/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"5_FullStack/LANG/SQL/multi_table/","title":"**  Multiple Table Operation**","text":""},{"location":"5_FullStack/LANG/SQL/multi_table/#glance-of-contents","title":"Glance of contents","text":"<p>Here are some higher-level uses:</p> <ul> <li><code>Joins</code> - Basic Join Concept.</li> <li><code>Inner Join</code> - Inner join two different tables.</li> <li><code>Left Join</code> - Left join two different tables.</li> <li><code>Right Join</code> - Right join two different tables.</li> <li><code>Full Join</code> - Outer join two different tables.</li> <li><code>Self Join</code> - Inner join a table with itself.</li> <li><code>Union</code> - Combine two tables with the same number of columns.</li> </ul>"},{"location":"5_FullStack/LANG/SQL/multi_table/#joins","title":"Joins","text":"Joins <p>Here are the different types of the <code>JOINs</code> in SQL:</p> <ul> <li><code>(INNER) JOIN</code>: Returns records that have matching values in both tables</li> <li><code>LEFT (OUTER) JOIN</code>: Returns all records from the left table, and the matched records from the right table</li> <li><code>RIGHT (OUTER) JOIN</code>: Returns all records from the right table, and the matched records from the left table</li> <li><code>FULL (OUTER) JOIN</code>: Returns all records when there is a match in either left or right table</li> </ul> <p> </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#inner-join","title":"Inner Join","text":"Inner Join Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 INNER JOIN table2\nON table1.column_name = table2.column_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT Marks_family.PersonID, Marks_family.City, Student_List.StudentName FROM Marks_family INNER JOIN Student_List ON Marks_family.City = Student_List.City;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#left-join","title":"Left Join","text":"Left Join Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 Left JOIN table2\nON table1.column_name = table2.column_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT Marks_family.PersonID, Marks_family.City, Student_List.StudentName FROM Student_List LEFT JOIN Marks_family ON Student_List.City = Marks_family.City; </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#right-join","title":"Right Join","text":"Right Join Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 RIGHT JOIN table2\nON table1.column_name = table2.column_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT Marks_family.PersonID, Marks_family.City, Student_List.StudentName FROM Marks_family RIGHT JOIN Student_List ON Marks_family.City = Student_List.City;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#full-join","title":"Full Join","text":"Full Join Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 FULL OUTER JOIN table2\nON table1.column_name = table2.column_name\n(WHERE/ORDER BY);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (127, 'Linclon'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT Marks_family.PersonID, Marks_family.City, Student_List.StudentName FROM Marks_family FULL OUTER JOIN Student_List ON Marks_family.City = Student_List.City;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#self-join","title":"Self Join","text":"Self Join <p>A <code>self join</code> is a regular join, but the table is joined with itself.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 T1, table2 T2\nWHERE condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (127, 'Albany');   SELECT A.PersonID, A.City, B.PersonID FROM Marks_family A, Marks_family B WHERE A.City = B.City AND A.PersonID &lt;&gt; B.PersonID;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#union","title":"Union","text":"Union <p>The <code>UNION</code> operator is used to combine the result-set of two or more SELECT statements.</p> <ul> <li>Every <code>SELECT</code> statement within <code>UNION</code> must have the same number of columns</li> <li>The columns must also have similar data types</li> <li>The columns in every <code>SELECT</code> statement must also be in the same order</li> <li><code>UNION</code> selects only distinct values. Use <code>UNION ALL</code> to also select duplicate values!</li> </ul> Syntax SQL<pre><code>SELECT column_name(s) FROM table1 (WHERE)\nUNION (ALL)\nSELECT column_name(s) FROM table2 (WHERE)\n(ORDER BY);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (127, 'Linclon'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT * FROM Marks_family UNION ALL SELECT * FROM Student_List;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"5_FullStack/LANG/SQL/particle/","title":"**  Structural Operators**","text":""},{"location":"5_FullStack/LANG/SQL/particle/#glance-of-contents","title":"Glance of contents","text":"<p>There are some structural operators that are used to complete SQL sentences:</p> <ul> <li><code>Operators</code> for expression.</li> <li><code>NULL</code> for null expression.</li> <li><code>Min &amp; Max</code> for expression.</li> <li><code>Count, Avg, Sum</code> for aggregation function expressions.</li> <li><code>AND, OR, NOT</code> for conditional <code>WHERE</code> filtering.</li> <li><code>Exists</code> for checking the existence of any record.</li> <li><code>In</code> shorthand for multiple <code>OR</code> conditions.</li> <li><code>Any &amp; All</code> perform a comparison between a single column value and a range of other values.</li> <li><code>Order By</code> for sorting condition.</li> <li><code>Group By</code> for summarizing rows with the same value.</li> <li><code>BETWEEN</code> for selecting values within a given range.</li> <li><code>As</code> for name alias.</li> <li><code>Having</code> for using aggregation condition.</li> </ul>"},{"location":"5_FullStack/LANG/SQL/particle/#operators","title":"Operators","text":"Operators Syntax SQL Arithmetic OperatorsSQL Comparison OperatorsSQL Bitwise Operators + - * / % Add Subtract Multiply Divide Modulo <p> SELECT 30 + 20; SELECT 30 - 20; SELECT 30 * 20; SELECT 30 / 20; SELECT 30 % 20; </p> = &gt; &lt; &gt;= &lt;= &lt;&gt; Equal to Greater than Less than Greater than or equal to Less than or equal to Not equal to <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (129, 'Kim', 'B', 'TX', 'Salem');   SELECT * FROM Marks_family WHERE PersonID = 129; SELECT * FROM Marks_family WHERE PersonID &gt; 123; SELECT * FROM Marks_family WHERE PersonID &lt; 129; SELECT * FROM Marks_family WHERE PersonID &gt;= 123; SELECT * FROM Marks_family WHERE PersonID &lt;= 129; SELECT * FROM Marks_family WHERE PersonID &lt;&gt; 129;  </p> &amp; | ^ Bitwise AND Bitwise OR Bitwise exclusive OR"},{"location":"5_FullStack/LANG/SQL/particle/#null","title":"Null","text":"Null <p>The <code>NULL</code> statements help the comparison where <code>=,</code> <code>&lt;</code>, <code>&lt;&gt;</code>, etc cannot express.</p> Syntax SQL<pre><code>SELECT column_names\nFROM table_name\nWHERE column_name IS NULL/ IS NOT NULL;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, '', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem');   SELECT * FROM Marks_family WHERE LastName IS NULL;   SELECT * FROM Marks_family WHERE LastName IS NOT NULL;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#min--max","title":"Min &amp; Max","text":"Min &amp; Max <ul> <li>The <code>MIN()</code> function returns the smallest value of the selected column.</li> <li>The <code>MAX()</code> function returns the largest value of the selected column.</li> </ul> Syntax SQL<pre><code>SELECT MIN(column_name) / MAX(column_name)\nFROM table_name\nWHERE condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, '', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem');   SELECT MAX(PersonID) FROM Marks_family;   SELECT MIN(PersonID) FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#and-or-and-not","title":"And, Or, and Not","text":"And, Or, and Not <p>The <code>AND, OR, NOT</code> statements are used to express conditional <code>WHERE</code> filtering.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\n--and\nWHERE condition1 AND condition2 AND condition3 ...;\n--or\nWHERE condition1 OR condition2 OR condition3 ...;\n--not\nWHERE NOT condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Albany');   SELECT PersonID, LastName FROM Marks_family WHERE City = 'Albany' AND LastName = 'Tom';   SELECT PersonID, LastName FROM Marks_family WHERE City = 'Albany' OR LastName = 'Tom';   SELECT PersonID, LastName FROM Marks_family WHERE NOT City = 'Albany';  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#exists","title":"Exists","text":"Exists <p>The <code>EXISTS</code> operator is used to test for the existence of any record in a subquery. Return <code>TRUE</code> when there are one or more records.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE EXISTS\n(SELECT column_name FROM table_name WHERE condition);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family1 (     PersonID int,     City varchar(255) ); CREATE TABLE Marks_family2 (     City varchar(255) ); INSERT INTO Marks_family1 (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family2 (City) VALUES ('Albany'); INSERT INTO Marks_family2 (City) VALUES ('Eugene'); INSERT INTO Marks_family2 (City) VALUES ('Salem');   SELECT * FROM Marks_family1 WHERE EXISTS (SELECT City FROM Marks_family2);  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#in","title":"In","text":"In <p>The <code>IN</code> operator is a shorthand for multiple <code>OR</code> conditions, which allow you to specify multiple values in a <code>WHERE</code> clause.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE column_name (NOT) IN (value1, value2, ...)/(SELECT STATEMENT) ;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   SELECT * FROM Marks_family WHERE PersonID NOT IN (123,125);   SELECT * FROM Marks_family WHERE CITY IN (SELECT City FROM Marks_family WHERE City = 'Salem');  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#any--all","title":"Any &amp; All","text":"Any &amp; All <p>The <code>ANY</code> and <code>ALL</code> operators allow you to perform a comparison between a single column value and a range of other values.</p> <ul> <li>operator must be a standard comparison operator (<code>=</code>, <code>&lt;&gt;</code>, <code>!=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, or <code>&lt;=</code>).</li> <li><code>ALL</code> can be used with <code>SELECT</code>, <code>WHERE</code> and <code>HAVING</code> statements</li> <li><code>ANY</code> means that the condition will be true if the operation is true for any of the values in the range.</li> <li><code>ALL</code> means that the condition will be true only if the operation is true for all values in the range. </li> </ul> Symbol Equal Expression ANY SOME =ANY IN &lt;&gt;ALL NOT IN Syntax SQL<pre><code>-- ANY can be used with WHERE and HAVING statements\nSELECT column_name(s)\nFROM table_name\nWHERE column_name operator ANY\n  (SELECT column_name\n  FROM table_name\n  WHERE condition);\n\n-- ALL can be used with SELECT, WHERE and HAVING statements\n-- WAY1\nSELECT ALL column_name(s)\nFROM table_name\nWHERE condition;\n-- WAY2\nSELECT column_name(s)\nFROM table_name\nWHERE column_name operator ALL\n  (SELECT column_name\n  FROM table_name\n  WHERE condition);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family1 (     PersonID int,     City varchar(255) ); CREATE TABLE Marks_family2 (     PersonID2 int,     City varchar(255) ); INSERT INTO Marks_family1 VALUES (123, 'Albany'); INSERT INTO Marks_family2 VALUES (477,'Salem'); INSERT INTO Marks_family2 VALUES (123,'Eugene'); INSERT INTO Marks_family2 VALUES (123,'Salem');   SELECT ALL City FROM Marks_family2;   SELECT * FROM Marks_family1 WHERE PersonID = ANY (     SELECT PersonID2     FROM Marks_family2     WHERE PersonID2 &lt; 447 );  </p> <p> </p>"},{"location":"5_FullStack/LANG/SQL/particle/#count-avg-sum","title":"Count, Avg, Sum","text":"Count, Avg, Sum <p>The <code>COUNT, AVG, SUM</code> statements are used to express conditional <code>WHERE</code> filtering.</p> Syntax SQL<pre><code>SELECT COUNT(column_name) / AVG(column_name) / SUM(column_name)\nFROM table_name\nWHERE condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Albany');   SELECT COUNT(PersonID) FROM Marks_family;   SELECT AVG(PersonID) FROM Marks_family;   SELECT SUM(PersonID) FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#order-by","title":"Order By","text":"Order By <p>The <code>ORDER BY</code> keyword is used to sort the result-set in ascending or descending order.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\n(WHERE some_condition)\nORDER BY column1, column2, ... ASC|DESC; --Default ASC\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Albany');   SELECT * FROM Marks_family ORDER BY PersonID, LastName ASC;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#group-by","title":"Group By","text":"Group By <p>The <code>GROUP BY</code> statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\". For summarized information, we always use aggregate functions (<code>COUNT()</code>, <code>MAX()</code>, <code>MIN()</code>, <code>SUM()</code>, <code>AVG()</code>) to group the result-set by one or more columns.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nORDER BY column_name(s);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   -- Static the number of people in each city. SELECT COUNT(PersonID), City FROM Marks_family GROUP BY City ORDER BY COUNT(PersonID) DESC;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#between","title":"Between","text":"Between <p>The <code>BETWEEN</code> operator selects values within a given range. The values can be numbers, text, or dates.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE column_name (NOT) BETWEEN value1 AND value2;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   SELECT * FROM Marks_family WHERE PersonID NOT BETWEEN 123 AND 125;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#as","title":"As","text":"As <p>The <code>AS</code> keyword is used to give a table, or a column in a table, a temporary name for better understanding.</p> Syntax SQL<pre><code>SELECT column_name AS alias_name\nFROM table_name;\n\nSELECT column1, column2, ...\nFROM table_name AS alias_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   SELECT M.PersonID FROM Marks_family AS M WHERE City = 'Salem';   SELECT PersonID AS P, LastName AS L FROM Marks_family WHERE City = 'Salem';  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#having","title":"Having","text":"Having <p>The <code>HAVING</code> clause was added to SQL because the <code>WHERE</code> keyword cannot be used with aggregate functions.</p> <p>(i.e. <code>HAVING</code> clause is used in conjunction with the <code>GROUP BY</code> clause to filter the results of an aggregated query based on a specific condition.)</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nHAVING condition\nORDER BY column_name(s);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (126, 'Rim', 'F', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   SELECT COUNT(PersonID), City FROM Marks_family GROUP BY City HAVING COUNT(PersonID) &gt; 1  -- return the city which people number is bigger than 1 ORDER BY COUNT(PersonID) DESC;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"6_Math/","title":"Math","text":"<p>This chapter is about </p>"},{"location":"6_Math/#table-of-contents","title":"Table of contents:","text":"<ol> <li>Concepts.</li> <li>Optimization.</li> </ol>"},{"location":"6_Math/Concepts/Math_questions/","title":"\ud83c\udfae Math Questions","text":"<p>This material is for related questions:</p> Table of contents <ul> <li>Convex hull</li> <li>Dot and Cross products</li> <li>Point in Tri</li> <li>Convex polygon</li> <li>Reflection vector</li> <li>Polygon area</li> <li>3D two lines' distance</li> <li>Zero determinant</li> <li>Homogeneous coordinates</li> <li>Posit homo v.s. Direct homo</li> <li>Benifits of homo</li> <li>Ray-sphere intersection</li> <li>Normal matrix</li> <li>Clipping space transformation</li> <li>Viewing frustum</li> <li>Dimensions of vectors/matrices</li> <li>M matrix</li> <li>M matrix decomposation</li> <li>Order of matrix concatenation</li> <li>Orthogonal matrices</li> <li>Eigenvalues and Eigenvectors</li> <li>Rotation matrix eigenvalues</li> <li>Least squares method</li> <li>Euler angles</li> <li>Gimbal lock</li> <li>Quaternions</li> <li>Monte Carlo integration</li> <li>Nonlinear to linear</li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#convex-hull","title":"Convex hull","text":"How to compute the convex hull of a given set of points? <p>Answer: We can solve this problem by using Graham Scan alrorithm.</p>"},{"location":"6_Math/Concepts/Math_questions/#dot-and-cross-products","title":"Dot and Cross products","text":"Geometric interpretations of dot and cross products. <p>Answer: </p> <ul> <li><code>Dot product</code> is like light projection:</li> </ul> <p> </p> <ul> <li><code>Cross product</code> is for getting the orthogonal vector of the provided vectors. Its symbol also shows the clockwise from one parent vector to another parent verctor:</li> </ul> <p> </p>"},{"location":"6_Math/Concepts/Math_questions/#point-in-tri","title":"Point in Tri","text":"How to determine if a point is inside a triangle? <p>Answer: Various methods can be used, including:</p> <ul> <li>Barycentric coordinates (Link)</li> </ul> <p> </p> <ul> <li>Angle summation (Link)</li> </ul> <p></p> <ul> <li>Ray intersection (Link)</li> </ul> <p></p> <ul> <li>Area comparison. (Link)</li> </ul> <p></p>"},{"location":"6_Math/Concepts/Math_questions/#convex-polygon","title":"Convex polygon","text":"How to determine if a polygon is convex? <p>Answer: A polygon is convex if all its interior angles are less than 180 degrees. (Link) </p>"},{"location":"6_Math/Concepts/Math_questions/#reflection-vector","title":"Reflection vector","text":"Given a normal vector and an incident vector, how to compute the reflection vector? <p>Answer: Here below is the formula (Link):</p> \\[ \\vec{R} = \\vec{I} - 2 \\vec{I}\\cdot\\vec{N}\\] <p></p>"},{"location":"6_Math/Concepts/Math_questions/#polygon-area","title":"Polygon area","text":"Use cross product to calculate the area of a polygon. <p>Answer: Refer the Link Imagine we have three points A, B, and C. The area of the single triangle can be calculated as:</p> \\[S_{tri}=1/2\\cdot\\|\\vec{AB}\\times\\vec{AC}|\\] <p>The area of any polygon can be claculated by:</p> \\[S_{pol}=1/2\\cdot\\sum_{i=0}^{n-1}(x_i\\cdot y_{i+1}-y_i\\cdot x_{i+1})\\] <p></p>"},{"location":"6_Math/Concepts/Math_questions/#3d-two-lines-distance","title":"3D two lines' distance","text":"Finding the distance between two lines in 3D space. <p>Answer: The distance between two lines can be calculated using vector projection and vector subtraction. (Link)</p> <p></p>"},{"location":"6_Math/Concepts/Math_questions/#zero-determinant","title":"Zero determinant","text":"Significance of a determinant being equal to zero? <p>Answer: A determinant of zero indicates linear dependence of the matrix columns or rows.</p> <ul> <li> <p>Linear Dependence: If the determinant of a square matrix is zero, it means that the rows (or columns) of the matrix are linearly dependent. In simpler terms, one of the rows (or columns) can be expressed as a linear combination of the other rows (or columns).</p> </li> <li> <p>Singular Matrix: A matrix with a determinant of zero is called a singular matrix. Singular matrices do not have an inverse, meaning they are non-invertible. Non-singular matrices, on the other hand, have a non-zero determinant and possess an inverse.</p> </li> <li> <p>Volume Interpretation: For a 3x3 matrix, the determinant gives the volume of the parallelepiped spanned by its row or column vectors. A determinant of zero implies that the volume is zero, which means that the three vectors lie in the same plane.</p> </li> <li> <p>No Unique Solution: If you're trying to solve a system of linear equations using the matrix form \\(AX=B\\), and matrix \\(A\\) has a determinant of zero, it means that the system either has infinitely many solutions or no solutions (depending on the system). In the context of linear systems, the determinant can help determine the nature of the solutions.</p> </li> <li> <p>Eigenvalues: For a square matrix, the determinant of the matrix minus a scalar multiple of the identity matrix gives the characteristic polynomial. The roots of this polynomial are the eigenvalues of the matrix. If the determinant of the matrix itself is zero, then one of the eigenvalues is zero.</p> </li> <li> <p>Stability in Differential Equations: In the study of differential equations, particularly systems of linear differential equations, the determinant of the coefficient matrix can play a role in determining the stability and behavior of solutions.</p> </li> <li> <p>Geometric Interpretation: For a 2x2 matrix, the determinant gives the area of the parallelogram spanned by its row or column vectors. If the determinant is zero, it means that the area is zero, implying that the vectors are collinear.</p> </li> <li> <p>Change of Variables in Multivariable Calculus: The determinant of the Jacobian matrix in a change of variables for multiple integrals gives a scaling factor for integration. A zero determinant can indicate problems in the transformation.</p> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#homogeneous-coordinates","title":"Homogeneous coordinates","text":"What are homogeneous coordinates? <p>Answer: Homogeneous coordinates represent points in higher-dimensional space and allow for convenient transformations.</p> <p>Here are some matrix for two-dimensional transformation in homogeneous coordinate:</p> <p></p>"},{"location":"6_Math/Concepts/Math_questions/#posit-homo-vs-direct-homo","title":"Posit homo v.s. Direct homo","text":"How to differentiate between a position and a direction using homogeneous coordinates? <p>Answer: In homogeneous coordinates, the distinction between a position (or point) and a direction (or vector) can be made using the additional coordinate, often referred to as the \"w-coordinate.\"</p> <ul> <li> <p>Position (or Point): Represented as \\((x',y',w)\\) in 2D or \\((x',y',z',w)\\) in 3D. The w-coordinate for a position is usually 1 (or non-zero in a more general sense). When you convert from homogeneous to Cartesian coordinates, you'd divide by w to get the actual point: \\(x=x'/w,y=y'/w\\)and in 3D, \\(z=z'/w\\).</p> </li> <li> <p>Direction (or Vector): Represented similarly as \\((x',y',w)\\) in 2D or \\((x',y',z',w)\\) in 3D. The w-coordinate for a direction vector is 0. This denotes that vectors, being directions, do not have a specific position in space and aren't affected by translations. If you were to convert a direction from homogeneous to Cartesian coordinates (though you typically wouldn't need to), the division by w would lead to a division by zero, which further underscores that the concept of a specific \"position\" doesn't apply to directions.</p> </li> </ul> <p>Here's a practical interpretation. Imagine you're working in 3D graphics:</p> <ul> <li> <p>If you have the homogeneous coordinate \\((2,3,4,1)\\), it represents the point \\((2,3,4)\\) in Cartesian coordinates.</p> </li> <li> <p>If you have the homogeneous coordinate \\((2,3,4,0)\\), it represents a direction, not a specific point. It might describe, for instance, the direction of a light ray or a vector in space.</p> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#benifits-of-homo","title":"Benifits of homo","text":"Why use homogeneous coordinates? What are the advantages? <p>Answer:</p> <ul> <li> <p>Unified Transformation Matrices: Homogeneous coordinates allow for a unified matrix representation for multiple transformations (translation, rotation, scaling, and shearing). This makes it possible to concatenate various transformations into a single matrix.</p> </li> <li> <p>Easier Translations: In standard Cartesian coordinates, translations are not representable as linear transformations. With homogeneous coordinates, translations become linear, and hence, can be expressed as matrix multiplications.</p> </li> <li> <p>Perspective Projections: Homogeneous coordinates make it easy to handle projective transformations, like perspective projection in graphics, which would be more complex in Cartesian coordinates.</p> </li> <li> <p>Representation of Points at Infinity: They can represent points at infinity, allowing for the modeling of parallel lines meeting at a \"vanishing point\" in projective geometry.</p> </li> <li> <p>Interpolation and Clipping: In computer graphics, tasks like interpolation and clipping can be performed more efficiently and robustly using homogeneous coordinates.</p> </li> <li> <p>Compactness: Using homogeneous coordinates, a sequence of transformations can be represented compactly with a single matrix, simplifying the computation.</p> </li> <li> <p>Flexibility: They can seamlessly toggle between representing positions and directions using the same coordinate system.</p> </li> <li> <p>Robustness in Computer Vision: Homogeneous coordinates provide a robust framework for dealing with points and transformations in computer vision tasks, such as camera calibration and 3D reconstruction.</p> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#ray-sphere-intersection","title":"Ray-sphere intersection","text":"How to determine ray-sphere intersection? Optimization strategies? <p>Answer: Intersection can be found by solving a quadratic equation. Optimization includes early rejection using bounding spheres.</p> <p></p>"},{"location":"6_Math/Concepts/Math_questions/#normal-matrix","title":"Normal matrix","text":"What is a normal matrix? <p>Answer: </p> <ul> <li>Definition: <ul> <li>A complex square matrix \\(A\\) is normal if it commutes with its adjoint (conjugate transpose). </li> <li>For real matrices, the adjoint is the same as the transpose. So for a real matrix, a square matrix \\(A\\) is normal if it commutes with its transpose.</li> </ul> </li> </ul> <p></p> <ul> <li>Application:<ul> <li>A matrix is normal if and only if it can be diagonalized by a unitary (or orthogonal, in the real case) matrix.</li> <li>If \\(\\overline{A}\\) is normal, then its eigenvalues lie in the complex plane and its eigenvectors can be chosen to be orthonormal.</li> <li>All Hermitian, skew-Hermitian, and unitary matrices are normal.</li> </ul> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#clipping-space-transformation","title":"Clipping space transformation","text":"What does the clipping space transformation do? <p>Answer: Clipping space transformation maps the view frustum to a normalized cube for further perspective projection. </p> <p>In CG, The calculations involved in transforming our vertex positioned in model space into clip space happen in the vertex shader. In fact, the position we set as output, is the position in clip space (Link):</p> \\[out_{position} = projectionMatrix \\times viewMatrix \\times modelMatrix \\times input_{ModelSpacePosition}\\] <p></p>"},{"location":"6_Math/Concepts/Math_questions/#viewing-frustum","title":"Viewing frustum","text":"How is a viewing frustum defined? <p>Answer: The viewing frustum is defined as the volume in world space that is visible through the camera lens.</p> <p></p> <p></p>"},{"location":"6_Math/Concepts/Math_questions/#dimensions-of-vectorsmatrices","title":"Dimensions of vectors/matrices","text":"How many dimensions are typical vectors? And matrices? Why is it 3D for vectors and 4D for matrices? <p>Answer: Vectors are typically 3D for spatial representations, while matrices are 4D for transformations due to homogenous coordinates.</p>"},{"location":"6_Math/Concepts/Math_questions/#m-matrix","title":"M matrix","text":"How is the M matrix derived? <p>Answer: The M matrix combines translation, rotation, and scaling transformations into a single matrix.</p> <p>Given a 4x4 transformation matrix \\(M\\) in 3D graphics, the matrix can be represented as:</p> \\[ M=\\begin{bmatrix} RS &amp; T\\\\ 0 &amp; 1 \\end{bmatrix} \\] <p>Where:</p> <ul> <li>\\(R\\) is a 3x3 matrix representing rotation and possibly scaling.</li> <li>\\(T\\) is a 3x1 matrix (or column vector) representing translation.</li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#m-matrix-decomposation","title":"M matrix decomposation","text":"Given an M matrix, can it be decomposed into various transformation matrices? <p>Answer: Yes, an M matrix can be decomposed into translation, rotation, and scaling matrices. The hard point is the Scaling and Rotation Decomposition:</p> <p>First, compute the scale factors along each axis as the magnitude of the rows of the 3x3 matrix:</p> \\[S_x = ||M_{1,:3}||, S_y = ||M_{2,:3}||,S_z = ||M_{3,:3}||,\\] <p>The scaling matrix \\(S\\) is then:</p> \\[ S=\\begin{bmatrix} S_x &amp; 0 &amp; 0\\\\ 0 &amp; S_y &amp; 0\\\\ 0 &amp; 0 &amp; S_z \\end{bmatrix} \\] <p>To get the pure rotation matrix \\(R\\), you would normalize the rows of the 3x3 matrix in \\(M\\) using the scaling factors:</p> \\[ R=\\begin{bmatrix} \\frac{M_{1,:3}}{S_x} \\\\ \\frac{M_{2,:3}}{S_y}\\\\ \\frac{M_{3,:3}}{S_z} \\end{bmatrix} \\] <p></p> <p></p>"},{"location":"6_Math/Concepts/Math_questions/#order-of-matrix-concatenation","title":"Order of matrix concatenation","text":"How to determine the order of matrix concatenation? <p>Answer: Matrix multiplication is non-commutative, so the order of matrix multiplication matters. </p> <p>Let's use some notation:</p> <ul> <li>Let \\(( M_o )\\) be the object's matrix.</li> <li>Let \\(( M_r )\\) be the rotation matrix.</li> <li>Let \\(( M_t )\\) be the translation matrix.</li> </ul> <p>For the above scenario, the result \\(M_{result}\\) after rotating and then translating is:</p> \\[ M_{result} = M_t \\times (M_r \\times M_o) \\] <p>If you instead wanted to first translate and then rotate the object, you would do:</p> \\[ M_{result} = M_r \\times (M_t \\times M_o) \\]"},{"location":"6_Math/Concepts/Math_questions/#orthogonal-matrices","title":"Orthogonal matrices","text":"Definition and characteristics of orthogonal matrices. <p>Answer: </p> <ul> <li> <p>Definition: A square matrix \\(A\\) is said to be orthogonal if its transpose is equal to its inverse. That is, </p> \\[ A^T = A^{-1} \\] <p>or equivalently, </p> \\[ A^T A = AA^T = I \\] <p>where \\(I\\) is the identity matrix of appropriate size.</p> </li> <li> <p>Characteristics of Orthogonal Matrices:</p> <ol> <li> <p>Preservation of Dot Product: For an orthogonal matrix \\(A\\) and any vectors \\(x\\) and \\(y\\) in \\(\\mathbb{R}^n\\), the dot product of the transformed vectors remains unchanged, i.e., </p> \\[  (Ax) \\cdot (Ay) = x \\cdot y  \\] <p>This means that orthogonal matrices preserve angles between vectors.</p> </li> <li> <p>Preservation of Norm: For an orthogonal matrix \\(A\\) and any vector \\(x\\) in \\(\\mathbb{R}^n\\), the length (or norm) of the transformed vector remains unchanged. That is, </p> \\[  ||Ax|| = ||x||  \\] </li> <li> <p>Determinant: The determinant of an orthogonal matrix is either 1 or -1.</p> </li> <li> <p>Eigenvalues: The eigenvalues of an orthogonal matrix have an absolute value of 1.</p> </li> <li> <p>Inverse: As per the definition, the inverse of an orthogonal matrix is its transpose.</p> </li> <li> <p>Rotation and Reflection: Orthogonal matrices in \\(\\mathbb{R}^2\\) and \\(\\mathbb{R}^3\\) can represent rotations (if the determinant is 1) or  reflections (if the determinant is -1).</p> </li> </ol> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#eigenvalues-and-eigenvectors","title":"Eigenvalues and Eigenvectors","text":"Understanding eigenvalues and eigenvectors, along with related equations. <p>Answer:</p> <ul> <li> <p>Definitions</p> <ol> <li> <p>Eigenvector: A non-zero vector \\( v \\) such that when a matrix \\( A \\) multiplies it, the vector \\( v \\) only gets scaled (its direction may or may not change). </p> </li> <li> <p>Eigenvalue: The scalar \\( \\lambda \\) associated with its corresponding eigenvector. </p> \\[ Av = \\lambda v \\] <p>where \\( A \\) is a matrix, \\( v \\) is the eigenvector, and \\( \\lambda \\) is the eigenvalue.</p> <p>Eigenvalues indicate the factor by which the eigenvector is stretched or compressed. </p> <ul> <li>If \\( \\lambda = 1 \\), vectors along the direction of the associated eigenvector remain unchanged.</li> <li>If \\( \\lambda &gt; 1 \\), vectors are stretched.</li> <li>If \\( 0 &lt; \\lambda &lt; 1 \\), vectors are compressed.</li> <li>If \\( \\lambda &lt; 0 \\), vectors are inverted and may also be stretched or compressed.</li> </ul> </li> <li> <p>Geometric Perspective on linear transformation.</p> </li> </ol> <p>The number of independent eigenvectors gives information about the dimensionality of the space preserved by the linear transformation.</p> <p>Imagine a rubber sheet laid out on a grid. A linear transformation could stretch, compress, skew, or rotate this sheet. The eigenvectors of this transformation would be the directions where the rubber sheet is merely stretched or compressed (no skewing or rotation), and the eigenvalues would tell you by how much.</p> <p>For a 2x2 matrix, think of it as two main actions:</p> <ul> <li>Stretching or compressing along one direction (first eigenvector).</li> <li>Stretching or compressing along a perpendicular direction (second eigenvector).</li> </ul> </li> <li> <p>Determining Eigenvalues and Eigenvectors</p> <p>To find the eigenvalues of a matrix, you need to solve the characteristic equation:</p> \\[ \\text{det}(A - \\lambda I) = 0 \\] <p>Here, \\( I \\) is the identity matrix of the same size as \\( A \\), and \"det\" represents the determinant of a matrix.</p> <p>Once the eigenvalues \\( \\lambda \\) are found, you can plug them back into the equation </p> \\[ (A - \\lambda I)v = 0 \\] <p>to determine the eigenvectors \\( v \\).</p> </li> <li> <p>Example</p> <p>Let's take a simple 2x2 matrix to illustrate the process:</p> \\[ A = \\begin{bmatrix} 2 &amp; 1 \\\\ 1 &amp; 3 \\end{bmatrix} \\] <p>To find its eigenvalues:</p> <ol> <li>Subtract \\( \\lambda \\) from the diagonal of \\( A \\):</li> </ol> \\[ A - \\lambda I = \\begin{bmatrix} 2-\\lambda &amp; 1 \\\\ 1 &amp; 3-\\lambda \\end{bmatrix} \\] <ol> <li> <p>Set the determinant of this matrix to zero and solve for \\( \\lambda \\):</p> \\[ \\text{det}(A - \\lambda I) = (2-\\lambda)(3-\\lambda) - 1(1) = 0 \\] <p>Solving this equation will yield the eigenvalues \\( \\lambda \\).</p> <p>Once you have the eigenvalues, plug them back into the equation </p> \\[ (A - \\lambda I)v = 0 \\] <p>to get the respective eigenvectors.</p> </li> </ol> </li> <li> <p>Properties</p> <ol> <li> <p>For a diagonal matrix, the eigenvalues are simply the diagonal entries.</p> </li> <li> <p>The sum of the eigenvalues is equal to the trace of the matrix (the sum of its diagonal elements).</p> </li> <li> <p>The product of the eigenvalues is equal to the determinant of the matrix.</p> </li> <li> <p>If \\( A \\) is an \\( n \\times n \\) matrix and \\( \\lambda \\) is an eigenvalue of \\( A \\) with multiplicity \\( k \\), then the algebraic multiplicity (how many times \\( \\lambda \\) appears as a root) is always greater than or equal to the geometric multiplicity (the number of independent eigenvectors associated with \\( \\lambda \\)).</p> </li> </ol> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#rotation-matrix-eigenvalues","title":"Rotation matrix eigenvalues","text":"What are the eigenvalues of a rotation matrix? <p>Answer: The eigenvalues of a rotation matrix are complex numbers with magnitude 1.</p> <p>Given a 2x2 rotation matrix \\( R \\) that represents a rotation of \\( \\theta \\) degrees (or radians) counter-clockwise around the origin, the matrix is given by:</p> \\[ R = \\begin{bmatrix} \\cos(\\theta) &amp; -\\sin(\\theta) \\\\ \\sin(\\theta) &amp; \\cos(\\theta) \\\\ \\end{bmatrix} \\] <p>To find its eigenvalues, we need to solve the characteristic polynomial given by:</p> \\[ \\text{det}(R - \\lambda I) = 0 \\] <p>where \\( I \\) is the 2x2 identity matrix.</p> <p>Expanding out, we have:</p> \\[ \\text{det}\\left( \\begin{bmatrix} \\cos(\\theta) - \\lambda &amp; -\\sin(\\theta) \\\\ \\sin(\\theta) &amp; \\cos(\\theta) - \\lambda \\\\ \\end{bmatrix} \\right) = 0 \\] <p>This simplifies to:</p> \\[ (\\cos(\\theta) - \\lambda)^2 + \\sin^2(\\theta) = 0 \\] <p>The above equation has complex solutions for all \\( \\theta \\) except for \\( \\theta = 0 \\) and \\( \\theta = \\pi \\) (or 0 and 180 degrees). In other words, for a genuine rotation (not identity or a reflection), the eigenvalues are complex.</p> <p>The eigenvalues are:</p> \\[ \\lambda_1, \\lambda_2 = \\cos(\\theta) \\pm i\\sin(\\theta) \\] <p>This is a representation of Euler's formula:</p> \\[ e^{i\\theta} = \\cos(\\theta) + i\\sin(\\theta) \\] <p>So, the eigenvalues for a 2D rotation matrix are complex conjugates lying on the unit circle in the complex plane. The rotation doesn't have any real vectors that only get stretched or compressed, which is consistent with our geometric understanding that all vectors change direction except for those on the axis of rotation.</p>"},{"location":"6_Math/Concepts/Math_questions/#least-squares-method","title":"Least squares method","text":"Are you familiar with the least squares method? <p>Answer: The least squares method minimizes the sum of squared differences between data points and a fitted model.</p> <ul> <li> <p>Mathematical Background</p> <p>Given a set of \\( n \\) data points \\( (x_1, y_1), (x_2, y_2), \\ldots, (x_n, y_n) \\) and a function \\( f \\) that is linear in its parameters, the goal is to find the parameters that minimize the sum of the squared residuals:</p> \\[ S = \\sum_{i=1}^{n} r_i^2 \\] <p>where \\( r_i = y_i - f(x_i) \\) is the residual.</p> <p>In matrix notation, this can be formulated as:</p> \\[ \\mathbf{A} \\mathbf{x} = \\mathbf{b} \\] <p>Where:</p> <ul> <li>\\( \\mathbf{A} \\) is the design matrix.</li> <li>\\( \\mathbf{x} \\) is the column vector of the parameters we wish to determine.</li> <li>\\( \\mathbf{b} \\) is the column vector of the observed values.</li> </ul> <p>The solution, when \\( \\mathbf{A} \\) is overdetermined, is typically given by:</p> \\[ \\mathbf{x} = (\\mathbf{A}^T \\mathbf{A})^{-1} \\mathbf{A}^T \\mathbf{b} \\] </li> <li> <p>Application: Linear Regression</p> <p>A common application of the least squares method is linear regression. In this context, the goal is to find the best-fitting straight line \\( y = mx + c \\) to a set of data points.</p> <p>For linear regression:</p> <ul> <li>\\( f(x) = mx + c \\)</li> <li>The parameters to be determined are the slope \\( m \\) and the y-intercept \\( c \\).</li> </ul> </li> <li> <p>Benefits and Limitations</p> <ul> <li> <p>Benefits:</p> <ol> <li>Provides a best-fitting curve or line to a dataset.</li> <li>Has a clear mathematical formulation and is computationally efficient for many problems.</li> </ol> </li> <li> <p>Limitations:</p> <ol> <li>Sensitive to outliers, as squaring the residuals gives more weight to large deviations.</li> <li>Assumes a specific form for the underlying model (e.g., linearity for simple linear regression).</li> </ol> </li> </ul> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#euler-angles","title":"Euler angles","text":"Do you know about Euler angles? What are they used for? What are their pros and cons? <p>Answer: Euler angles represent rotations in 3D space and have issues like gimbal lock.</p> <p></p> <p>There are multiple conventions for defining Euler angles, but one common sequence is:</p> <ol> <li>Roll (\\( \\phi \\)): Rotation about the body's X-axis.</li> <li>Pitch (\\( \\theta \\)): Rotation about the body's Y-axis.</li> <li>Yaw (\\( \\psi \\)): Rotation about the body's Z-axis.</li> </ol> <p>The specific order and axes of rotation can vary, leading to different conventions like Yaw-Pitch-Roll, Pitch-Yaw-Roll, etc (total 12 types).</p> <ul> <li> <p>Applications:</p> <ol> <li>Aerospace &amp; Robotics: Used extensively to describe the orientation of aircraft, spacecraft, and robots.</li> <li>Computer Graphics: Used in 3D modeling and animation to set the orientation of objects.</li> <li>Physics: Useful in describing rotations in three-dimensional systems.</li> </ol> </li> <li> <p>Pros:</p> <ol> <li>Intuitive Understanding: Each angle has a clear physical interpretation, making it relatively easy to visualize and understand.</li> <li>Compact Representation: Only three angles are required to describe any orientation.</li> </ol> </li> <li> <p>Cons:</p> <ol> <li>Gimbal Lock: This is a situation where you lose one degree of freedom, and it becomes impossible to represent certain rotations. It happens when the second rotation in a sequence aligns two of the rotational axes.</li> <li>Not Unique: Multiple sets of Euler angles can represent the same orientation.</li> <li>Not Always Suitable for Interpolation: Directly interpolating between two sets of Euler angles might not produce the shortest or most    intuitive rotation.</li> <li>Numerical Stability: Repeated conversions between rotation matrices or quaternions and Euler angles can introduce numerical inaccuracies.</li> </ol> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#gimbal-lock","title":"Gimbal lock","text":"Have you encountered gimbal lock? Why does it occur? How to solve it? <p>Answer: Gimbal lock occurs when a three-axis rotation representation loses a degree of freedom. It can be solved using other representations.</p> <ul> <li> <p>Why Does It Occur?</p> <p>To visualize this, imagine three rings representing the three rotational axes, each nested inside the other. </p> <ul> <li>The outer ring represents the first rotation (e.g., yaw).</li> <li>The middle ring represents the second rotation (e.g., pitch).</li> <li>The inner ring represents the third rotation (e.g., roll).</li> </ul> <p>When the middle ring (pitch) is rotated by \\( \\pm 90^\\circ \\), the outer and inner rings become coplanar. This causes the loss of one rotational degree of freedom, as two of the rotational axes align. Now, any rotation about one axis is indistinguishable from a rotation about the other axis.</p> </li> <li> <p>How to Solve Gimbal Lock?</p> <ol> <li> <p>Avoid \\( \\pm 90^\\circ \\) Pitch: One approach, which might not be feasible in all situations, is to avoid reaching the critical pitch angles where gimbal lock occurs. This, however, limits the range of motion.</p> </li> <li> <p>Use Quaternions: Quaternions are a four-dimensional number system that can represent 3D orientations and rotations without suffering from gimbal lock. In many applications, especially in computer graphics and aerospace, quaternions are preferred over Euler angles for this reason. </p> </li> <li> <p>Use Additional or Redundant Sensors: In applications like spacecraft attitude control, additional sensors can be used to determine orientation when gimbal lock is encountered.</p> </li> <li> <p>Switch Rotation Order: Temporarily switch to a different sequence of rotations when approaching gimbal lock. However, this can be complex to implement and may not be suitable for all applications.</p> </li> <li> <p>Use Rotation Matrices or Axis-Angle Representation: While they have their own sets of challenges, in some cases, they might offer ways to maneuver around the gimbal lock problem.</p> </li> </ol> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#quaternions","title":"Quaternions","text":"Are you familiar with quaternions? What are their roles? How can interpolation be performed? <p>Answer: Quaternions are used to represent rotations. Spherical linear interpolation (slerp) can be used for interpolation.</p> <ul> <li> <p>Role in 3D Rotations:</p> <ul> <li> <p>Compact Representation: Quaternions provide a compact way to represent 3D orientations and rotations without the <code>gimbal lock</code> issue that can arise with Euler angles.</p> </li> <li> <p>Efficient Computation: Quaternion operations can be more computationally efficient than their matrix counterparts.</p> </li> <li> <p>Smooth Interpolations: Slerp (spherical linear interpolation) with quaternions can provide smooth transitions between orientations.</p> </li> <li> <p>Numerical Stability: Quaternions can be renormalized easily to combat numerical drift, ensuring they represent a valid rotation.</p> </li> </ul> </li> <li> <p>Interpolation:</p> <p>Slerp (Spherical Linear Interpolation): This is the most common method of quaternion interpolation. Given two quaternions \\( q_1 \\) and \\( q_2 \\), the interpolated quaternion \\( q(t) \\) at a fraction \\( t \\) between 0 and 1 is given by:</p> \\[ q(t) = \\frac{\\sin((1-t)\\theta)}{\\sin(\\theta)}q_1 + \\frac{\\sin(t\\theta)}{\\sin(\\theta)}q_2 \\] <p>where \\( \\theta \\) is the angle between \\( q_1 \\) and \\( q_2 \\).</p> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#monte-carlo-integration","title":"Monte Carlo integration","text":"What is Monte Carlo integration? <p>Answer: Monte Carlo integration is a technique used to estimate the value of a definite integral using random sampling. It is particularly useful when dealing with high-dimensional integrals.</p> <p></p> <ul> <li> <p>Procedure:</p> <ol> <li> <p>Random Sampling: Generate \\( N \\) random points \\( x_i \\) within the domain \\( D \\).</p> </li> <li> <p>Evaluate Function: Evaluate \\( f(x_i) \\) at each of the \\( N \\) points.</p> </li> <li> <p>Compute Average: Calculate the average value of the function over these points:</p> </li> </ol> \\[ \\bar{f} = \\frac{1}{N} \\sum_{i=1}^{N} f(x_i) \\] <ol> <li>Estimate Integral: The integral of \\( f(x) \\) over \\( D \\) is approximated as:</li> </ol> \\[ \\int_D f(x) \\, dx \\approx \\text{volume}(D) \\times \\bar{f} \\] </li> <li> <p>Advantages:</p> <ul> <li>Flexibility: Can handle complex and high-dimensional integrals.</li> <li>Simplicity: The algorithm is straightforward.</li> <li>Parallelism: Easily parallelizable.</li> </ul> </li> <li> <p>Disadvantages:</p> <ul> <li>Convergence: The error decreases as \\( O(N^{-1/2}) \\).</li> <li>Inefficiency: Many samples might be \"wasted\" in regions where the function varies little.</li> </ul> </li> <li> <p>Variance Reduction:</p> <p>To improve efficiency, various techniques can be employed:</p> <ul> <li>Importance Sampling: Sampling more from regions where the function has higher values.</li> <li>Stratified Sampling: Dividing the domain and sampling uniformly from each.</li> <li>Antithetic Variates: Using dependent random variables to reduce variance.</li> </ul> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#nonlinear-to-linear","title":"Nonlinear to linear","text":"How can a nonlinear problem be represented as a linear problem? <p>Answer: Nonlinear problems can be linearized using tangent planes or linear approximations.</p> <p>One common method for linearization is using a <code>Taylor series expansion</code>. </p> <ul> <li> <p>1. One Dimension (Tangent Line)</p> <p>For a single-variable function \\( f(x) \\), the tangent line at a point \\( x_0 \\) provides a linear approximation:</p> \\[ f(x) \\approx f(x_0) + f'(x_0) (x - x_0) \\] <p>This equation represents the linearization of \\( f(x) \\) about the point \\( x_0 \\). The term \\( f'(x_0) \\) is the derivative of the function at the point, which gives the slope of the tangent line.</p> </li> <li> <p>2. Multiple Dimensions (Tangent Plane)</p> <p>For functions of multiple variables, such as \\( f(x, y) \\), the tangent plane at a point \\( (x_0, y_0) \\) provides the linear approximation:</p> \\[ f(x, y) \\approx f(x_0, y_0) + f_x(x_0, y_0) (x - x_0) + f_y(x_0, y_0) (y - y_0) \\] <p>Here, \\( f_x \\) and \\( f_y \\) are the partial derivatives with respect to \\( x \\) and \\( y \\) respectively. The tangent plane captures the variations in the function as you move in the \\( x \\) and \\( y \\) directions.</p> </li> </ul>"},{"location":"6_Math/Concepts/Math_questions/#reference","title":"Reference","text":"<ul> <li>Picture resource 1</li> <li>Picture resource 2</li> <li>Picture resource 3</li> <li>Picture resource 4</li> <li>Picture resource 5</li> <li>Picture resource 6</li> <li>Picture resource 7</li> <li>Picture resource 8</li> </ul>"},{"location":"6_Math/Numerical/","title":"** Numerical Methods **","text":""},{"location":"6_Math/Numerical/#ois-model","title":"OIS Model","text":"<p>In numerical analysis, there are several methods deserve to be mentioned:</p> <ol> <li> <p>Bisection Method.</p> </li> <li> <p>Newton's method.</p> </li> </ol>"},{"location":"6_Math/Optimization/Optimization/","title":"Math Optimization","text":"<p>This chapter is about optimization in math.</p>"},{"location":"6_Math/Optimization/Optimization/#table-of-contents","title":"Table of contents:","text":"<ol> <li>Methods classification.</li> <li>Linear programming v.s. nonlinear programming.</li> <li>Common optimization method.</li> <li>Conditional optimization problems.</li> </ol>"},{"location":"6_Math/Optimization/Methods_classification/Methods_classification/","title":"Optimization Methods Classification","text":"\u65b9\u6cd5\u7c7b\u578b \u65b9\u6cd5\u540d\u79f0 \u7279\u6027 \u5e94\u7528\u9886\u57df \u516c\u5f0f \u5e38\u5fae\u5206\u65b9\u7a0b\u6570\u503c\u89e3\u6cd5 \u9f99\u683c-\u5e93\u5854\u6cd5 - \u9ad8\u7cbe\u5ea6- \u7a33\u5b9a\u6027\u597d- \u8ba1\u7b97\u91cf\u76f8\u5bf9\u8f83\u5927 - \u5e38\u5fae\u5206\u65b9\u7a0b\u6c42\u89e3- \u52a8\u529b\u5b66\u7cfb\u7edf\u6a21\u62df- \u5de5\u7a0b\u548c\u7269\u7406\u95ee\u9898 4\u9636\u9f99\u683c-\u5e93\u5854\u516c\u5f0f\uff08\u5e38\u89c1\u5f62\u5f0f\uff09\uff1a\\(y_{n+1} = y_n + \\frac{1}{6}(k_1 + 2k_2 + 2k_3 + k_4)\\)\\(k_1 = hf(x_n, y_n) \uff0c k_2 = hf(x_n + \\frac{h}{2}, y_n + \\frac{k_1}{2})\\) \u2026 \u6b27\u62c9\u6cd5 - \u8ba1\u7b97\u7b80\u5355- \u7cbe\u5ea6\u8f83\u4f4e- \u65f6\u95f4\u6b65\u957f\u654f\u611f - \u5e38\u5fae\u5206\u65b9\u7a0b\u6c42\u89e3- \u7b80\u5355\u7269\u7406\u7cfb\u7edf\u6a21\u62df \u663e\u5f0f\u6b27\u62c9\u6cd5: \\(y_{n+1} = y_n + hf(x_n, y_n)\\) \u4e2d\u70b9\u6cd5 - \u4f7f\u7528\u4e2d\u95f4\u70b9\u7684\u659c\u7387- \u7cbe\u5ea6\u6bd4\u6b27\u62c9\u6cd5\u66f4\u9ad8- \u7a33\u5b9a\u6027\u8f83\u597d - \u5e38\u5fae\u5206\u65b9\u7a0b\u6c42\u89e3- \u4e2d\u7b49\u7cbe\u5ea6\u8981\u6c42\u95ee\u9898 \u4e2d\u70b9\u6cd5\u516c\u5f0f\uff1a\\(y_{n+1} = y_n + hf\\left(x_n + \\frac{h}{2}, y_n + \\frac{h}{2} f(x_n, y_n)\\right)\\) \u504f\u5fae\u5206\u65b9\u7a0b\u6570\u503c\u89e3\u6cd5 \u6709\u9650\u5dee\u5206\u6cd5 - \u5c06\u5fae\u5206\u65b9\u7a0b\u8f6c\u5316\u4e3a\u4ee3\u6570\u65b9\u7a0b- \u9002\u7528\u4e8e\u504f\u5fae\u5206\u65b9\u7a0b- \u7f51\u683c\u5212\u5206\u5bf9\u7ed3\u679c\u5f71\u54cd\u5927 - \u504f\u5fae\u5206\u65b9\u7a0b\u6c42\u89e3- \u6570\u503c\u5929\u6c14\u9884\u62a5- \u6d41\u4f53\u529b\u5b66 \u4e8c\u9636\u4e2d\u5fc3\u5dee\u5206\u8fd1\u4f3c\uff08\u7528\u4e8e\u504f\u5bfc\u6570\uff09\uff1a\\(f''(x) \\approx \\frac{f(x+h) - 2f(x) + f(x-h)}{h^2}\\) \u6709\u9650\u5143\u65b9\u6cd5 - \u5c06\u95ee\u9898\u57df\u5212\u5206\u4e3a\u5c0f\u533a\u57df- \u9002\u7528\u4e8e\u590d\u6742\u51e0\u4f55\u548c\u8fb9\u754c\u6761\u4ef6- \u7cbe\u5ea6\u8f83\u9ad8 - \u504f\u5fae\u5206\u65b9\u7a0b\u6c42\u89e3- \u7ed3\u6784\u5de5\u7a0b- \u70ed\u4f20\u5bfc\u95ee\u9898 \u6cdb\u5316\u7684\u6709\u9650\u5143\u65b9\u6cd5\u516c\u5f0f\uff1a\\(\\int_{\\Omega} (\\nabla u \\cdot \\nabla v - fv) \\, d\\Omega = 0\\) \u4f18\u5316\u95ee\u9898\u65b9\u6cd5 \u6700\u901f\u4e0b\u964d\u6cd5 - \u4f7f\u7528\u51fd\u6570\u7684\u4e00\u9636\u5bfc\u6570- \u5b9e\u73b0\u7b80\u5355\uff0c\u9002\u7528\u6027\u5e7f- \u53ef\u80fd\u6536\u655b\u901f\u5ea6\u6162 - \u975e\u7ebf\u6027\u65b9\u7a0b\u7ec4\u6c42\u89e3- \u673a\u5668\u5b66\u4e60\u53c2\u6570\u4f18\u5316- \u6700\u5c0f\u5316\u6210\u672c\u51fd\u6570 \u8fed\u4ee3\u516c\u5f0f\uff1a\\(x_{n+1} = x_n - \\alpha_n \\nabla f(x_n)\\) \u725b\u987f\u6cd5 - \u4f7f\u7528\u51fd\u6570\u7684\u4e00\u9636\u548c\u4e8c\u9636\u5bfc\u6570- \u6536\u655b\u901f\u5ea6\u5feb- \u9700\u8981\u8ba1\u7b97Hessian\u77e9\u9635 - \u975e\u7ebf\u6027\u65b9\u7a0b\u7ec4\u6c42\u89e3- \u4f18\u5316\u95ee\u9898 \u8fed\u4ee3\u516c\u5f0f\uff1a\\(x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}\\) \u5171\u8f6d\u68af\u5ea6\u6cd5 - \u4e0d\u9700\u8981\u5b58\u50a8Hessian\u77e9\u9635- \u9002\u7528\u4e8e\u5927\u89c4\u6a21\u95ee\u9898- \u4ec5\u9002\u7528\u4e8e\u4e8c\u6b21\u51fd\u6570 - \u975e\u7ebf\u6027\u65b9\u7a0b\u7ec4\u6c42\u89e3- \u5927\u89c4\u6a21\u4f18\u5316\u95ee\u9898- \u7a00\u758f\u7cfb\u7edf \u8fed\u4ee3\u516c\u5f0f\uff1a\\(x_{n+1} = x_n + \\alpha_n p_n\\)\u5176\u4e2d\uff0c\\(p_n\\) \u662f\u5171\u8f6d\u65b9\u5411\u3002 \u4e8c\u5206\u6cd5 - \u7b80\u5355\u4e14\u7a33\u5b9a- \u6536\u655b\u901f\u5ea6\u76f8\u5bf9\u8f83\u6162- \u9700\u8981\u51fd\u6570\u5728\u533a\u95f4\u4e24\u7aef\u53d6\u4e0d\u540c\u7b26\u53f7 - \u7ebf\u6027\u65b9\u7a0b &amp; \u975e\u7ebf\u6027\u65b9\u7a0b- \u6c42\u89e3\u5b9e\u6570\u6839- \u8fde\u7eed\u51fd\u6570\u7684\u533a\u95f4\u641c\u7d22 \u8fed\u4ee3\u516c\u5f0f\uff1a\\(c = \\frac{a+b}{2}\\)\u5176\u4e2d\uff0ca \u548c b \u662f\u5f53\u524d\u533a\u95f4\u7684\u7aef\u70b9\u3002 \u9ad8\u65af-\u585e\u5fb7\u5c14\u6cd5 - \u6536\u655b\u901f\u5ea6\u901a\u5e38\u6bd4\u96c5\u53ef\u6bd4\u6cd5\u5feb- \u9002\u7528\u4e8e\u5927\u578b\u7a00\u758f\u7cfb\u7edf - \u7ebf\u6027\u65b9\u7a0b\u7ec4- \u6570\u503c\u7ebf\u6027\u4ee3\u6570 \u8fed\u4ee3\u516c\u5f0f\uff1a\\(x_i^{(k+1)} = \\frac{1}{a_{ii}} \\left(b_i - \\sum_{j=1}^{i-1} a_{ij} x_j^{(k+1)} - \\sum_{j=i+1}^{n} a_{ij} x_j^{(k)} \\right)\\) \u96c5\u53ef\u6bd4\u6cd5 - \u7b80\u5355\u8fed\u4ee3\u6cd5- \u5bf9\u89d2\u7ebf\u5143\u7d20\u987b\u975e\u96f6- \u6536\u655b\u901f\u5ea6\u53ef\u80fd\u8f83\u6162 - \u7ebf\u6027\u65b9\u7a0b\u7ec4- \u6570\u503c\u7ebf\u6027\u4ee3\u6570 \u8fed\u4ee3\u516c\u5f0f\uff1a\\(x_i^{(k+1)} = \\frac{1}{a_{ii}} \\left(b_i - \\sum_{\\substack{j=1 \\\\ j \\neq i}}^{n} a_{ij} x_j^{(k)} \\right)\\) \u6570\u503c\u79ef\u5206\u65b9\u6cd5 \u68af\u5f62\u6cd5 - \u7b80\u5355\u4e14\u7a33\u5b9a- \u9002\u7528\u4e8e\u521d\u7b49\u79ef\u5206- \u7cbe\u5ea6\u4e00\u822c - \u6570\u503c\u79ef\u5206- \u8fd1\u4f3c\u6c42\u89e3\u5b9a\u79ef\u5206 \u68af\u5f62\u6cd5\u516c\u5f0f\uff1a \\(\\int_{a}^{b} f(x) \\, dx \\approx \\frac{h}{2} [f(x_0) + 2f(x_1) + 2f(x_2) + \\cdots + 2f(x_{n-1}) + f(x_n)]\\)\u5176\u4e2d\uff0c \\(h = \\frac{b-a}{n}\\) \u3002 Method Type Method Name Features Application Fields Formula Numerical Methods for ODEs Runge-Kutta Method - High accuracy- Good stability- Relatively large computational cost - Solving ordinary differential equations- Dynamical system simulations- Engineering and physics problems 4<sup>th</sup> order Runge-Kutta formula (common form):\\(y_{n+1} = y_n + \\frac{1}{6}(k_1 + 2k_2 + 2k_3 + k_4)\\)\\(k_1 = hf(x_n, y_n), k_2 = hf(x_n + \\frac{h}{2}, y_n + \\frac{k_1}{2})\\) \u2026 Euler's Method - Simple computation- Low accuracy- Sensitive to time step - Solving ordinary differential equations- Simulating simple physical systems Explicit Euler method:\\(y_{n+1} = y_n + hf(x_n, y_n)\\) Midpoint Method - Uses the slope at the midpoint- More accurate than Euler's method- Better stability - Solving ordinary differential equations- Problems requiring moderate accuracy Midpoint method formula:\\(y_{n+1} = y_n + hf\\left(x_n + \\frac{h}{2}, y_n + \\frac{h}{2} f(x_n, y_n)\\right)\\) Numerical Methods for PDEs Finite Difference Method - Converts differential equations to algebraic equations- Suitable for partial differential equations- Grid division greatly affects the result - Solving partial differential equations- Numerical weather prediction- Fluid mechanics Second-order central difference approximation (for partial derivatives):\\(f''(x) \\approx \\frac{f(x+h) - 2f(x) + f(x-h)}{h^2}\\) Finite Element Method - Divides the problem domain into small regions- Suitable for complex geometries and boundary conditions- High accuracy - Solving partial differential equations- Structural engineering- Heat conduction problems Generalized finite element method formula:\\(\\int_{\\Omega} (\\nabla u \\cdot \\nabla v - fv) \\, d\\Omega = 0\\) Optimization Methods Steepest Descent Method - Uses the first derivative of the function- Simple to implement and widely applicable- May converge slowly - Solving nonlinear equations- Parameter optimization in machine learning- Minimizing cost functions Iterative formula:\\(x_{n+1} = x_n - \\alpha_n \\nabla f(x_n)\\) Newton's Method - Uses the first and second derivatives of the function- Fast convergence- Requires the Hessian matrix - Solving nonlinear equations- Optimization problems Iterative formula:\\(x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}\\) Conjugate Gradient Method - Does not require storing the Hessian matrix- Suitable for large-scale problems- Only works for quadratic functions - Solving nonlinear equations- Large-scale optimization problems- Sparse systems Iterative formula:\\(x_{n+1} = x_n + \\alpha_n p_n\\)where \\(p_n\\) is the conjugate direction. Bisection Method - Simple and stable- Relatively slow convergence- Requires the function to have different signs at the interval ends - Linear &amp; nonlinear equations- Solving real roots- Interval search for continuous functions Iterative formula:\\(c = \\frac{a+b}{2}\\)where a and b are the current interval endpoints. Gauss-Seidel Method - Generally faster convergence than the Jacobi method- Suitable for large sparse systems - Solving linear equations- Numerical linear algebra Iterative formula:\\(x_i^{(k+1)} = \\frac{1}{a_{ii}} \\left(b_i - \\sum_{j=1}^{i-1} a_{ij} x_j^{(k+1)} - \\sum_{j=i+1}^{n} a_{ij} x_j^{(k)} \\right)\\) Jacobi Method - Simple iterative method- Diagonal elements must be non-zero- May have slow convergence - Solving linear equations- Numerical linear algebra Iterative formula:\\(x_i^{(k+1)} = \\frac{1}{a_{ii}} \\left(b_i - \\sum_{\\substack{j=1 \\\\ j \\neq i}}^{n} a_{ij} x_j^{(k)} \\right)\\) Numerical Integration Methods Trapezoidal Rule - Simple and stable- Suitable for elementary integrals- Moderate accuracy - Numerical integration- Approximating definite integrals Trapezoidal rule formula: \\(\\int_{a}^{b} f(x) \\, dx \\approx \\frac{h}{2} [f(x_0) + 2f(x_1) + 2f(x_2) + \\cdots + 2f(x_{n-1}) + f(x_n)]\\)where \\(h = \\frac{b-a}{n}\\)"},{"location":"7_Casual_Literary_Notes/","title":"Casual Literary Notes","text":"Text Only<pre><code>{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n</code></pre> <p>{% include list.liquid all=true %}</p>"},{"location":"7_Casual_Literary_Notes/Dunhuang/","title":"Dunhunag Wall Painting Learning","text":""},{"location":"8_Japanese_Learning/","title":"** \ud83d\udc7a Japanese Learning Notes**","text":""},{"location":"8_Japanese_Learning/#this-chapter-is-split-into-sections-below","title":"This chapter is split into sections below:","text":"<ol> <li>\u4e94\u5341\u97f3\u56f3(\u3054\u3058\u3085\u3046\u304a\u3093\u305a).</li> </ol>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/","title":"** \ud83d\uddfe \u4e94\u5341\u97f3\u56f3**","text":""},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#welcome-to-\u65e5\u672c\u8a9e\u306b\u307b\u3093\u3054","title":"Welcome to \u65e5\u672c\u8a9e(\u306b\u307b\u3093\u3054)","text":"Components? <p>There are three types of Japanese in Japanese Writing System: </p> <code>hiragana (\u5e73\u4eee\u540d)</code><code>katakana (\u7247\u4eee\u540d)</code><code>Kanji (\u6f22\u5b57)</code> <p><code>Hiragana</code> is used to express the inherent vocabulary and grammatical auxiliary words in modern Japanese.</p> <p><code>Hiragana</code> evolved from the cursive script (\u8349\u4e66) of Chinese characters. </p> <p> </p> <p>Early <code>Hiragana</code> was wildly used by Japanese women. It was used more for lyrical text, called female characters, female hand.</p> <p><code>Katakana</code> is used for foreign words, foreign names, onomatopoeia, biological, mineral, etc., in modern Japanese.</p> <p><code>Katakana</code> evolved from regular script (\u6977\u4e66) or its radicals of Chinese characters.</p> <p></p> <p><code>Kanji</code> are the logographic Chinese characters taken from the Chinese script and used in the writing of Japanese.</p> <p> </p> <p>Early <code>Kanji</code> was wildly used by Japanese men for history, and papers, which are called male characters, male hands.</p> Before Learning! <p>Since the author is Chinese, concepts will be preferred to be expressed by <code>(\u6f22\u5b57)</code>.</p>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#table-for-\u4e94\u5341\u97f3\u56f3\u3054\u3058\u3085\u3046\u304a\u3093\u305a","title":"Table for \u4e94\u5341\u97f3\u56f3(\u3054\u3058\u3085\u3046\u304a\u3093\u305a)","text":"Introduction <p>For the table of the <code>\u4e94\u5341\u97f3\u56f3</code>\uff08Kana syllabary Pro), we call each column <code>\u6bb5</code> and each row <code>\u884c</code>. The diagram is split into diagrams for <code>\u5e73\u4eee\u540d</code> and <code>\u7247\u4eee\u540d</code>.</p>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u5e73\u4eee\u540d\u7247\u4eee\u540d","title":"\u5e73\u4eee\u540d&amp;\u7247\u4eee\u540d","text":"\u5e73\u4eee\u540d&amp;\u7247\u4eee\u540d \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304b<code>\u30ab</code>(k)\u884c \u304b<code>\u30ab</code> \u304d<code>\u30ad</code> \u304f<code>\u30af</code> \u3051<code>\u30b1</code> \u3053<code>\u30b3</code> \u3055<code>\u30b5</code>(s)\u884c \u3055<code>\u30b5</code> \u3057<code>\u30b7</code>(shi) \u3059<code>\u30b9</code> \u305b<code>\u30bb</code> \u305d<code>\u30bd</code> \u305f<code>\u30bf</code>(t)\u884c \u305f<code>\u30bf</code> \u3061<code>\u30c1</code>(ti/chi) \u3064<code>\u30c4</code>(tsu) \u3066<code>\u30c6</code> \u3068<code>\u30c8</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u306f<code>\u30cf</code>(h)\u884c \u306f<code>\u30cf</code> \u3072<code>\u30d2</code> \u3075<code>\u30d5</code> \u3078<code>\u30d8</code> \u307b<code>\u30db</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u5e73\u4eee\u540d\u3072\u3089\u304c\u306a-hiragana","title":"\u5e73\u4eee\u540d(\u3072\u3089\u304c\u306a) \"hiragana\"","text":"\u5e73\u4eee\u540d \u3042(a)\u6bb5 \u3044(i)\u6bb5 \u3046(u)\u6bb5 \u3048(e)\u6bb5 \u304a(o)\u6bb5 \u3042(a)\u884c \u3042 \u3044 \u3046 \u3048 \u304a \u304b(k)\u884c \u304b \u304d \u304f \u3051 \u3053 \u3055(s)\u884c \u3055 \u3057(shi) \u3059 \u305b \u305d \u305f(t)\u884c \u305f \u3061(ti/chi) \u3064(tsu) \u3066 \u3068 \u306a(n)\u884c \u306a \u306b \u306c \u306d \u306e \u306f(h)\u884c \u306f \u3072 \u3075 \u3078 \u307b \u307e(m)\u884c \u307e \u307f \u3080 \u3081 \u3082 \u3084(y)\u884c \u3084 \u3086 \u3088 \u3089(r)\u884c \u3089 \u308a \u308b \u308c \u308d \u308f(w)\u884c \u308f \u3092 \u3093(n) \u3093"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u7247\u4eee\u540d\u304b\u305f\u304b\u306a-katakana","title":"\u7247\u4eee\u540d(\u304b\u305f\u304b\u306a) \"katakana\"","text":"\u7247\u4eee\u540d \u30a2(a)\u6bb5 \u30a4(i)\u6bb5 \u30a6(u)\u6bb5 \u30a8(e)\u6bb5 \u30aa(o)\u6bb5 \u30a2(a)\u884c \u30a2 \u30a4 \u30a6 \u30a8 \u30aa \u30ab(k)\u884c \u30ab \u30ad \u30af \u30b1 \u30b3 \u30b5(s)\u884c \u30b5 \u30b7(shi) \u30b9 \u30bb \u30bd \u30bf(t)\u884c \u30bf \u30c1(ti/chi) \u30c4(tsu) \u30c6 \u30c8 \u30ca(n)\u884c \u30ca \u30cb \u30cc \u30cd \u30ce \u30cf(h)\u884c \u30cf \u30d2 \u30d5 \u30d8 \u30db \u30de(m)\u884c \u30de \u30df \u30e0 \u30e1 \u30e2 \u30e4(y)\u884c \u30e4 \u30e6 \u30e8 \u30e9(r)\u884c \u30e9 \u30ea \u30eb \u30ec \u30ed \u30ef(w)\u884c \u30ef \u30f2 \u30f3(n) \u30f3"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u304a\u3093-on","title":"\u304a\u3093 \"on\"","text":"\u304a\u3093 \u6e05\u97f3(\u305b\u3044\u304a\u3093) \"seion\"\u6fc1\u97f3(\u3060\u304f\u304a\u3093) \"dakuon\"\u534a\u6fc1\u97f3(\u306f\u3093\u3060\u304f\u304a\u3093) \"handakuon\"\u9577\u97f3(\u3061\u3087\u3046\u304a\u3093) \"chouon\"\u64a5\u97f3(\u306f\u3064\u304a\u3093) \"hatsuon\"\u4fc3\u97f3(\u305d\u304f\u304a\u3093) \"sokuon\"\u62d7\u97f3(\u3088\u3046\u304a\u3093) \"youon\" <p>The original character writing:</p> \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304b<code>\u30ab</code>(k)\u884c \u304b<code>\u30ab</code> \u304d<code>\u30ad</code> \u304f<code>\u30af</code> \u3051<code>\u30b1</code> \u3053<code>\u30b3</code> \u3055<code>\u30b5</code>(s)\u884c \u3055<code>\u30b5</code> \u3057<code>\u30b7</code>(shi) \u3059<code>\u30b9</code> \u305b<code>\u30bb</code> \u305d<code>\u30bd</code> \u305f<code>\u30bf</code>(t)\u884c \u305f<code>\u30bf</code> \u3061<code>\u30c1</code>(ti/chi) \u3064<code>\u30c4</code>(tsu) \u3066<code>\u30c6</code> \u3068<code>\u30c8</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u306f<code>\u30cf</code>(h)\u884c \u306f<code>\u30cf</code> \u3072<code>\u30d2</code> \u3075<code>\u30d5</code> \u3078<code>\u30d8</code> \u307b<code>\u30db</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code> <p>The character writing added with <code>\u309b</code>:</p> \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304c<code>\u30ac</code>(g)\u884c \u304c<code>\u30ac</code> \u304e<code>\u30ae</code> \u3050<code>\u30b0</code> \u3052<code>\u30b2</code> \u3054<code>\u30b4</code> \u3056<code>\u30b6</code>(z)\u884c \u3056<code>\u30b6</code> \u3058<code>\u30b8</code>(ji) \u305a<code>\u30ba</code> \u305c<code>\u30bc</code> \u305e<code>\u30be</code> \u3060<code>\u30c0</code>(d)\u884c \u3060<code>\u30c0</code> \u3062<code>\u30c2</code>(ji) \u3065<code>\u30c5</code>(zu) \u3067<code>\u30c7</code> \u3069<code>\u30c9</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u3070<code>\u30d0</code>(b)\u884c \u3070<code>\u30d0</code> \u3073<code>\u30d3</code> \u3076<code>\u30d6</code> \u30d9<code>\u30d9</code> \u307c<code>\u30dc</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code> <p>The character writing added with <code>\u309c</code>:</p> \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304c<code>\u30ac</code>(g)\u884c \u304c<code>\u30ac</code> \u304e<code>\u30ae</code> \u3050<code>\u30b0</code> \u3052<code>\u30b2</code> \u3054<code>\u30b4</code> \u3056<code>\u30b6</code>(z)\u884c \u3056<code>\u30b6</code> \u3058<code>\u30b8</code>(ji) \u305a<code>\u30ba</code> \u305c<code>\u30bc</code> \u305e<code>\u30be</code> \u3060<code>\u30c0</code>(d)\u884c \u3060<code>\u30c0</code> \u3062<code>\u30c2</code>(ji) \u3065<code>\u30c5</code>(zu) \u3067<code>\u30c7</code> \u3069<code>\u30c9</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u3071<code>\u30d1</code>(p)\u884c \u3071<code>\u30d1</code> \u3074<code>\u30d4</code> \u3077<code>\u30d7</code> \u307a<code>\u30da</code> \u307d<code>\u30dd</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code> <ul> <li>In <code>\u5e73\u4eee\u540d</code>, we use <code>\u3042</code>, <code>\u3044</code>, <code>\u3046</code>, <code>\u3048</code>, and <code>\u304a</code> to extend the pronunciation.</li> <li>In <code>\u7247\u4eee\u540d</code>, we use <code>\u30fc</code> to extend the pronunciation.</li> </ul> \u3042(a)\u6bb5 + \u3042 \u3044(i)\u6bb5 + \u3044 \u3046(u)\u6bb5 + \u3046 \u3048(e)\u6bb5 + \u3044 \u304a(o)\u6bb5 + \u3046 ... <p>The <code>\u3093\u30f3</code> at the end of <code>\u4e94\u5341\u97f3\u56f3</code>.</p> <p>Add <code>\u3064\u30c4(tsu)</code> to express a short pause.</p> <p>E.g: <code>\u304a\u3068</code>\"oto\" \u2192 <code>\u304a\u3064\u3068</code>\"ot_to\".</p> <p>The tiny version of <code>\u3084\u30e4</code>, <code>\u3086\u30e6</code>, and <code>\u3088\u30e8</code>: <code>\u3083\u30e3</code>, <code>\u3085\u30e5</code>, and <code>\u3087\u30e7</code></p> <p>The characters can add <code>\u62d7\u97f3</code>:</p> \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304b<code>\u30ab</code>(k)\u884c \u304b<code>\u30ab</code> \u304d<code>\u30ad</code> \u304f<code>\u30af</code> \u3051<code>\u30b1</code> \u3053<code>\u30b3</code> \u3055<code>\u30b5</code>(s)\u884c \u3055<code>\u30b5</code> \u3057<code>\u30b7</code>(shi) \u3059<code>\u30b9</code> \u305b<code>\u30bb</code> \u305d<code>\u30bd</code> \u305f<code>\u30bf</code>(t)\u884c \u305f<code>\u30bf</code> \u3061<code>\u30c1</code>(ti/chi) \u3064<code>\u30c4</code>(tsu) \u3066<code>\u30c6</code> \u3068<code>\u30c8</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u306f<code>\u30cf</code>(h)\u884c \u306f<code>\u30cf</code> \u3072<code>\u30d2</code> \u3075<code>\u30d5</code> \u3078<code>\u30d8</code> \u307b<code>\u30db</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code> <p>E.g: </p>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u3042a\u884c","title":"\u3042(a)\u884c","text":""},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#references","title":"References:","text":"<ul> <li>\u5e73\u5047\u540d</li> <li>\u7247\u5047\u540d</li> <li>Kanji</li> <li>picture source 1</li> <li>picture source 2</li> <li>picture source 3</li> <li>picture source 4</li> </ul>"},{"location":"9_Guitar_Garage/","title":"Guitar Garage","text":"<p>** This is a chapter for collecting some of the guitar sheets that I am into**</p> <ol> <li>\u6bcf\u5929\u591a\u7231\u4f60\u4e00\u4e9b\uff08\u56fd\u8bed\uff09</li> </ol>"},{"location":"9_Guitar_Garage/Sheet/%E6%AF%8F%E5%A4%A9%E5%A4%9A%E7%88%B1%E4%BD%A0%E4%B8%80%E4%BA%9B/","title":"\u6bcf\u5929\u591a\u7231\u4f60\u4e00\u4e9b\uff08\u56fd\u8bed\uff09","text":"<p>Author: \u5f20\u5b66\u53cb Key: G Capo: #1</p> Sheet <p> </p> C++<pre><code>Prelude\nG D/F# Em Bm C G Am7 D\n\nVerse A\n      G       D/F# \n\u4e5f\u66fe\u8ffd\u6c42\uff0c\u4e5f\u66fe\u5931\u843d\n     Em7      Bm\n\u4e0d\u518d\u6709\u68a6\uff0c\u662f\u4f60\u4e3a\u6211\n      C        G \n\u63a8\u5f00\u5929\u7a97\uff0c\u6253\u5f00\u5fc3\u9501\n   Am7     D\n\u8ba9\u5e0c\u671b\uff0c\u53c8\u8f6c\u52a8\n\nVerse B\n      G       D/F# \n\u5fd9\u788c\u5954\u6ce2\uff0c\u5076\u5c14\u8ff7\u60d1\n\u5fc3\u4e2d\u6709\u7231\uff0c\u4eba\u751f\u5982\u6b4c\n     Em7      Bm\n\u4e3a\u4e86\u4ec0\u4e48\uff0c\u662f\u4f60\u7ed9\u6211\n\u5531\u7740\u6b22\u4e50\uff0c\u6d77\u9614\u5929\u7a7a\n      C        G \n\u4e00\u4efd\u611f\u52a8\uff0c\u4e00\u4e2a\u7406\u7531\n\u6765\u53bb\u4ece\u5bb9\uff0c\u4e0d\u60f9\u70e6\u5fe7\n   Am7  D   G\n\u4e0d\u75b2\u5026\uff0c\u4e0d\u8106\u5f31\n\u6709\u4e86\u4f60\uff0c\u522b\u65e0\u6c42\n\nBridge\nCmaj7   D       Bm      E7\n\u8fd9\u4e16\u754c\u7684\u6c38\u6052\u4e0d\u591a\uff0c\u8ba9\u6211\u4eec\u4e5f\u6210\u4e3a\u4e00\u79cd\nAm7    Am7/G#   Am7/G D\n\u60c5\u6df1\u5982\u6d77\u4e0d\u79fb\u5982\u5c71\uff0c\u7528\u4e00\u751f\u7231\u4e0d\u5b8c\n\nChorus\nG          D/F#       Em       Dm7      G7\n\u6211\u7684\u7231\u4e00\u5929\u6bd4\u4e00\u5929\u66f4\u70ed\u70c8\uff0c\u8981\u7ed9\u4f60\u591a\u4e9b\u518d\u591a\u4e9b\u4e0d\u505c\u6b47\nC           B          Am7  Cm7   D \n\u8ba9\u4f60(\u7684)\u751f\u547d\u53ea\u6709\u751c\u548c\u7f8eOHOH\uff0c\u9057\u5fd8\u8be5\u600e\u4e48\u6d41\u6cea\nG          D/F#       Em       Dm7      G7\n\u6211\u7684\u7231\u4e00\u5929\u6bd4\u4e00\u5929\u66f4\u70ed\u70c8\uff0c\u8981\u7ed9\u4f60\u591a\u4e9b\u518d\u591a\u4e9b\u4e0d\u505c\u6b47\nC           B             Am7       D   G\n\u8ba9\u604b(\u4eba)\u949f\u7231(\u7684)\u6bcf\u53e5\u8a93\u8a00OHOH\uff0c\u4e0d\u518d\u96be\u8ffd\u5168 \u90fd\u5b9e\u73b0\n\nLast\n\u6211\u7684\u7231\u4e00\u5929\u6bd4\u4e00\u5929\u66f4\u70ed\u70c8\uff0c\u8981\u7ed9\u4f60\u591a\u4e9b\u518d\u591a\u4e9b\u4e0d\u505c\u6b47\n\n\u8ba9\u4f60\u7684\u751f\u547d\u53ea\u6709\u751c\u548c\u7f8e\uff0cOHOH\u9057\u5fd8\u8be5\u600e\u4e48\u6d41\u6cea\n\n\u6211\u7684\u7231\u4e00\u5929\u6bd4\u4e00\u5929\u8fd8\u8981\u575a\u51b3\uff0c\u8981\u7ed9\u4f60\u591a\u4e9b\u7136\u540e\u518d\u591a\u4e00\u4e9b\n\n\u8ba9\u604b\u4eba\u949f\u7231\u7684\u6bcf\u53e5\u8a93\u8a00\uff0cOHOH\u4e0d\u518d\u96be\u8ffd\u5168\u90fd\u5b9e\u73b0\n</code></pre>"}]}