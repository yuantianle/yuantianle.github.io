{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"1_Computer_Graphics/","title":"Computer Graphics","text":"<p>My exploration of <code>Computer Graphics</code> stems from my love of art, programming, and scientific equations.</p> <p></p>"},{"location":"1_Computer_Graphics/#this-chapter-is-split-into-three-sections","title":"This chapter is split into three sections:","text":"<ol> <li> <p>Sciences behind CG: the math and physics behind CG.</p> </li> <li> <p>CG tools learning: useful tools for CG.</p> </li> <li> <p>Art Topics: generated arts topics from CG.</p> </li> </ol>"},{"location":"1_Computer_Graphics/Art/","title":"Computer-generated art topics","text":""},{"location":"1_Computer_Graphics/Art/#table-of-contents","title":"Table of contents:","text":""},{"location":"1_Computer_Graphics/CGtech/","title":"Computer Graphics tools learning","text":""},{"location":"1_Computer_Graphics/CGtech/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>OpenCV.</p> </li> <li> <p>Shader.</p> </li> <li> <p>Three.js.</p> </li> <li> <p>Unity.</p> </li> <li> <p>Unreal Engine.</p> </li> <li> <p>Vulkan.</p> </li> </ol>"},{"location":"1_Computer_Graphics/CGtech/OpenCV/","title":"OpenCV","text":""},{"location":"1_Computer_Graphics/CGtech/Shader/","title":"Shader Language","text":""},{"location":"1_Computer_Graphics/CGtech/Threejs/","title":"Three.js","text":""},{"location":"1_Computer_Graphics/CGtech/Unity/","title":"Unity","text":""},{"location":"1_Computer_Graphics/CGtech/Unreal/","title":"Unreal Engine","text":""},{"location":"1_Computer_Graphics/CGtech/Vulkan/","title":"Vulkan","text":""},{"location":"1_Computer_Graphics/Science/","title":"Science behind Computer Graphics","text":""},{"location":"1_Computer_Graphics/Science/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Thermal Dynamics.</p> </li> <li> <p>Noise.</p> </li> <li> <p>Lighting.</p> </li> </ol>"},{"location":"1_Computer_Graphics/Science/Light/","title":"Lightning","text":""},{"location":"1_Computer_Graphics/Science/Noise/","title":"Noise","text":""},{"location":"1_Computer_Graphics/Science/Noise/#\u1d34\u2092\u1d34\u2092\u1d34\u2092-ture","title":"\u1d34\u2092\u1d34\u2092\u1d34\u2092: ture","text":""},{"location":"1_Computer_Graphics/Science/Thermal/","title":"Thermal Dynamics","text":"<p>This section shows the implicit method of thermal transfering with FDE.</p>"},{"location":"1_Computer_Graphics/Science/Thermal/#problem-background","title":"Problem background","text":"<p>Think about the 2D case. Considering the continuum of the whole wall material, heat conduction is the major way to transfer heat. We use heat diffusion as our heat conduction method. Assuming that \\(X\\) is the domain of a 2D plane, \\(T\\) is the temperature at point \\(p\\), and \\(\\alpha\\) is the thermal diffusivity, then we have the Equation:</p> \\[ \\begin{equation}     \\frac{\\partial T}{\\partial t} = \\alpha \\Delta T(p) = \\alpha\\left(\\frac{\\partial^2 T}{\\partial x^2}+\\frac{\\partial^2 T}  {\\partial y^2}\\right),\\quad \\forall p=(x,y)\\in X     \\label{eq:thermal_diffuse} \\end{equation} \\] <p>Take \\(f(p)\\) as a function relates to point \\(p\\), which we set is as a constant function. Dirichlet boundary condition is:</p> \\[ \\begin{equation}     \\left\\{ \\begin{array}{ll}          \\Delta T(p) =0,\\quad\\forall p\\in X     \\\\     \\\\         T(p) =f(p),\\quad\\forall p\\in \\partial X       \\end{array} \\right.     \\label{eq:Dirichlet_boundary_condition} \\end{equation} \\] <p>Neumann boundary condition is:</p> \\[ \\begin{equation}     \\left\\{ \\begin{array}{ll}          \\Delta T(p) =0,\\quad\\forall p\\in X     \\\\     \\\\         \\dfrac{\\partial T(p)}{\\partial n} =f(p),\\quad\\forall p\\in \\partial X       \\end{array} \\right.     \\label{eq:Neumann_boundary_condition} \\end{equation} \\]"},{"location":"1_Computer_Graphics/Science/Thermal/#five-point-stencil-discretization","title":"Five-point stencil discretization","text":"<p>To visualize the phenomenon on a computer, we need to have temperature grids. The grid is used for the discretization of the whole 2D plane. <code>Five-point stencil</code> difference is the method we use to express derivation for the heat partial differential equations. The corresponding temperature grid with a <code>Five-point stencil</code> can be seen in the picture shown below:</p> <p></p> <p>The continuous differential form, shown in the Problem background, is further rewritten into a discrete form by the temperature grid, as shown in the equation below. The sparse matrix system will be solved in an implicit way.</p> \\[ \\begin{equation} \\begin{aligned}     \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = &amp; \\alpha\\left[\\frac{T^{n+1}_{i+1,j}-2T^{n+1}_{i,j}+T^{n+1}_{i-1,j}}    {\\Delta x^2}+\\frac{T^{n+1}_{i,j+1}-2T^{n+1}_{i,j}+T^{n+1}_{i,j-1}}{\\Delta y^2}\\right]     \\\\     &amp;+O(\\Delta t,\\Delta x^2),\\quad \\forall (x,y)\\in X     \\label{eq:thermal_diffuse_discrete} \\end{aligned} \\end{equation} \\] <p>Where \\(i\\) and \\(j\\) are the spacial indices on the temperature grid, \\(n\\) is the temporal index, which monotonically increases over time, and \\(o\\) is infinitesimal in space and time.</p> <p>We also do the same discretized processing for the two boundary conditions. We get the expression of Dirichlet B.C. and Neumann B.C. shown in below two equations [Neil 2015].</p> \\[ \\begin{equation}     T^{n}_{i,j} = C,\\quad \\forall (x,y)\\in \\partial X     \\label{eq:Dirichlet_boundary_condition_discrete} \\end{equation} \\] \\[ \\begin{equation}     \\left\\{ \\begin{array}{ll}          \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i+1,j}-2T^{n+1}_{i,j}-2\\Delta xC}  {\\Delta   x^2}\\right),\\quad\\forall i,\\; (i,j)\\in \\partial X_{left}     \\\\     \\\\         \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i-1,j}-2T^{n+1}_{i,j}-2\\Delta xC}  {\\Delta   x^2}\\right),\\quad\\forall i,\\; (i,j)\\in \\partial X_{right}     \\\\     \\\\         \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i,j+1}-2T^{n+1}_{i,j}-2\\Delta yC}  {\\Delta   y^2}\\right),\\quad\\forall j,\\; (i,j)\\in \\partial X_{top}     \\\\     \\\\         \\frac{T^{n+1}_{i,j}-T^{n}_{i,j}}{\\Delta t} = \\alpha\\left(\\frac{2T^{n+1}_{i,j-1}-2T^{n+1}_{i,j}-2\\Delta yC}  {\\Delta   y^2}\\right),\\quad\\forall j,\\; (i,j)\\in \\partial X_{bottom}     \\end{array} \\right.     \\label{eq:Neumann_boundary_condition_discrete} \\end{equation} \\] <p>Usually, the Five-point stencil discretization with an explicit method will need to be limited by some step length constraints. However, based on our implementation using the implicit method, our iteration step can be far longer than the explicit method, which means the temperature transferring can be sped up by increasing the length of the iteration step.</p>"},{"location":"1_Computer_Graphics/Science/Thermal/#final-results","title":"Final Results","text":"<p>After setting the initial conditions (I.C.) of temperature and boundary conditions (B.C.), we start iterating the equation system until the solution converges to a stable status. The different iteration processes can be seen below.</p> <p>Case 1:<code>Dirichlet B.C:</code> top, right<code>Neumann B.C:</code> bottom, left<code>High temperature I.C:</code> top, right<code>Low temperature I.C:</code> rest of map</p> <p></p> <p>Case 2:<code>Dirichlet B.C:</code> top<code>Neumann B.C:</code> bottom, left, right<code>High temperature I.C:</code> top<code>Low temperature I.C:</code> rest of map</p> <p></p> <p>Case 3:<code>Dirichlet B.C:</code> top, right<code>Neumann B.C:</code> bottom, left<code>High temperature I.C:</code> top, right<code>Low temperature I.C:</code> rest of map</p> <p></p> <p>Case 4:<code>Dirichlet B.C:</code> top<code>Neumann B.C:</code> bottom, left, right<code>High temperature I.C:</code> top<code>Low temperature I.C:</code> rest of map</p> <p></p>"},{"location":"1_Computer_Graphics/Science/Thermal/#references","title":"References","text":"<p>\u201cFinite difference methods,\u201d Neil Balmforth's webpage. [Online]. Available: https://personal.math.ubc.ca/~njb/fd. [Accessed: 14-Nov-2022]. </p>"},{"location":"2_Software_Engineering/","title":"Software Engineering","text":"<p>Being a software engineer requires an understanding of the various technologies used in the industry.</p>"},{"location":"2_Software_Engineering/#this-chapter-is-split-into-7-sections","title":"This chapter is split into 7 sections:","text":"<ol> <li> <p>Agile Scrum: version control.</p> </li> <li> <p>Git and GitHub: version control.</p> </li> <li> <p>Docker: lightweight virtual machine.</p> </li> <li> <p>Swift: Mac OS language.</p> </li> <li> <p>AWS: Amazon web services.</p> </li> <li> <p>Bash Commands: Linux command</p> </li> <li> <p>VS Code: magic IDE with bunches of great extensions.</p> </li> <li> <p>Others: random topics waiting to be classified.</p> </li> </ol>"},{"location":"2_Software_Engineering/Review/","title":"\ud83e\udd5a Blog Egg! For CS561 reviewing","text":"<p>This is the specific section for indexing all the knowledge notes shown in CS561 from OSU. Thanks everybody's hardworking. Let's review what we have learned: \ud83e\udd20 \ud83d\udcaf</p> <ol> <li> <p>AWS</p> </li> <li> <p>Bash commands</p> </li> <li> <p>Agile</p> </li> <li> <p>Git theory and commands</p> </li> <li> <p>REST</p> </li> <li> <p>Mock</p> </li> <li> <p>Cryptographic</p> </li> <li> <p>Auth</p> </li> <li> <p>Tests</p> </li> <li> <p>Concurrency v.s. Prallellism</p> </li> <li> <p>Semantics Versioning</p> </li> <li> <p>Self-documenting Code</p> </li> <li> <p>Dispatch Queue &amp; Dead lock</p> </li> <li> <p>Engineer Principles</p> </li> <li> <p>Map reduce</p> </li> <li> <p>Docker</p> </li> </ol>"},{"location":"2_Software_Engineering/AWS/","title":"AWS","text":"<p>For AWS Developer Associate Certification</p>"},{"location":"2_Software_Engineering/AWS/#there-are-2-sections-in-this-chapter","title":"There are 2 sections in this chapter:","text":"<ol> <li> <p>Basic concepts in AWS.</p> </li> <li> <p>AWS application.</p> </li> </ol>"},{"location":"2_Software_Engineering/AWS/Application/","title":"Application 1: a <code>Decrypter</code> service","text":""},{"location":"2_Software_Engineering/AWS/Application/#task","title":"Task","text":"Situation <p>Now, you want to make a <code>Decrypter</code> service. And below is the pipeline. How could you make it using AWS components?:</p> <ol> <li> <p>Store the data somewhere (e.g. on disk).</p> </li> <li> <p>Load the data from somewhere (e.g. from disk) into a dictionary (hopefully just once).</p> </li> <li> <p>Look up a password in a dictionary (each time someone wants to decrypt).</p> </li> <li> <p>Expose the functionality through a public API.</p> </li> </ol>"},{"location":"2_Software_Engineering/AWS/Application/#idea","title":"Idea","text":"Solution <p>The picture below shows the efficient way to simulate the Decrypter service on AWS.</p> <p></p> Details in the Solution <p>Remember <code>ECS</code> with <code>Load Balancer</code> structure. Let's draw the details between <code>Lambda</code> and <code>Database</code> parts:</p> <p></p>"},{"location":"2_Software_Engineering/AWS/Application/#implementation","title":"Implementation","text":"Implementation <p>Architecture Diagram:</p> <p> </p> <p>Swagger Rainy Day:</p> <p> </p> <p>Swagger Happy Day:</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/","title":"Basic AWS concepts","text":""},{"location":"2_Software_Engineering/AWS/Basic/#table-of-contents","title":"Table of Contents:","text":"<ol> <li> <p> IAM.</p> </li> <li> <p> EC2.</p> </li> <li> <p> Elastic Load Balancing and Auto Scaling.</p> </li> <li> <p> S3.</p> </li> <li> <p> ECS and Docker Containers.</p> </li> <li> <p> Serverless Application.</p> </li> <li> <p> Availbility Zone and Region.</p> </li> </ol>"},{"location":"2_Software_Engineering/AWS/Basic/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/EC2/","title":"EC2","text":"What? <p><code>EC2</code> is Amazon Elastic Compute Cloud. <code>EC2</code> allows you to run virtual servers in the cloud.</p> <p>The concept of <code>EC2</code> can be seen in the picture below:</p> <p></p> <p>The pipeline of launching an <code>EC2</code> instance:</p> <p></p> Why do we choose <code>EC2</code>? <p>Fast, high administration, DIY combination, robust, safe, and cheap!</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/EC2/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/ECS/","title":"Docker Containers and ECS","text":"What is <code>Docker Container</code> and What is <code>Kubernetes</code>? <ul> <li> <p><code>Docker Container</code> is an alternative to traditional virtual machines. It can be understood as the Light-weight VM that we can run our applications with fewer underlying resources and dependencies. <code>Docker Container</code> is very quick to start up and very good for <code>microservices</code>-based applications.</p> </li> <li> <p><code>Kubernetes</code> is a platform for running and managing <code>container</code>s from many container runtimes.</p> </li> </ul> <p>The relationship between Virtual Machine, Container, and Kubernetes can be seen in the picture (which comes from \"Docker or Kubernetes: Which one is right for you?\" in Kubernetes vs. Docker), as shown below :</p> <p> </p> Do you remember <code>EC2</code>? What are <code>ECS</code> and <code>EKS</code>? <p><code>EC2</code>, the Amazon Elastic Compute Cloud we discussed in the previous section, is actually a <code>virtual machine</code>.</p> <p><code>ECS</code> is Amazon Elastic Container Service for you to use <code>container</code> in the AWS cloud. It also provides a fully managed serverless platform or partially self-managed platform for users.</p> <p><code>EKS</code>, the Amazon Elastic Kubernetes, is also offered by AWS to use <code>Kubernetes</code> in the cloud.</p> <p>Below is the structure of ECS service:</p> <p> </p> <p>Here is the definition of each concept shown in the picture above:</p> <p> </p> <p>ECS <code>EC2 Cluster</code> v.s. ECS <code>Fargate Cluster</code>:</p> <p> </p> <p>ECS with <code>Load Balancer</code>:</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/ECS/#references","title":"References:","text":"<ul> <li> <p>Digital Cloud Training</p> </li> <li> <p>Kubernetes vs. Docker</p> </li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/IAM/","title":"IAM","text":"What? <p><code>IAM</code> is Identity and Access Management.</p> <p>IAM can be used to create <code>user</code>, <code>groups</code>, <code>roles</code>, and <code>policies</code>, to AVOID using the <code>Root</code> account to access to AWS resources. The relations between the four concepts can be seen in the picture below:</p> <p></p> <p> </p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/IAM/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/","title":"Elastic Load Balancing and Auto Scaling","text":"What demand? <ul> <li> <p>How can we make sure that our applications have enough capacity and enough <code>EC2</code> instances available?</p> </li> <li> <p>How can we distribute incoming connections to those <code>EC2</code> instances?</p> </li> </ul> How? <ul> <li> <p><code>Auto Scaling</code> helps to make sure that you have the right number of <code>EC2</code> instances to service the demand of your application.</p> </li> <li> <p>Then, put <code>Elastic Load Balancing</code> in front of your application. <code>ELB</code> will distribute incoming connections across the pool of instances that are managed by the <code>Auto Scaling Group</code>.</p> </li> </ul> <p>All in all, those two technologies above enable you to have elastic and fault-tolerant applications.</p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#elasticity-scaling-up-vs-out","title":"Elasticity: Scaling Up v.s. Out","text":"<p>Assume that we have an <code>EC2</code> instance for our application now:</p> <p> </p> <p>Let's see what is <code>Scaling Up</code> (<code>Vertical Scaling</code>):</p> <p></p> <p> </p> <p>Let's see what is <code>Scaling Out</code> (<code>Horizontal Scaling</code>):</p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#amazon-ec2-auto-scaling","title":"Amazon EC2 Auto Scaling","text":"<p>Amazon <code>EC2 Auto Scaling</code> is horizontal scaling (scales out), which dynamically launches and terminates instances. <code>CloudWatch metrics</code> and <code>EC2 status checks</code> will process the responsed information from <code>EC2 Auto Scaling</code>. The pipeline to realize the elasticity and scalability can be seen below\uff1a</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#load-balancing-and-high-availability","title":"Load Balancing and High Availability","text":"<p>From <code>EC2 Auto Scaling</code>, we end up with lots of different <code>instances</code> of the same application. </p> Demand? <p>How do we direct traffic to those <code>instances</code>?</p> Load Balancer <p>As you can see in the pictures below, </p> <ul> <li><code>Load Balancer</code> can not only provide <code>high availability</code> (availability zones) if some server is in the crash.</li> </ul> <p> </p> <ul> <li><code>Load Balancer</code> can also increase <code>fault tolerance</code> when the system has redundant components (more than one server or more than one hardware).</li> </ul> <p> </p> <p>Let's see the case we combine <code>EC2 Auto Scaling</code> and <code>Load Balancer</code> together:</p> <p></p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#types-of-elastic-load-balancer","title":"Types of Elastic Load Balancer","text":"<p>There are four types of <code>Elastic Load Balancer</code>:</p> <p> </p> <p> </p> <p>Here are some use cases for different types of <code>ELB</code>:</p> <p> </p> <p> </p> <p>The details about <code>ALB</code> and <code>NLB</code> focus on the URL they use:</p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/LoadBalancer_Scaling/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/S3/","title":"S3","text":"What and For? <p><code>S3</code> is an object-based storage system.</p> <p>You can use API to access the object's <code>S3</code> bucket (container) storage. Below are the characteristics of the storage service:</p> <p></p> <p>The basic structure of <code>S3</code> bucket:</p> <p> </p> <p>To reach the <code>objects</code> in the bucket using the <code>URL</code>:</p> <p> </p> <p>To reach the <code>bucket</code> using the <code>URL</code>:</p> <p> </p> <p>Different types of <code>S3 storage classes</code>:</p> <p> </p> <p>If you want to transfer one object from one <code>S3</code> class into the other class, you should follow the following hierarchy:</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/S3/#references","title":"References:","text":"<ul> <li>Digital Cloud Training</li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/","title":"Serverless Application","text":""},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#serverless-services","title":"Serverless Services","text":"What are <code>serverless</code> technologies? <p>Definition: AWS offers <code>Serverless</code> technologies for running code, managing data, and integrating applications, all without managing servers.     </p> <p><code>Serverless</code> technologies feature (Iff conditions):</p> <ul> <li>no server management</li> <li>automatic scaling</li> <li>built-in high availability</li> <li>pay-for-use billing model (to increase agility and optimize costs)</li> </ul> <p>Also, <code>Serverless</code> &lt;=&gt; <code>Fully Managed</code>.</p> What should I do with <code>serverless</code> services? <ul> <li> <p>All you have to do is: start using the service and writing code that serves your customers. </p> </li> <li> <p>You really don't have to: manage anything underneath the platform at all (e.g. you don't need to manage EC2 instances, and you don't have to install patches, do provisioning or update software). </p> </li> </ul> Who are AWS <code>serverless</code> services? <p>Remember the architecture in Application 1: a <code>Decrypter</code> service? According to that implementation pipeline, we classify the <code>serverless</code> services into three classes:</p> <p>I. Data store:</p> <ul> <li> <p>AWS  <code>S3</code>, Amazon Simple Storage Service, a serverless, fully elastic file system for builders that makes it easy to set up, scale, and cost-optimize highly available shared storage. (<code>S3</code> is not a database, <code>S3</code> is object storage\u2014it stores files. (It does not block storage though, so not quite that low level.) So in a sense, it\u2019s a \u201clightweight database\u201d the way Docker is a \u201clightweight virtual machine\u201d.)</p> </li> <li> <p>AWS  <code>DynamoDB</code>, a key-value and document database service, delivering single-digit millisecond performance at any scale.</p> </li> <li> <p>AWS  <code>RDS proxy</code>, a managed database proxy for Amazon Relational Database Service (RDS) that makes applications more scalable and secure.</p> </li> </ul> <p>II. Compute:</p> <ul> <li> <p>AWS  <code>Lambda</code>, allows you to run your code as compute functions.</p> </li> <li> <p>AWS  <code>Fargate</code>, a serverless compute engine that works with Amazon Elastic Container Service (ECS) and Amazon Elastic Kubernetes Service (EKS).</p> </li> </ul> <p>III. Application integration:</p> <ul> <li> <p>AWS  <code>API Gateway</code>, a fully-managed service that allows you to be able to connect to an application via REST API or HTTP API.</p> </li> <li> <p>AWS  <code>SQS</code>, Amazon Simple Queue Service is a message queuing service enabling you to decouple and scale microservices, distributed systems, and serverless applications.</p> </li> <li> <p>AWS <code>SNS</code>, Amazon Simple Notification Service is a fully managed messaging service for both application-to-application (A2A) and application-to-person (A2P) communication.</p> </li> </ul> <p>For more, check Serverless on AWS.</p>"},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#an-example-of-using-serverless-services","title":"An example of using Serverless Services","text":""},{"location":"2_Software_Engineering/AWS/Basic/Serverless/#references","title":"References:","text":"<ul> <li> <p>Digital Cloud Training</p> </li> <li> <p>Serverless on AWS</p> </li> </ul>"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/","title":"Availability Zone and Region","text":""},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#region","title":"Region","text":"What is <code>Region</code>? <p>A <code>region</code> in AWS represents a separate geographic area. If you have used AWS before, you must have seen this picture:</p> <p> </p> <p>Each AWS <code>region</code> is isolated and operates independently from other <code>regions</code>. </p>"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#availability-zone","title":"Availability Zone","text":"What is <code>Availability Zone</code>? <p><code>Availability zones</code> are highly available data centers within each AWS <code>region</code>. Each <code>availability zone</code> has independent power, cooling and networking.</p> <p>The <code>availability zones</code> within each <code>region</code> are connected via low-latency links to provide replication and fault tolerance.</p>"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#relation-az-and-region","title":"Relation: AZ and Region","text":"<p>The relationship between <code>Region</code> and <code>Availability Zone</code> can be seen in the picture below:</p> <p> </p>"},{"location":"2_Software_Engineering/AWS/Basic/Zone_region/#references","title":"References:","text":"<ul> <li>AWS Availability Zones, Regions, &amp; Placement Groups Explained</li> </ul>"},{"location":"2_Software_Engineering/Agile/","title":"Agile","text":""},{"location":"2_Software_Engineering/Agile/#table-of-contents","title":"Table of Contents:","text":"<ol> <li> <p>Introduction.</p> </li> <li> <p>Agile Scrum.</p> </li> </ol>"},{"location":"2_Software_Engineering/Agile/intro/","title":"Agile introduction","text":"<p>Nowadays, especially in project management, <code>Agile</code> has becomes a famous interactive processes for developing software.</p>"},{"location":"2_Software_Engineering/Agile/intro/#definition","title":"Definition","text":"What is <code>Agile</code> <p>A interactive processes for developing software.</p> Why not <code>Waterfall</code>? What is <code>Waterfall</code>? <ul> <li> <p>Definition: Every stage depends on the previous stage.</p> </li> <li> <p>Diagram of phases:</p> <pre><code>graph LR\nA[Requirement] --&gt; B[System Design]; \nB --&gt; C[Implementation]; \nC --&gt; D[Testing];\nD --&gt; E[Deployment];\nE --&gt; F[Matainence];</code></pre> </li> <li> <p>Advantage: clear, productive, good time management, and available progress tracing.</p> </li> <li>Disadvantage: no variation, adaptability, or other error once a waterfall project is set in motion.</li> </ul> Why choose Agile? <p>Compared with the linear model <code>Waterfall</code>, <code>Agile</code> is more like Fibonacci, which has better flexibility, adaptivity, and error tolerance.</p>"},{"location":"2_Software_Engineering/Agile/intro/#visulization","title":"Visulization","text":"<p>There are two ways to visualize Agile: </p> <ul> <li><code>Kanban</code></li> <li><code>Scrum</code></li> </ul> <code>Kanban</code> <p>The famous software for <code>Kanban board</code> is Asana:</p> <p></p> <code>Scrum</code> <p>The good software for <code>Scrum board</code> is Jira:</p> <p>One <code>scrum board</code> is for one sprint, which typically set two weeks as period. There are typical three stages:</p> <ol> <li>Initialize: in <code>Backlog</code>, set points for each story/task. Try to assign the points to the story with the number in Fibonacci series such as: <code>1,2,3,5...</code>:      </li> <li>Start: in scrum board, there are three swim lanes: <code>To do</code>, <code>In progress</code>, <code>Done</code>:      </li> <li>End: when you finish the scrum board in the corresponding sprint, you will get a <code>\"burn down\" chat</code>:      </li> </ol>"},{"location":"2_Software_Engineering/Agile/intro/#references","title":"References:","text":"<ul> <li>Picture Resource 1</li> </ul>"},{"location":"2_Software_Engineering/Agile/scrum/","title":"Agile Scrum Concepts","text":"<p>Let's see the concepts that belongs to Agile Scrum. Click tab for unfolding.</p> <p></p>"},{"location":"2_Software_Engineering/Agile/scrum/#roles","title":"Roles","text":"Roles <code>Product Owner</code> <ul> <li> <p>Definition: maxmize the return the business get on investments. Including: salary, company renting fee, facilities, software, and maintenance.</p> </li> <li> <p>E.g.:</p> <ul> <li>WAY 0: set priority in <code>backlog</code>.</li> <li>WAY 1: make the team towards the most valuable work.</li> <li>WAY 2: guarantee team fully understand requirement from user story.</li> </ul> </li> </ul> <code>Scrum Master</code> <ul> <li> <p>Definition: coach, who guide team to over-high level of cohesiveness, self-organization, and performance.</p> </li> <li> <p>E.g.: </p> <ul> <li>Help the team learn.</li> <li>Apply scrum.</li> <li>Agile practice. </li> <li>Remove roadblocks.</li> </ul> </li> </ul> Notice <p><code>Scrum Master</code> is NOT a boss but just a peer.</p> <code>Team Member</code> <ul> <li> <p>Definition: how work done. What tech and tool to use. Who does which task.</p> </li> <li> <p>E.g.: </p> <ul> <li>Doing the job of the team.</li> <li>What is getting done.</li> <li>Focus on result</li> </ul> </li> </ul>"},{"location":"2_Software_Engineering/Agile/scrum/#backlogs","title":"Backlogs","text":"Backlogs <code>Product Backlog</code> <p>Definition: list of deliverables for a product:    </p> <ul> <li>features</li> <li>bug fixes</li> <li>changes</li> <li>anything valuable for the product</li> </ul> <code>Sprint Backlog</code> <p>Definition: TODO list for a sprint: </p> <ul> <li>stories: has been committed to deliverin  this sprint and associating their tasks.</li> </ul>"},{"location":"2_Software_Engineering/Agile/scrum/#rythms","title":"Rythms","text":"Rythms <p>Definition: the sprint cicle. Table of meetings in a week. </p>"},{"location":"2_Software_Engineering/Agile/scrum/#ceremonies","title":"Ceremonies","text":"Ceremonies <code>Sprint Planning Meeting</code> <p>Time Frequency: 1~2 hrs/week</p> <p>Topics:</p> <ul> <li>What will we do?: Identify what must be complete to deliver.</li> <li>How will we do it?: Commit a set of deliverables (stories) for the sprint in the backlog.</li> </ul> <code>Daily Scrum (stand-up meeting)</code> <p>Time Frequency: less 15 mins/workday</p> <p>Topics:</p> <ul> <li>What has been completed</li> <li>Expects to complete</li> <li>Obstacles slowing me down</li> <li>DON'T solve problem</li> </ul> <code>Story Time Meeting</code> <p>Time Frequency: 1 hr/week</p> <p>Topics: </p> <ul> <li> <p>Discuss and improve stories from the product backlog to the sprint backlog:</p> <ul> <li>Story sizing (estimation): how much work will be required per story.</li> <li>Story splitting (estimation): big \u2192 small</li> </ul> </li> <li> <p>De/Refine acceptance criteria.</p> </li> </ul> <code>Sprint Review Meeting</code> <p>Time Frequency: 1~1.5 hrs/week</p> <p>Topics: </p> <ul> <li>End of sprint, show accomplishment (finished stories)</li> <li>NOT decision making meeting</li> </ul> <code>Retrospective Meeting</code> <p>Time Frequency: 1~2 hrs/week</p> <p>Topics: </p> <ul> <li>What learned (only 1 or 2 strategic changes make in the next sprint)</li> <li>NOT decision making meeting</li> </ul>"},{"location":"2_Software_Engineering/Agile/scrum/#abnormal-sprint-termination","title":"Abnormal Sprint Termination","text":"Abnormal Sprint Termination <p>Definition: Because of market, bussiness, competitor, team need to terminate the sprint. Go back to the early sprint to avoid troubles from halfway done work.</p>"},{"location":"2_Software_Engineering/Agile/scrum/#inspect-and-adapt","title":"Inspect and Adapt","text":"Inspect and Adapt <p>Definition: Learn from customer, team, market. &lt;==&gt; another <code>CI</code> (continuous improvement).</p>"},{"location":"2_Software_Engineering/Agile/scrum/#references","title":"References:","text":"<ul> <li>A breathtakingly Brief and Agile Introduction (2012)</li> </ul>"},{"location":"2_Software_Engineering/Docker/","title":"Docker","text":"<p>Docker container is a \"lightweight\" VM. The benifit of using container is that we do not need to care much about hardware level as real virtual machine. Instead, we only focus on the levels above operating system. Also, like WSL2, Docker's operating system can garantee file's real-time real-write synchronization between docker container folder and host folder</p>"},{"location":"2_Software_Engineering/Docker/#this-sub-chapter-can-be-split-into-4-sections","title":"This sub-chapter can be split into 4 sections:","text":"<ol> <li> <p>Basic guidance of docker container for start using Docker.</p> </li> <li> <p>A good model for Docker Image initialization.</p> </li> <li> <p>Docker Compose and it's application.</p> </li> <li> <p>Docker command line.</p> </li> </ol>"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/","title":"A good model for Docker Image initialization","text":"<p>From what we learned: Basic guidance of docker, we learned how to use Docker compose to run containers in parallel. In that learning, we directly use <code>swiftlang/swift:nightly-focal</code> from the Docker repo. Here, we will learn how to create and use our own Docker Image in the Docker compose.</p>"},{"location":"2_Software_Engineering/Docker/A_good_model_for_Docker_Image_initialization/#there-are-three-steps","title":"There are three steps:","text":"<ol> <li>Create a file named <code>Dockerfile</code> in your folder. About FROM, MAINTAINER, and RUN, learn from: What-is-dockerfile .dockerfile<pre><code>FROM swiftlang/swift:nightly-focal\nMAINTAINER simpli\nRUN apt-get update\nRUN apt update\nRUN apt -y install zsh\nRUN apt -y install curl\nRUN apt -y install vim\nRUN sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\nRUN apt-get -y install -y language-pack-en\nRUN zsh\n</code></pre></li> <li>Then run <code>docker build -t simpli_image [location of your dockerfile]</code> to build a Docker Image.  </li> <li>Finally, the yml below as <code>docker-compose run --rm dev</code>: .yml<pre><code>services:\n  dev:\n    image: simpli_image #\"swiftlang/swift:nightly-focal\"\n    volumes:\n      - your directory /swift:/code\n    environment:\n      - USER=your name \n</code></pre></li> </ol> <p>Now you are using your own <code>Docker Image</code> in which <code>zsh</code> &amp; <code>oh-my-zsh</code> have been pre-installed.</p>"},{"location":"2_Software_Engineering/Docker/Docker_Command/","title":"Docker command line","text":"<p>Useful link for understanding Docker concepts:</p> <ul> <li> <p>What Is a Dockerfile: Everything You Need to Know</p> </li> <li> <p>Top Docker Commands That You Need to Master</p> </li> </ul>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#i-docker-image","title":"I. Docker Image","text":""},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-an-image","title":"Create an image:","text":"<ol> <li>Create a Docker file: .dockerfile<pre><code>mkdir Docker_images\ncd Docker_images\nvi Dockerfile\nFROM ubuntu\nMAINTAINER simpli\nRUN apt-get update\nCMD [\"echo\", \"Welcome to Simplilearn\"]\n</code></pre></li> <li>Build a Docker Image with Dockerfile and tag: Git Bash<pre><code>docker build -t simpli_image /D/Docker_images  =&gt; [location of your dockerfile]\n</code></pre></li> </ol>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#check-the-images-we-have","title":"Check the images we have:","text":""},{"location":"2_Software_Engineering/Docker/Docker_Command/#delete-some-image","title":"Delete some image:","text":""},{"location":"2_Software_Engineering/Docker/Docker_Command/#ii-docker-container","title":"II. Docker Container","text":""},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-a-container-based-on-the-image","title":"Create a container based on the image:","text":"Git Bash<pre><code>docker run --name simpli_container simpli_image\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#display-a-list-of-launched-containers","title":"Display a list of launched containers:","text":"Git Bash<pre><code>docker ps -a\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#rename-an-existing-container","title":"Rename an existing container:","text":"Git Bash<pre><code>docker rename [CONTAINER_NAME] [NEW_CONTAINER_NAME]\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#pause-a-running-container","title":"Pause a running container:","text":"Git Bash<pre><code>docker pause [CONTAINER_NAME]\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#stop-a-running-container","title":"Stop a running container:","text":"<p>(somehow directly deleted the container)</p> Git Bash<pre><code>docker stop [CONTAINER_NAME]\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#restart-a-running-container","title":"Restart a running container:","text":"<p>(somehow directly clear the setting of container)</p> Git Bash<pre><code>docker stop [CONTAINER_NAME]\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#removes-all-the-stopped-containers","title":"Removes all the stopped containers:","text":"Git Bash<pre><code>docker container prune [OPTIONS] </code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#quit-and-delete-the-running-containers","title":"Quit and delete the running containers:","text":"Git Bash<pre><code>exit\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#remove-an-existing-container","title":"Remove an existing container:","text":"Git Bash<pre><code>docker rm [CONTAINER] </code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_Command/#create-a-new-image-from-a-containers-file-changes","title":"Create a new image from a container\u2019s file changes:","text":"Git Bash<pre><code>docker container commit [OPTIONS] [CONTAINER_ID] [NEW_IMAGE_NAME]\n</code></pre> <p>The sub-explanation of Docker Compose: What is Docker Compose: Example, Benefits and Basic Commands</p>"},{"location":"2_Software_Engineering/Docker/Docker_compose/","title":"<code>Docker Compose</code> and it's application","text":"<p>We have already touched <code>Docker Compose</code> from Guidance. Now it is time to do some advance behaviors based on <code>Docker Compose</code>!</p> <p><code>Docker Compose</code> is a way to handle more than one <code>DocKer Container</code>. That is setting communiation between <code>DocKer Container</code>s. In this section, we will iterate all the situation between Server and Host combination to finally reach the goal of <code>DocKer Container</code> communications.</p> <p>Assume our mock server looks like this:</p> mockapi.js<pre><code>const express = require('express')\nconst app = express()\nconst port = 3000\nvar path = require('path')\nvar bodyParser = require('body-parser')\napp.use(express.static(path.join(__dirname, 'build')));\nvar WeatherDataController = require('./REST_API/weather');\napp.get('/data/2.5/weather', WeatherDataController.getData);//\n//app.get('/data/2.5/weather', (req, res) =&gt; {\n//  res.json({\"coord\":{\"lon\":123.262,\"lat\":44.5646},\"weather\":[{\"id\":801,\"main\":\"Clouds\",\"description\":\"few clouds\",\"icon\":\"02d\"}],\"base\":\"stations\",\"main\":{\"temp\":285.23,\"feels_like\":284.95,\"temp_min\":285.23,\"temp_max\":285.23,\"pressure\":1014,\"humidity\":94,\"sea_level\":1014,\"grnd_level\":997},\"visibility\":10000,\"wind\":{\"speed\":3.41,\"deg\":190,\"gust\":9.72},\"clouds\":{\"all\":18},\"dt\":1664661306,\"sys\":{\"country\":\"CN\",\"sunrise\":1664660711,\"sunset\":1664702853},\"timezone\":28800,\"id\":2036338,\"name\":\"Kaitong\",\"cod\":200})\n//})\napp.listen(port, () =&gt; {\nconsole.log(`Example app listening on port ${port}`)\n})\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_compose/#1--server-and-client-in-the-same-docker-container","title":"1.  Server and client in the same Docker container","text":"Concept Diagram? S_d&amp;C_d.yml<pre><code>services:\nserver:\nimage: \"swiftlang/swift:nightly-focal\" #simpli_image\nvolumes:\n- \"C:/CS561_WEEK8:/code\"\nenvironment:\n- USER=ytl_5 command: bash -c \"apt-get update &amp;&amp; apt-get install -y nodejs &amp;&amp; node /code/myapp/app.js\"\n</code></pre> Bash<pre><code>#Host:\ndocker-compose run --rm --name myserver server\n\n#Docker:\ncurl localhost:3000/data/2.5/Weather\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_compose/#2--server-in-docker-container-client-on-host","title":"2.  Server in Docker container, client on host","text":"Concept Diagram? S_d&amp;C_h.yml<pre><code>services:\nserver:\nimage: \"swiftlang/swift:nightly-focal\" #simpli_image\nvolumes:\n- \"C:/CS561_WEEK8:/code\"\nenvironment:\n- USER=ytl_5 command: bash -c \"apt-get update &amp;&amp; apt-get install -y nodejs &amp;&amp; node /code/myapp/app.js\"\nports: -\"3000:3000\"\n</code></pre> Bash<pre><code>#Host:\ndocker-compose run --rm --service-ports server\n\n#Host:\ncurl localhost:3000/data/2.5/Weather\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_compose/#3--server-on-host-client-in-docker-container","title":"3.  Server on host, client in Docker container","text":"Concept Diagram? S_h&amp;C_d.yml<pre><code>services:\nclient:\nimage: \"swiftlang/swift:nightly-focal\" #simpli_image\nvolumes:\n- \"C:/CS561_WEEK8:/code\"\nenvironment:\n- USER=ytl_5 command: bash -c \"apt-get update &amp;&amp; apt-get install -y nodejs &amp;&amp; node /code/myapp/app.js\"\n</code></pre> Bash<pre><code>#Host:\ndocker-compose run --rm client\n\n#Docker Container:\ncurl host.docker.internal:3000/data/2.5/weather\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Docker_compose/#4--server-in-docker-container-client-in-another-docker-container","title":"4.  Server in Docker container, client in another Docker container","text":"Concept Diagram? S_d&amp;C_another_d.yml<pre><code>services:\nserver:\nimage: \"swiftlang/swift:nightly-focal\"\nvolumes:\n- \"C:/CS561_WEEK8:/code\"\nenvironment:\n- USER=ytl_5 command: bash -c \"apt-get update &amp;&amp; apt-get install -y nodejs &amp;&amp; node /code/myapp/app.js\"\nclient:\nimage: \"swiftlang/swift:nightly-focal\"\nvolumes:\n- \"C:/CS561_WEEK8:/code\"\n- USER=ytl_5 </code></pre> Bash<pre><code>#Host:\ndocker-compose run --rm --name myserver server\ndocker inspect myserver | grep IPAddress\ndocker-compose run --rm --name myclient client\ndocker inspect myclient | grep IPAddress\n\n#Docker Container:\ncurl &lt;server ip address&gt;:3000/data/2.5/weather\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Guidance/","title":"Basic guidance of docker container","text":"<p>Docker is a useful tool with CI and backend work. Especially there are some cases that we need to test code in different system. Let's take swift as an example. We make it works on Windows 10.</p>"},{"location":"2_Software_Engineering/Docker/Guidance/#step-1-install-docker-desktop","title":"Step 1. Install Docker Desktop","text":"<p>We can download  Docker Desktop from the website and install it on your Windows 10.</p>"},{"location":"2_Software_Engineering/Docker/Guidance/#step-2-run-docker-container","title":"Step 2. Run Docker Container","text":"<p>To run <code>Docker Container</code>, firstly you need to have a <code>Docker Image</code>. There are two ways to have an <code>Image</code>:</p> <ul> <li>Create an <code>Image</code> by using <code>dockerfile</code> (see in A good model for Docker Image initialization).</li> <li>Git clone an <code>Image</code> from Docker Hub.</li> </ul> <p>After you have the <code>Docker Image</code> as the system mirror settings, you can create a <code>Docker Container</code> as an realization of the system. There are two ways to create the <code>Docker Container</code>:</p> <ul> <li>Docker <code>run</code>.</li> <li>Docker <code>compose</code>.</li> </ul>"},{"location":"2_Software_Engineering/Docker/Guidance/docker_compose/","title":"Run container by using <code>docker compse</code>","text":""},{"location":"2_Software_Engineering/Docker/Guidance/docker_compose/#step-1-create-a-docker-composeyml-file","title":"Step 1. Create a <code>docker-compose.yml</code> file","text":"docker-compose.yml<pre><code>services:\ndev:\nimage: \"swiftlang/swift:nightly-focal\" #Default setting package for your system\nvolumes:\n- /Users/&lt;YOUR_DIC_TO_INSTALL_SWIFT&gt;/swift:/code\nenvironment:\n- USER=&lt;YOUR_NAME&gt;\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Guidance/docker_compose/#step-2-launch-the-dev-docker-service-created-in-step-2","title":"Step 2. Launch the <code>dev</code> Docker service created in Step 2","text":"<p>Turn on your Docker Desktop. Then run the code below. </p> <p>Once inside your docker container, <code>cd code</code>.  From <code>\\code</code> directory you can run the swift command.</p> Git Bash<pre><code>docker-compose run --rm dev\n</code></pre>"},{"location":"2_Software_Engineering/Docker/Guidance/docker_run/","title":"Run container by using <code>docker run</code>","text":""},{"location":"2_Software_Engineering/Docker/Guidance/docker_run/#safely-running-docker-container","title":"Safely running Docker Container","text":"<p>Instead of running <code>docker run --rm dev</code> in the terminal, I suggest directly using Docker Desktop to run <code>docker image</code> that you cloned from the Docker Hub or the one created by yourself ( see in A good model for Docker Image initialization or in Confluence )</p> <p>If you close your terminal window that ran <code>docker run --rm dev</code>, it will somewhat <code>pause</code> your container then you can not re-<code>start</code> the docker container you created again because you have already closed your terminal process. (This case also equals to you <code>pause</code> your container in Docker Desktop, and you suddenly turn Docker Desktop off. If you reopen the Docker engine again and try to <code>start</code> the container, you are forbidden to do it. I struggled with this lots of times at the start.)</p> <p>Instead, I directly run the image I have in Docker Desktop. And once I want to stop my container (save all the installed files in it and run again in the future) and shut down my laptop, I directly click <code>stop</code> of the container and turn off the Docker Desktop engine for next time use. </p> <p></p> <p></p> <p></p> Danger <p>(It doesn't mean you cannot run the terminal anymore. After you run the container through the Docker Desktop engine, you can open any terminal to edit your container status. Just at this time. closing the terminal will not affect your container process.)</p>"},{"location":"2_Software_Engineering/Github/","title":"Git &amp;  Github","text":"<p>Version control is important especially when we are collaborating with others for a big project. <code>Git</code> is one of the tools for version control. <code>GitHub</code> is a cloud service for uploading and storing repos you edit locally.</p>"},{"location":"2_Software_Engineering/Github/#this-section-is-split-into-below-sections","title":"This section is split into below sections:","text":"<ol> <li> <p>Git theory for understanding Git essence (\ud83d\udcaf Highly recommend reading first before using the command line). </p> </li> <li> <p>Git commands for a start using Git commands.</p> </li> <li> <p>GitHub Action for CI.</p> </li> <li> <p>GitHub Semantics Versioning for a convention.</p> </li> </ol>"},{"location":"2_Software_Engineering/Github/action/","title":"GitHub Action","text":""},{"location":"2_Software_Engineering/Github/commands/","title":"Git Basic Commands","text":""},{"location":"2_Software_Engineering/Github/commands/#initialize-git-repo","title":"Initialize Git repo","text":"<p>Initialize the local repository by using: <code>git init</code></p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#check-status","title":"Check status","text":"<p>Create a README.md file:</p> <p> </p> <p>Check the status of the local repo by using: <code>git status</code> </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#add-changes","title":"Add changes","text":"<p>Add changes into the staging area by using: <code>git add .</code> or <code>git add *</code></p> <p> </p> <p>Recheck the <code>status</code>: </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#commit-to-the-local-repo","title":"Commit to the local repo","text":"<p><code>Commit</code> the new snapshot to the local repo:  <code>git commit -m \"&lt;mesage&gt;\"</code></p> <p> </p> <p>Recheck the <code>status</code>: </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#rename-branch-name","title":"Rename branch name","text":"<p>Rename the main branch named from <code>master</code> into <code>main</code> by using: <code>git branch -m master main</code></p> <p> </p> <p>Recheck the <code>status</code>: </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#create-a-branch-and-switch","title":"Create a branch and switch","text":"<p>Create a new branch by using: <code>git branch m_branch_1</code></p> <p> </p> <p>Then switch to the new branch: <code>git checkout m_branch_1</code></p> <p> </p> <p>Or you can do one step instead of the above to command lines: <code>git checkout -b m_branch_1</code></p> <p>Recheck the <code>status</code>: </p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#merge-changes-into-main","title":"Merge changes into main","text":"<p>Edit the README.md file by: <code>vim README.md</code></p> <p> </p> <p>Commit the new branch: <code>git commit -a -m 'Added encourage sentence'</code></p> <p> </p> <p>Switch back to the main branch and merge the new branch into the main branch: <code>git merge m_branch_1</code></p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#check-the-commit-history","title":"Check the commit history","text":"<p>Take a look at git log: <code>git log</code></p> <p> </p> <p>Use graph selection in git log: <code>git log --graph --oneline --decorate --all</code></p> <p> </p> <p>More details: <code>git log --graph --abbrev-commit --decorate --date=relative --all</code></p> <p> </p> <p>In <code>Sourcetree</code>:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#rebase-branch","title":"Rebase branch","text":"<p>We rebase main branch into m_branch_2: <code>git rebase m_branch_2</code></p> <p> </p> <p>Check the folder in different branches:</p> <p> </p> Warning <p>Even though we rebase the main branch <code>onto</code> (or <code>on top of</code>) m_branch_2, since we cannot delete the main branch, there is NO DIFFERENCE WITH rebasing m_branch_2 onto the main branch:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/commands/#squash-and-merge","title":"Squash and merge","text":"<p>Look at the commit history below; we want to <code>squash</code> the last three commits on m_branch2 into one:</p> <p> </p> <p>We use this <code>rebase</code> command with interactive selection: <code>git rebase -i HEAD~3</code>; Do the edition as below:</p> Before After <p>Then it will automatically <code>commit</code>. You should add some commit messages:</p> Before After <p>After finishing <code>squash</code>, the terminal will return:</p> <p> </p> <p>The commit history will look like this:</p> <p> </p> <p>Finally, We <code>merge</code> the m_branch_2 into the main:</p> <p> </p> <p>Automatically <code>commit</code> and ask for a commit message:</p> <p> </p> <p>The commit history now looks like the below:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/sematicsversion/","title":"GitHub Semantics Versioning","text":""},{"location":"2_Software_Engineering/Github/sematicsversion/#demand-analysis","title":"Demand analysis","text":"<p>When we work as a team, we need to coordinate projects, or we also need to lower coordinate costs. Thus, we need to set some rules for it. <code>Semantics</code>Versioning` is widely used in GitHub version control.</p>"},{"location":"2_Software_Engineering/Github/sematicsversion/#semantics-versioning-20","title":"Semantics Versioning 2.0","text":"<p>\\({Major}.{Minor}.{Patch}\\)</p> Explainations MajorMinorPatch <p>\\(1.0.0 \\rightarrow 2.0.0\\)</p> <p>For: API changes or when code contains breaking changes of API.</p> <p>Example: </p> <ul> <li>Amy changed the function of the API. </li> </ul> Breaking Changes <ul> <li>False: add some features.</li> <li>True: remove, rename sth.</li> </ul> <p>\\(1.0.0 \\rightarrow 1.1.0\\)</p> <p>For: Change <code>function signature</code>, add new features, or add some functionallity. (no breaking change, no bug fix.)</p> <p>Example: </p> <ul> <li>Amy added new features to her function.</li> <li>Amy organized the signature of her function.</li> <li>Amy added some extra individual code to her function body.</li> </ul> <p>\\(1.0.0 \\rightarrow 1.0.1\\)</p> <p>For: Bug fix. (Should be cleared when the first two increase.)</p> <p>Example:</p> <ul> <li>Amy fixed a bug in her API function.</li> </ul>"},{"location":"2_Software_Engineering/Github/theory/","title":"Git Theory","text":"<p>When you are first using Git, you must feel confused about the questions shown below</p> Question <ul> <li>How does Git help us do version control?</li> <li>What is <code>commit</code> essentially?</li> <li>What is <code>branch</code> essentially?</li> <li>What is <code>diff</code> essentially?</li> <li>Does <code>committing</code> equal <code>patching</code>?</li> <li>What is <code>rebase</code> essentially?</li> </ul> <p>I hope this section can help you to understand Git behaviors deeply. </p>"},{"location":"2_Software_Engineering/Github/theory/#git-objects","title":"Git objects","text":"<p>Git repository is constructed by <code>Git objects</code>. Git references each object by using their <code>object ID</code> (OID for short). </p> Note <p><code>Git objects</code> has three types: <code>blob</code>, <code>tree</code>, and <code>commit</code>. They have below functions:</p> <ul> <li> <code>blob</code>  file contents </li> <li> <code>tree</code>  directory listings </li> <li> <code>commit</code>  snapshots</li> </ul> Commands and commit history that we will use <ul> <li> <p>The command that we can retrieve the <code>OID</code> of <code>Git objects</code>: <code>git rev-parse &lt;ref&gt;\u200b</code></p> <ul> <li> <p><code>&lt;ref&gt;</code> will be the parameters below: </p> <ul> <li><code>HEAD</code>: the currently checked-out branch's latest commit.</li> <li><code>HEAD^{tree}</code>: the root tree of the currently checked-out branch's latest commit.</li> <li><code>HEAD:&lt;file path&gt;</code>: the file content at the moment of the currently checked-out branch's latest commit.</li> </ul> </li> </ul> </li> <li> <p>The command that we decrypt the <code>OID</code> SHA-1 hash into plain-text files: <code>git rev-parse &lt;ref&gt;\u200b</code></p> </li> <li> <p>In the commit history, please focus on the commit hash:</p> <p> </p> </li> </ul>"},{"location":"2_Software_Engineering/Github/theory/#git-file-content-storage-blob","title":"Git file content storage: blob","text":"<p><code>blobs</code> contain file contents. </p> <p>Let's use the command lines: </p> <p> <code>git rev-parse HEAD:README.md</code> and <code>git cat-file -p &lt;OID&gt; | head -n 8</code></p> <p> </p> <p>The contents at <code>HEAD:README.md</code> matches the README.md file contents in the current working directory:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/theory/#git-directory-tree","title":"Git directory: tree","text":"<p>We should notice that <code>blobs</code> only contain file contents. However, <code>trees</code> record files' names and their directories. The concept can be seen in the graph as shown below:</p> <p> </p> <p>Let's use the command lines: </p> <p> <code>git rev-parse HEAD^{tree}</code> and <code>git cat-file -p &lt;OID&gt; | head -n 15</code></p> <p>As shown below, a <code>tree</code> is an ordered column list of: file modes, paired with object types, the OID, and path entries for the object at that path. </p> <p> </p> Reminding <p>The objects shown in the list are all <code>blobs</code>. But the objects can also be <code>trees</code>. When some objects in the tree are <code>trees</code>, they are <code>subdirectories</code>. </p> <p>Trees can point to other trees! \ud83d\ude0e</p>"},{"location":"2_Software_Engineering/Github/theory/#git-history-snapshot-commit","title":"Git history snapshot: commit","text":"<p>The <code>tree</code> itself doesn\u2019t know where it exists within the repository; that is the role of the objects pointing to the tree. The object role is the <code>commit</code>!</p> <p>To understand the <code>commit</code> more straightforward, firstly, let's use the command lines: </p> <p> <code>git rev-parse HEAD</code> and <code>git cat-file -p &lt;OID&gt;</code></p> <p> </p> <p>Combining the concept map below, each <code>commit</code> contains:</p> <ul> <li>A pointer to its root tree, representing the state of the working directory at that time.</li> <li>A list of parent commits corresponding to the previous snapshots (commits). A commit with no parents is a root commit, and a commit with multiple parents is a merge commit.</li> <li>Metadata describing the snapshot. Such as:<ul> <li>Author and committer's name, email address, and date</li> <li>A commit message. The commit message is an opportunity for the commit author to describe the purpose of that commit with respect to the parents.</li> </ul> </li> </ul> <p> </p> <p>All in all, we call <code>commit</code> a <code>snapshot</code> in time. Remember the commit history from <code>Sourcetree</code>. The <code>snapshot</code> is a \"slice\" of your local repo at some node point in time. <code>Snapshot</code> is to a repository, as a screenshot is to a video.</p>"},{"location":"2_Software_Engineering/Github/theory/#git-branch","title":"Git branch","text":"<p>In Git, we use <code>branches</code> as pointers to the commits to move around the Git history and make changes instead of directly referring to OIDs most of the time.</p> <p>In other words, the <code>branch file</code> contains the OID of a commit.</p> <p>Don't believe me? Let's see what is a <code>main branch</code> in the working directory: <code>.git/refs/heads</code>:</p> Directory Sourcetree <p>Familiar with the OID <code>0d49b6d5afa5762d5e8a261008b14f574bbc1f01</code>? Check the OID shown in the terminal of Git history snapshot: commit!</p> <p>Yes, right now <code>main branch</code> points to the same OID that <code>HEAD</code> points to:</p> <p> </p> <p> </p> Tip <p><code>Branches</code> are significantly different from <code>Git objects</code> we talked before:</p> <ul> <li><code>Commits</code>, <code>trees</code>, and <code>blobs</code> CANNOT change their contents once created (immutable).</li> <li> <p><code>Branches</code> can be moved to track a specific commit branch (like the \"<code>tail</code>\" of the <code>link list</code>). </p> <ul> <li>E.g: if we update the current branch by creating new commits, both <code>HEAD</code> and the branch <code>main</code> will update to point to that new commit!</li> </ul> </li> </ul>"},{"location":"2_Software_Engineering/Github/theory/#big-graph","title":"Big graph","text":"<p>From what we have learned from Git objects and Git branchs, we can treat the <code>local repo</code> as the objects diagram shown below:</p> <p> </p> Hierarchy <ul> <li> branches   commits</li> <li> commits \u00a0  other commits   their root trees</li> <li> trees \u2003\u2003  other trees   blobs</li> <li> blobs \u2003\u2002\u00a0  nothing. </li> </ul> Important conclusions <ul> <li>Time moves from left to right.</li> <li>Commit dependencies are from right to left.</li> <li>Each commit has a single root tree.</li> <li>Same blobs are reachable from multiple root trees. </li> <li>Since these trees reference trees and blobs by their OID, these snapshots DON'T need multiple copies. of the same data.</li> </ul>"},{"location":"2_Software_Engineering/Github/theory/#git-diff","title":"Git diff","text":"<p>So far, we know that Git stores series of <code>commits</code>. But why doesn't Git store data as a series of changesets or differences? In fact, sometimes the <code>commits</code> use the function of the <code>diff</code>, but not all the time.</p> <p>According to Derrick Stolee's favorite analogies, think of commits as having a wave/partical duality in physics, where sometimes they are treated like <code>snapshots</code> and other times they are treated like <code>diffs</code>. Simply, we can have following formula:</p> \\[ commits =  diffs \\cup snapshots \\] So, what is the <code>diff</code>? <p>The <code>diff</code> is dynamically generated from the snapshot data (blobs) by comparing the root trees of the commit and its parent. </p> <p>Git can compare ANY two snapshots in time, not just adjacent commits. The comparison starts with the root trees, which are always different. The Git performs a depth-first-search (DFS) on the subtrees by following pairs when paths for the current tree have different OIDs.</p> <p>Take the diagram as an example shown below:</p> <p> </p> Let's do DFS following pairs! <ul> <li> <p>The root trees have different values for the <code>docs</code>, so we recurse into those two trees. </p> <ul> <li> <p>Those trees have different values for <code>M.md</code>:</p> <ul> <li>so those two <code>blobs</code> are compared line-by-line;</li> <li>and that <code>diff</code> is shown. </li> </ul> </li> <li> <p>Still, within <code>docs</code>, <code>N.md</code> is the same, so that is skipped, and we pop back to the root tree.  </p> </li> </ul> </li> <li> <p>The root tree then sees that the things directories have equal OIDs as well as the <code>README.md</code> entries.</p> </li> </ul> <p>In the diagram above, we notice that the things tree is never visited, and so none of its reachable objects are visited. This way, the cost of computing a diff is relative to the number of paths with different content.</p> Notice!\u2003 commit, \u274c patch <p>With <code>commit</code>, parent information, including differences, has been stored. That's why Git does not choose the <code>patch</code> as the functional implementation. </p> <p><code>Patch</code> only implements the <code>diff</code> part but cannot traverse commit history. <code>Snapshots</code> record the commit history in time.</p>"},{"location":"2_Software_Engineering/Github/theory/#two-commands-implementing-diff","title":"Two commands implementing <code>diff</code>","text":""},{"location":"2_Software_Engineering/Github/theory/#git-cherry-pick","title":"git cherry-pick","text":"<ul> <li> <p>Brief description: A commit is accidentally made to the wrong branch. You can switch to the correct branch (now it is <code>HEAD</code> branch) and <code>cherry-pick</code> the commit to where it should belong in this <code>HEAD</code> branch.</p> </li> <li> <p>Technical details: The <code>git cherry-pick &lt;OID&gt;</code> command creates a new commit with an identical diff (arbitrary diff between two neighbor commits) to the new commit whose parent is the current commit. </p> </li> </ul> Steps of <code>cherry-pick</code>: <ol> <li>Compute the <code>diff</code> between the commit  and its parent. <li>Apply that <code>diff</code> to the current HEAD.</li> <li>Create a new <code>commit</code> whose root tree matches the new working directory and whose parent is the commit at HEAD.</li> <li>Move the ref at <code>HEAD</code> to that new commit.</li> <p> </p> Important! <p>We didn\u2019t \u201cmove\u201d the commit to be on top of our current HEAD; We created a new commit whose diff matches the old commit.</p>"},{"location":"2_Software_Engineering/Github/theory/#git-rebase","title":"git rebase","text":"<p>The <code>git rebase</code> command in the most basic form is like a series of <code>git cherry-pick</code> commands, replaying <code>diffs</code> on top of a different commit.</p> Steps of <code>rebase</code>: <ol> <li> <p>In default, <code>git rebase &lt;target&gt;</code> will discover the list of commits that are reachable from <code>HEAD</code> but not reachable from <code>&lt;target&gt;</code>.</p> <ul> <li>[Example]: the common base P is computed to determine the commit list <code>A</code>, <code>B</code>, and <code>C</code>.</li> </ul> </li> <li> <p>Then, the <code>rebase</code> command navigates to the <code>&lt;target&gt;</code> location and performs <code>git cherry-pick</code> commands on this commit list, starting from the oldest commits.</p> <ul> <li>[Example]: then cherry-picked on top of the target to construct new commits in sequence: <code>A'</code>, <code>B'</code>, and <code>C'</code>.</li> </ul> </li> </ol> <p> </p> Important! <p>The commits <code>A'</code>, <code>B'</code>, and <code>C'</code> are brand new commits that share a lot of information with <code>A</code>, <code>B</code>, and <code>C</code>, but are distinct new objects (their OIDs are totally different). </p> <p>In fact, the old commits still exist in your repository until garbage collection runs.</p>"},{"location":"2_Software_Engineering/Github/theory/#git-add-and-git-commit","title":"git add and git commit","text":"<p>Known the basic theory of Git, let's go back to the two basic Git command: <code>git add</code> and <code>git commit</code>. The diagram shown below is the design of them two.</p> <p> </p>"},{"location":"2_Software_Engineering/Github/theory/#git-add","title":"git add","text":"What do <code>git add</code> do? <p><code>git add</code> create <code>blobs</code> for newly added files and append index for both creating and editing blob.</p> <p>Let's directly create a new file named <code>intro.txt</code> in the main branch and <code>git add .</code>:</p> <p> </p> <p> </p> <p>If we directly check the <code>index</code> file under <code>./.git</code>, it shows messy code. We use the command line to check what is in the index: <code>git ls-files --stage</code></p> <p> </p> <p>We can see; now an OID has been added to the index list for mapping <code>intro.txt</code>.</p> <p>Let's check the OID: <code>659096bbe255c5137a9020740d077a5071b13ff7</code> </p> <p> </p> <p>Oh yeah! It is the new file's content! </p> <p>Combining the knowledge in Git blob, you are 100% sure: The OID (or hash index/key) was appended in the <code>index folder</code> because we have also created a <code>blob</code> file when we do <code>git add</code>. </p> Explore OID: <code>659096bbe255c5137a9020740d077a5071b13ff7</code> <p>Let's check the folder: <code>./.git/objects</code>.</p> <p> </p> <p>REMEMBER: OID above is <code>65</code>+<code>9096bbe255c5137a9020740d077a5071b13ff7</code></p> <p>We select the folder named <code>65</code> since </p> <p> </p> <p>We see the file with the hash of the second part of the OID: <code>9096bbe255c5137a9020740d077a5071b13ff7</code></p> <p>In fact, we can directly use the first 7 digits of the OID to check the object's type and content:</p> <p> </p>"},{"location":"2_Software_Engineering/Github/theory/#git-commit","title":"git commit","text":"What do <code>git commit</code> do? <p><code>git commit</code> based on the <code>blobs</code> in the local repo, furtherly create a new <code>commit</code> and it's root <code>tree</code> for them.</p> <p>Let's <code>git commit -m \"added intro.txt\"</code>:</p> <p> </p> <p>Go into the <code>./.git/objects</code> folder. We can see the two created folders:</p> <p> </p> <code>ce</code> <code>b9</code> <p>Now you are 100% sure: there is one object <code>tree</code> and another <code>commit</code>.</p> Explore folder <code>ce</code> and <code>b9</code> <p>By combining the contents in the fold file's hash, we can get two OIDs:</p> <ul> <li>OID1: <code>ce</code> + <code>bc14637e116de809cfb39fc6d021f5ba54d015</code> = <code>cebc14637e116de809cfb39fc6d021f5ba54d015</code></li> <li>OID2: <code>b9</code> + <code>56ad5fbafbfc0050d73a7289661ceb764f5a8f</code> = <code>b956ad5fbafbfc0050d73a7289661ceb764f5a8f</code></li> </ul> <p>As we concluded at the end of git add, we only use the first 7 digits and use <code>git cat-file -t &lt;OID&gt;</code> and <code>git cat-file -p  &lt;OID&gt;</code>:</p> <p> </p> <p>Yeah! <code>cebc146</code> is the <code>commit</code> object!</p> <p> </p> <p>Yeah! <code>b956ad5</code> is the <code>tree</code> object!</p> <p>Git functions looks easy but there are some concepts are confusing. I have spent a whole week figuring out what was going on in deep. Then I spent two days for the conclusion in this section. If you check this article in details, I believe, you will treat Git in different angle! \ud83c\udfd6\ufe0f\ud83c\udf7b</p> <p>Also don't forget to check if you can answer the questions at the start of this article. \ud83d\udcaf\ud83e\udd34</p>"},{"location":"2_Software_Engineering/Github/theory/#references","title":"References:","text":"<ul> <li>Commits are snapshots, not diffs</li> </ul>"},{"location":"2_Software_Engineering/Others/","title":"Others","text":"<p>Section with topics waiting for being classified.</p>"},{"location":"2_Software_Engineering/Others/Concurrency/","title":"Concurrency v.s. Parallelism","text":"<p>Look at the picture shown below (from Concurrency vs Parallelism) to understand the difference between concurrency and parallelism:</p> <p></p> Watchout! <p>Concurrent \u2190 Parallel</p> <ul> <li> <p>If a task is a <code>concurrent</code> task, it may or may not execute in <code>parallel</code>.</p> </li> <li> <p>If a task is a <code>parallel</code> task, it is definitely a <code>concurrent</code> task</p> </li> </ul>"},{"location":"2_Software_Engineering/Others/Concurrency/#references","title":"References:","text":"<ul> <li>Picture Resource 1</li> </ul>"},{"location":"2_Software_Engineering/Others/Lock_mutex_semaphore/","title":"Lock, Mutex, and Semaphore","text":""},{"location":"2_Software_Engineering/Others/Self_documenting_code/","title":"\ud83d\ude0e Self-documenting Code","text":""},{"location":"2_Software_Engineering/Others/Self_documenting_code/#about-the-topic","title":"About the topic","text":"<p>Let's look at the code case shown below:</p> Question <p>What does the code below for? question.c++<pre><code>float a, b, c; a=9.81; b=5; c= .5*a*(b^2);\n</code></pre></p> <p>Of course, it is hard to read and understand the code above. Let's see the <code>self-documenting</code> version of the last code block:</p> Self-documenting version improved_1.c++<pre><code>const float gravitationalForce = 9.81;\nfloat timeInSeconds = 5;\nfloat displacement = (1 / 2) * gravitationalForce * (timeInSeconds ^ 2);\n</code></pre> <p>Now, you can feel that <code>self-documenting</code> is a good code-writing habit for code understanding and development, even if we do not have comments. But! If your self-documenting is too complex, the variable name itself will cause code smell, which affects the readability of codes. So why not also add comments!</p> Self-documenting + Comment version improved_2.c++<pre><code>/* compute displacement with Newton's equation x = v\u2092t + \u00bdat\u00b2 */\nconst float gravitationalForce = 9.81;\nfloat timeInSeconds = 5;\nfloat displacement = (1 / 2) * gravitationalForce * (timeInSeconds ^ 2);\n</code></pre> <p>But do not add comments on each line:</p> Bad Comment example bad.c++<pre><code>const float a = 9.81; //gravitational force\nfloat b = 5; //time in seconds\nfloat c = (1/2)*a*(b^2) //multiply the time and gravity together to get displacement.\n</code></pre> <p>If your team requires <code>zero comments</code> coding style, transfer your code block with comments into <code>function closure</code>:</p> Self-documenting + Function closure version improved_3.c++<pre><code>float computeDisplacement(float timeInSeconds) {\nconst float gravitationalForce = 9.81;\nfloat displacement = (1 / 2) * gravitationalForce * (timeInSeconds ^ 2);\nreturn displacement;\n}\n</code></pre>"},{"location":"2_Software_Engineering/Others/Self_documenting_code/#self-documenting-in-swift","title":"Self-documenting in Swift","text":"<p>Let's see how to do self-documenting in <code>Swift</code>:</p> Question question.swift<pre><code>import Foundation\nfunc greet(_ s1: String, _ s2: String) -&gt; String {\nreturn \"Hello \\(s1)!  Glad you could visit from \\(s2).\"\n}\nassert(greet(\"Will\", \"Portland\") == \"Hello Will!  Glad you could visit from Portland.\")\n</code></pre> Notice! <p>Swift restricts the <code>parameter name</code> before each argument input when we implement the function, i.e., you are not encouraged to run <code>greet(\"Bill\", \"Cupertino\")</code> unless you use <code>_</code> (Omitting Argument Labels) before <code>parameter name</code> in the <code>function signature</code>. This semantic diminishes ambiguities when compiler compiling.</p> <p>In Swift, each function parameter has both a <code>parameter name</code> and an <code>argument label</code>. </p> <ul> <li> <p>The <code>parameter name</code> is used in the implementation of the function (in <code>function signature</code>). </p> </li> <li> <p>The <code>argument label</code> is used when calling the function; each argument is written in the function call with its argument label before it (in <code>call site</code>). </p> </li> </ul> <p>So we do self-documenting firstly based on refining <code>parameter name</code>.</p> Self-documenting in Swift improved_1.swift<pre><code>import Foundation\nfunc greet(person: String, hometown: String) -&gt; String {\nreturn \"Hello \\(person)!  Glad you could visit from \\(hometown).\"\n}\nassert(greet(person: \"Will\", hometown: \"Portland\") == \"Hello Will!  Glad you could visit from Portland.\")\n</code></pre> <p>You can observe that when implementing the function, <code>greet(person: \"Will\", hometown: \"Portland\")</code> still reads not like natural language. Let's add <code>argument label</code>!</p> Self-documenting in Swift + Argument label improved_1.swift<pre><code>import Foundation\nfunc greet(person: String, from hometown: String) -&gt; String {\nreturn \"Hello \\(person)!  Glad you could visit from \\(hometown).\"\n}\nassert(greet(person: \"Will\", from: \"Portland\") == \"Hello Will!  Glad you could visit from Portland.\")\n</code></pre> <p>Thanks, the person who always visits us from Portland! </p>"},{"location":"2_Software_Engineering/Others/Self_documenting_code/#references","title":"References:","text":"<ul> <li> <p>What is self-documenting code and can it replace well documented code? [closed]</p> </li> <li> <p>Function Argument Labels and Parameter Names</p> </li> </ul>"},{"location":"2_Software_Engineering/Others/crypto/","title":"\ud83e\uddba Cryptographic","text":"<p>The transmission and storage of files need to be encrypted, otherwise the privacy of file content will be very easy to be disclosed. </p> <p>About file transmission, we have discussed in the section about OAuth 2.0. In this section, we are talking about the way to encrypt stored files.</p>"},{"location":"2_Software_Engineering/Others/crypto/#cryptographic-hash-function","title":"Cryptographic hash function","text":"<p>Yes, to store the file secretly, we can use <code>Cryptographic hash function</code> to generate <code>checksum</code>, which we have mentioned before in the command line sha1sum.</p> <p><code>Cryptographic hash function</code> should have below properties:</p> <ul> <li>Avalanche effect: Small changes to input should result in big changes to output, this property is called <code>Avalanche effect</code>.</li> <li>Deterministic: The same input always produces the same output.</li> <li>Non-invertible: (if you record the mapping table between plain text and hash value, it is another case.)</li> <li>Collection resistance: The algorithm should be <code>1 --&gt; mul</code>, or <code>1 --&gt; 1</code>. Should not be <code>mul --&gt; 1</code>.</li> </ul> <p>The picture below shows the property of <code>Cryptographic hash function</code>:</p> <p> </p>"},{"location":"2_Software_Engineering/Others/crypto/#hash-algorithms","title":"Hash Algorithms","text":"<p>There are three famous hash algorithms:</p> <ul> <li>SHA1: function which returns <code>160-bit (20-byte)</code> hash value. <code>commit ID</code> is forty hexadecimal characters that specify a 160-bit SHA-1 hash.</li> <li>SHA2: consists of six hash functions with digests (hash values) that are <code>224</code>, <code>256</code>, <code>384</code>, or <code>512</code> bits: <code>SHA-224</code>, <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, <code>SHA-512/224</code>, <code>SHA-512/256</code>.</li> <li>SHA3: Subset of the broader family of algorithms called <code>Keccak</code>. This algorithm won the hash function competition called NIST.</li> </ul>"},{"location":"2_Software_Engineering/Others/crypto/#hash-salt","title":"Hash salt","text":"<p>As you saw that <code>Cryptographic hash function</code> has <code>Non-invertible</code> and <code>Deterministic</code> properties. If we use the same hash, we definitely know that we are using the same file. As a hacker, it is easy for you to build a hash cheating table!</p> <p><code>Salt</code> is random data that is used as additional input to a one-way function that hashes data, a password or passphrase.</p> <p>Let's compare the <code>normal Hash</code> with <code>Hash added salt</code>.</p> Hash added salt: Username Salt value String to be hashed Hashed value = SHA256 (Password + Salt value) user1 D;%yL9TS:5PalS/d password123D;%yL9TS:5PalS/d 9C9B913EB1B6254F4737CE947EFD16F16E916F9D6EE5C1102A2002E48D4C88BD user2 )&lt;,-* password123)&lt;,-* 6058B4EB46BD6487298B59440EC8E70EAE482239FF2B4E7CA69950DFBD5532F2 normal Hash: Username String to be hashed Hashed value = SHA256 user1 password123 57DB1253B68B6802B59A969F750FA32B60CB5CC8A3CB19B87DAC28F541DC4E2A user2 password123 57DB1253B68B6802B59A969F750FA32B60CB5CC8A3CB19B87DAC28F541DC4E2A <p>It is obvious that; output with <code>Hash added salt</code> algorithm prevents the increase the <code>Non-invertible</code> property and diminishes <code>Deterministic</code> property.</p>"},{"location":"2_Software_Engineering/Others/crypto/#references","title":"References:","text":"<ul> <li> <p>SHA-1 wiki</p> </li> <li> <p>SHA-2 wiki</p> </li> <li> <p>SHA-3 wiki</p> </li> </ul>"},{"location":"2_Software_Engineering/Others/engineer/","title":"Engineer Principles","text":""},{"location":"2_Software_Engineering/Others/engineer/#solid-princiles","title":"SOLID princiles","text":"<p>If we are doing <code>OOD</code> (Object-Oriented Design), we should follow the <code>SOLID</code> principles:</p> <p> </p>"},{"location":"2_Software_Engineering/Others/engineer/#abstract-interface","title":"Abstract Interface","text":"<p>For the last one, <code>Dependency Inversion</code> principle, we can use the concept of <code>abstract interface</code> as an implementation.</p> <p> </p> Why do we care? <ol> <li>Decouple components -- loosely coupled</li> <li>Mock</li> <li>Unit test</li> <li>Develop in parallel</li> <li>Do user-centered design and iterate cheaper. Yeah, BFFs!</li> </ol>"},{"location":"2_Software_Engineering/Others/engineer/#rest-apis","title":"REST APIs","text":"<p>Check REST APIs.</p>"},{"location":"2_Software_Engineering/Others/engineer/#bffs","title":"BFFs","text":"<p><code>BFF</code>: Backend for Frontend. <code>Backend For Frontend</code> is a design pattern created with not only the developer but, more importantly, the user and their experience in mind. </p>"},{"location":"2_Software_Engineering/Others/engineer/#references","title":"References:","text":"<ul> <li>Picture Resource 1</li> </ul>"},{"location":"2_Software_Engineering/Swift/","title":"Swift","text":"<p>Although I am using Windows 10 and Linux, I never know when I will need to build projects for Mac OS. Time to learn!</p>"},{"location":"2_Software_Engineering/Swift/#this-sub-chapter-can-be-separated-into-two-sections","title":"This sub-chapter can be separated into two sections:","text":"<ol> <li> <p>Swift environment installation on Win10 for running Swift on Windows 10.</p> </li> <li> <p>Language Notes for the questions record my practice.</p> </li> </ol>"},{"location":"2_Software_Engineering/Swift/Notes/","title":"Notes for Swift learning","text":""},{"location":"2_Software_Engineering/Swift/Notes/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Dispatch queue and Dead lock</p> </li> <li> <p>Map, Filter and Reduce</p> </li> </ol>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/","title":"Dispatch queue and Dead lock","text":""},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#i-dispatch-queue-from-will-braynen","title":"I. Dispatch queue (from Will Braynen)","text":""},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#1-what","title":"1\ufe0f\u20e3 What?","text":"<ul> <li>A dispatch queue is an object-like structure that manages the tasks you submit to it. All dispatch queues are first-in, first-out (FIFO) data structures. Thus, the tasks you add to a queue are always started in the same order that they were added.\u201d (source: Apple documentation). That\u2019s important.</li> </ul>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#2-for","title":"2\ufe0f\u20e3 For?","text":"<ul> <li>Well, it\u2019s a way to run multi-threaded code without using threads directly. It\u2019s not as low level as working with threads. </li> </ul>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#3-diff-with-threads","title":"3\ufe0f\u20e3 Diff with threads?","text":"<ul> <li> <p>A dispatch queue can manage its own pool thread, etc, and ultimately the point of a dispatch queue is to keep track of what instruction to execute next while giving you a higher-level API instead of dealing with threads directly</p> </li> <li> <p>Whereas you can think of a thread as where instructions actually execute; for example, a thread might have <code>start</code>, <code>stop</code>, and <code>sleep</code> methods. A thread is short for a thread of execution and is the smallest sequence of programmed instructions that can be managed independently by a scheduler, which is typically [but not always] a part of the operating system\u201d (wikipedia).  </p> </li> </ul>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#ii-serial-queue-concurrent-queue-main-dispatch-queue-and-thread","title":"II. Serial queue, Concurrent queue, Main dispatch queue and Thread","text":""},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#-grammar-and-properties","title":"\ud83e\udd0f Grammar and Properties","text":"<ul> <li>The table below shows how to use the dispatch queue, and in what situation:</li> </ul> DQueue type Grammar Properties Serial queue <code>DispatchQueue(lablel:\"..\").sync/.async { \u2026 }</code> Private, conccurrent Concurrent queue <code>DispatchQueue(lablel:\"..\", attributes: .concurrent).sync/.async { \u2026 }</code> Global, parallel Main dispatch queue <code>DispatchQueue.main.sync { \u2026 }</code> Global, conccurrent"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#-dispatch-queue-vs-thread","title":"\ud83d\udc6f\u200d\u2640\ufe0f Dispatch Queue v.s. Thread","text":"<ul> <li>The table below concludes the relationship between:</li> </ul> D.Queue type / Thread Main thread Other thread Task Processing Type Serial queue <code>sync</code>: main thread  N/A N/A  <code>async</code>: multiple threads [serial] [concurrent] Concurrent queue N/A multiple threads [parallel] Main dispatch queue main thread N/A [serial] <ul> <li>Q&amp;A</li> </ul> If it is the first time your call <code>let myQueue = DispatchQueue(label:\"test queue\")</code> and <code>sync</code>, how many queues will app have for main thread? Which queue will tasks in <code>sync</code> code block be queuing? <p>Two. One is main queue. Another one is private queue created by <code>let myQueue = DispatchQueue(label:\"test queue\")</code>. Tasks in <code>sync</code> code block will be queuing in the new created private queue. You can also feel the answer from the figure in \"No dead lock case (serial queue with sync)\"</p> What <code>queue</code> will tasks in <code>sync</code> block be on? <p>When you call <code>let myQueue = DispatchQueue(label:\"test queue\")</code>, you will send the code in the block of <code>sync</code> to some other queue besides existing queue (such as main queue).</p> <p>No matter in serial, concurrent or parallel processing, you can always have multiple queues (* but not for threads).</p> What <code>thread</code> will tasks in <code>sync</code> block be on? <p>Remember: Context-switching between threads is expensive. Cheaper to stay on the same thread if you can.</p> <p>Anytime you call <code>sync</code>, even if you do not do <code>DispatchQueue.main.sync { \u2026 }</code>(to send the work to the main dispatch queue) and instead synchronously dispatch to some other queue, even a private queue you created, the task you submitted might still execute on the main thread.</p> What <code>queue</code> and <code>thread</code> will tasks in <code>DispatchQueue.main.sync { \u2026 }</code> block be on? <p>Main queue. Main thread.</p> Deadlock condition? <p><code>Same thread</code> &amp; <code>serial queue</code> &amp; <code>sync</code> ---&gt; deadlock.</p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#iii-dead-lock-in-dispatch-queue","title":"III. Dead lock in dispatch queue","text":"<p>To understand dead lock happends in dispatch queue processing, we firstly need to know what is the Concurrency.</p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#dead-lock-case-1-dispatch-queue","title":"Dead lock case 1 (dispatch queue)","text":"<p>Code</p> dl_1.swift<pre><code>import Foundation\nlet myQueue = DispatchQueue(label:\"test queue\")\nprint(\"1\")\nmyQueue.async{\nprint(\"2\")\nmyQueue.sync{\nprint(\"3\")\n}\nprint(\"4\")\n}\nprint(\"5\")\n</code></pre> <p>Output</p> Text Only<pre><code>1\n5\n2\n</code></pre> <p>Explaination Picture</p> <p></p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#dead-lock-case-2-serial-queue","title":"Dead lock case 2 (serial queue)","text":"<p>Code</p> dl_2.swift<pre><code>import Foundation\nprint(\"1\")  \nDispatchQueue.main.sync{\nprint(\"2\")\n}\nprint(\"3\")\n</code></pre> <p>Output</p> Text Only<pre><code>1\n</code></pre> <p>Explaination Picture</p> <p></p> Be careful!! <p>Please DISTINGUISH the difference between <code>DispatchQueue.main.sync{...}</code> and <code>myQueue.sync{...}</code> by take a look at the case shown below </p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#no-dead-lock-case-serial-queue-with-sync","title":"No dead lock case (serial queue with <code>sync</code>)","text":"<p>Code</p> ndl.swift<pre><code>import Foundation\nlet myQueue = DispatchQueue(label:\"test queue\")\nprint(\"1\")\nmyQueue.sync{\nprint(\"2\")\n}\nprint(\"3\")\n</code></pre> <p>Output</p> Text Only<pre><code>1\n2\n3\n</code></pre> <p>Explaination Picture</p> <p></p>"},{"location":"2_Software_Engineering/Swift/Notes/Dispatch_queue/#application-of-dispatch-queue","title":"Application of Dispatch Queue","text":"<p>The example shown below indicates that we can use <code>Dispatch Queue</code> as a \"thread lock\" to protect the thread processing for a code block from interrupted by other thread.</p> application.swift<pre><code>import Foundation\n// Read-write pattern - using a serial dispatch queue\nprotocol DataProvider {\nfunc getValue(_ key: String) -&gt; Int?\nfunc updateValue(_ key: String, _ value: Int)\n}\nclass MockData: DataProvider {\nfunc getValue(_ key: String) -&gt; Int? {\nreturn 6\n}\nfunc updateValue(_ key: String, _ value: Int) {}\n}\n/// A thread-safe data provider\nclass Data: DataProvider {\n// singleton pattern\nstatic let shared = Data()\nprivate init() {}\nprivate var lookupTable: [String: Int] = [:]\n// Dispatch queue lock for protecting read and write behaviors\nprivate let lock = DispatchQueue(label: \"edu.oregonstate.data-provider-lock\")\n// read\nfunc getValue(_ key: String) -&gt; Int? {\nlock.sync {\nreturn lookupTable[key]\n}\n}\n// write\nfunc updateValue(_ key: String, _ value: Int) {\nlock.async {\nself.lookupTable[key] = value\n}\n}\n}\n// Thread 1 - reader\nif (Data.shared.getValue(\"a\") ?? 0) &lt; 5 {\n// do important stuff\n}\n// Thread 2 - writer\nData.shared.updateValue(\"a\", 5)\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/","title":"Map, Filter and Reduce","text":"<p>Map-Filter-Reduce are well known as <code>Syntactic Sugar</code>, which is a term for syntax changes in computer programming which make it easier for humans to code. Also, it is a <code>Fan-in Fan-out</code> way to process multiple tasks.</p>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#grammar","title":"Grammar","text":"Text Only<pre><code>map(function(type1 -&gt; type1))\n</code></pre> Text Only<pre><code>filter (function(type1 -&gt; bool))\n</code></pre> Text Only<pre><code>reduce(init_val(type3), function(type1, type 2-&gt; type3))\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way1-function","title":"Way1: Function","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#example","title":"Example","text":"<p>Steven Luscher on Twitter</p>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#code","title":"Code","text":"way1.swift<pre><code>import Foundation\nfunc cook(food: String) -&gt; String {\nvar transformedFood = \"\"\nswitch food {\ncase \"\ud83c\udf3d\": \ntransformedFood = \"\ud83c\udf7f\" \nprint(1)\ncase \"\ud83d\udc2e\": \ntransformedFood = \"\ud83c\udf54\"\nprint(2)\ncase \"\ud83d\udc14\": \ntransformedFood = \"\ud83c\udf73\"\nprint(3)\ndefault: transformedFood = food // remains uncooked\n}\nreturn transformedFood\n}\nfunc eat(food1: String, food2: String) -&gt; String {\nvar transformedFood = \"\ud83d\udca9\"\nreturn transformedFood\n}\nfunc isVegetarian(dish: String) -&gt; Bool {\nreturn dish==\"\ud83c\udf73\"\n}\n//Map\nlet meals = [\"\ud83c\udf3d\", \"\ud83d\udc2e\", \"\ud83d\udc14\"].map(cook)\n//Filter\nlet filtered_meals = meals.filter(isVegetarian)\n//Reduce\nlet result = filtered_meals.reduce(\"\",eat)\n//Print\nprint(meals)\nprint(filtered_meals)\nprint(result)\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#result","title":"Result","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way2-closure","title":"Way2: Closure","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#example_1","title":"Example","text":"<p>Realize the assert shown below with closure:</p> Q2.swift<pre><code>for _ in 0...5 {\nlet foodNames = [\"\ud83c\udf54\": \"hamburger\", \"\ud83c\udf5f\": \"french fries\", \"\ud83c\udf3d\": \"popcorn\"]\nvar outcome = foodNames.map({...}).filter({}).reduce(...,{...})\noutcome.removeFirst()\nassert(\noutcome == \"Hamburger Popcorn\" ||\noutcome == \"Popcorn Hamburger\" \n)\n}\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#code_1","title":"Code","text":"way2.swift<pre><code>import Foundation\nfor _ in 0...5 {\nlet foodNames = [\"\ud83c\udf54\": \"hamburger\", \"\ud83c\udf5f\": \"french fries\", \"\ud83c\udf3d\": \"popcorn\"]\n//Map\nvar mapped = foodNames.map({(key,value) -&gt; String in return value.capitalized})\n//Filter\nvar filterred = mapped.filter({(food:String) -&gt; Bool in return !(food == \"French Fries\")})\n//Reduce\nvar reduced = filterred.reduce(\"\",{a, b in a +  \" \" + b})\nreduced.removeFirst()\nvar outcome = reduced\nassert(\noutcome == \"Hamburger Popcorn\" ||\noutcome == \"Popcorn Hamburger\" \n)\n}\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#result_1","title":"Result","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#way3-using-the-built-in-operator","title":"Way3: Using the built-in operator","text":""},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#example_2","title":"Example","text":"<p>Realize the assert shown below with built-in operator:</p> Q3.swift<pre><code>let outcome = [2, 3, 5, 8].map({...}).filter({...}).reduce(...,...)\nassert(outcome == 108)\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#code_2","title":"Code","text":"way3.swift<pre><code>import Foundation\nlet outcome = [2, 3, 5, 8].map( {$0 + 1} ).filter( {$0 != 5} ).reduce(1, *)\nassert(outcome == 108)\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Notes/Map_reduce/#result_2","title":"Result","text":""},{"location":"2_Software_Engineering/Swift/Swift_on_win10/","title":"Swift on Windows 10","text":""},{"location":"2_Software_Engineering/Swift/Swift_on_win10/#there-are-two-sections-in-this-chapter","title":"There are two sections in this chapter:","text":"<ol> <li> <p>TL;DR.</p> </li> <li> <p>VS Code-Docker for editing Swift on Win10.</p> </li> </ol>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/TL_DR/","title":"TL;DR","text":"<p>VS Code + Docker. Especially useful on Windows, but can be handy on MacOS too. For a step-by-step guide, see VS Code-Docker for editing Swift on Win10 .</p> <p>Here is Tianle Yuan\u2019s own summary from Slack.</p> <ol> <li> <p>Install the extensions of the swift, docker, and dev containers in vs code.</p> </li> <li> <p>run docker</p> </li> <li> <p>run vs code and click the docker logo on the left sidebar.</p> </li> <li> <p>run the image in vscode terminal and open the swift image in the container as u did in the docker desktop</p> </li> </ol> <p></p> <p>For testing ur swift code:</p> <ol> <li> <p><code>ctrl</code>\u00a0+\u00a0<code>shift</code>\u00a0+\u00a0<code>p</code></p> </li> <li> <p>in command window at the top, enter: docker containers: attach shell</p> </li> <li> <p>swift test in your terminal</p> </li> </ol> <p></p> <p>For example:</p> <p></p> <p>Moreover, you can even get the following instead, which looks more like what you get in Xcode:</p> <p></p> <p>See VS Code - Docker for a nice Swift edition on Windows10 for more details.</p>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/","title":"VS Code-Docker for editing Swift on Win10","text":"<p>As a student who is also confused about using Swift on Windows10, I can understand how hard you are if you cannot afford a Macbook . Let's get started and prove that we can do the same thing as a Windows pioneer!</p> <p>There are several steps here for you to reach a slightly friendly interface:</p> <ol> <li> <p>Software preparation.</p> </li> <li> <p>Set up Swift image on your local machine.</p> </li> <li> <p>Use Docker Container in your VS Code.</p> </li> <li> <p>Edit Swift code and do testing. [Not enough syntax highlighting and no autocomplete]</p> </li> <li> <p>An updated way to do Swift code editing and testing. [syntax highlighting and autocomplete]</p> </li> </ol> Text Only<pre><code>Please feel free to extend the content of the page. Window10 students need your contributions! \ud83e\udde0\ud83e\udde0\n</code></pre>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#1-software-preparation","title":"1. Software Preparation","text":"<p>By default, make sure your system has already been installed:</p> <p>(1) Git Bash (https://git-scm.com/downloads); This requirement is optional. Since this course requires you to use the <code>git</code> command, Git Bash is the incident software for installing git on windows. You can also use your cmd or PowerShell.</p> <p>(2) VScode (https://code.visualstudio.com/Download).</p> <p>Then download and install:</p> <p>(3) Swift (https://www.swift.org/download/<code>Windows10 x86_ 64</code>). This step will help you automatically set up a <code>swift</code> command in your terminal.</p> <p>(4) Docker desktop (https://docs.docker.com/desktop/install/windows-install/).</p>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#2-set-up-swift-image-on-your-local-machine","title":"2. Set up Swift image on your local machine","text":"<p>After installing Swift and Docker desktop, you create a swift image described in Docker. Text Only<pre><code>### Try it now :point_down:\n\nIn your hw folder, run the following:\n\n`cd MyLibrary/`  \n`swift package init -- type library`  \n`cd ..`  \n`docker-compose run --rm dev`\n</code></pre> You probably will see the picture shown below:</p> <p> </p> <p>Text Only<pre><code>At this moment, you are running an image in Docker.\n</code></pre> Let\u2019s check your Docker desktop and click the item that is running:</p> <p> </p> <p> </p> Text Only<pre><code>#### Try it now (Optional) :point_down:\n\nLet\u2019s decorate the bad terminal interface! Here we will use \u201coh-my-zsh\u201c.\n\nFollow the steps:\n\n`apt update`  \n`apt install zsh`  \n`apt install curl`  \n`apt install vim`  \n`sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"`\n\nThen go to edit the format plug-in in the `.zshrc` file:\n\n`cd ~`  \n`vim .zshrc`\n\nThen change `ZSH_THEME=\"agnoster\"`.\n\nRestart your terminal in Docker and run `zsh`\n</code></pre> <p>Text Only<pre><code>A better way is do as shown in [A good model of Docker Image](https://oregonstate-innovationlab.atlassian.net/wiki/spaces/CS561/pages/74350864/A+good+model+of+Docker+Image) , so you do not have to set the environment everytime!\n</code></pre> After the decoration, you will see the terminal as shown below:</p> <p> </p> <p>Text Only<pre><code>This beautiful terminal highlight will also be seen in the VS Code terminal later. :thumbsup:\n</code></pre> 3. Use Docker Container in your VS Code</p> <p>To make VS Code your swift code editor, install the extensions: <code>swift</code>, <code>Docker</code>, and <code>dev containers</code>.</p> <p> </p> <p> </p> <p>Text Only<pre><code>#### Try it now :point_down:\n</code></pre> 1.  Now you run your docker desktop;</p> <ol> <li> <p>Go back to VS Code and click the docker logo on the left sidebar:</p> <p><p> </p></p> </li> <li> <p>Make sure your local terminal is running <code>docker-compose run --rm dev</code>. Run the image in the VS Code terminal and also open the swift image in your terminal by:     (a) <code>ctrl</code> + <code>shift</code> + <code>p</code>     (b) in the command window at the top, enter: <code>Docker Containers: Attach Shell</code></p> <p><p> </p></p> <p>\u00a9 <code>zsh</code>:</p> <p><p> </p> Text Only<pre><code>You see! The terminal shows the same beautiful highlighting as we saw in the docker desktop terminal. :thumbsup:\n</code></pre> 4. Edit Swift code and do testing</p> </li> </ol> <p>Finally, let\u2019s see how I use the VS Code to edit Swift codes.</p> <p>Firstly, <code>git fork</code> the code from the repo (https://github.com/oregon-state-innovation-lab/cs561-swift ).</p> <p> </p> <p>Then <code>git clone</code> the forked folder into your code folder in the terminal:</p> <p> </p> <p> </p> <p>Checkout to <code>async-await</code> branch:</p> <p> </p> <p> </p> <p>Open swift files by clicking the content on the left side directory:</p> <p> </p> <p>Text Only<pre><code>#### Try it now :point_down:\n</code></pre> Let\u2019s do the testing of the test folder:</p> <p> </p> <p>Check the code coverage <code>llvm-cov report ...</code>:</p> <p> </p>"},{"location":"2_Software_Engineering/Swift/Swift_on_win10/VS_Code_Docker_for_a_nice_Swift_edition_on_Windows10/#5-an-updated-way-to-do-swift-code-editing-and-testing","title":"5. An updated way to do Swift code editing and testing","text":"<p>I think you have found that using the extension in the Docker logo can not help us realize the full function of syntax highlighting and there is no autocomplete. Here I provide a way to furtherly realize the function of editing Swift code on VS Code.</p> <p> </p> <p>Rather than using the extension of the whale (squared by red), we are going to use the remote extension (squared by green) as shown above.</p> <p>Choose the <code>Containers</code> in the remote explorer:</p> <p> </p> <p>Right-click the <code>image</code> that is running and chooses <code>Attach in New Window</code>:</p> <p> </p> <p>In the new window, <code>\ud83d\udcc2 Open Folders</code> in the parent directory <code>/</code> (not the <code>/root</code>), then <code>Enter</code> using your keyboard.</p> <p> </p> <p>Now you can see your files:</p> <p> </p> <p>We still cannot see the full highlight. Let\u2019s open the extension window in the remote interface. Click the <code>Install in Container swiftlang/swift-nightly-focal (.....)</code> button and install it in your container:</p> <p> </p> <p> </p> <p> </p> <p>Now you can see the variables that can show up in the extension. Also, click the <code>Conical flask</code> extension and run the Test codes:</p> <p> </p> <p>Here is the result (with variable detection, definition tracking, autocomplete, and testing):</p> <p> </p> <p> </p> <p>Nice nice!!!! There are no differences between Windows VS Code and macOS Xcode now!! Bazinga </p> <p> Now you're a pro in Windows 10 swift programming\u2026 Feel free to add more cool stuff here!</p> <p>Tianle Yuan \u2013 10/14/2022</p>"},{"location":"2_Software_Engineering/Terminal/","title":"Bash Commands","text":""},{"location":"2_Software_Engineering/Terminal/#table-of-concepts","title":"Table of Concepts:","text":"<ol> <li> <p>ls.</p> </li> <li> <p>cd.</p> </li> <li> <p>pwd.</p> </li> <li> <p>grep.</p> </li> <li> <p>chmod.</p> </li> <li> <p>find.</p> </li> <li> <p>history.</p> </li> <li> <p>Pip (|).</p> </li> <li> <p>Output Redirect (&gt;).</p> </li> <li> <p>cat.</p> </li> <li> <p>man.</p> </li> <li> <p>more, less, most.</p> </li> <li> <p>alias.</p> </li> <li> <p>unalias.</p> </li> <li> <p>echo.</p> </li> <li> <p>which.</p> </li> <li> <p>PATH.</p> </li> <li> <p>ln.</p> </li> <li> <p>Background Processing (&amp;).</p> </li> <li> <p>code.</p> </li> <li> <p>.bash_profile vs .bashrc.</p> </li> <li> <p>Shebang (#!).</p> </li> <li> <p>sha1sum.</p> </li> </ol>"},{"location":"2_Software_Engineering/Terminal/contents/","title":"Bash Commands","text":"<p>Use this sheet to test yourself! Click the box for unfolding. </p>"},{"location":"2_Software_Engineering/Terminal/contents/#ls","title":"ls","text":"<code>ls</code> <p>Check the components in the current directory.</p> <p> </p> <code>ls -a</code> <p>Check the components in the current directory; with hidden components.</p> <p> </p> <code>ls -l</code> <p>Check the components in the current directory; with detailed information. The authority meaning of the first column:</p> <p> [dicrectory][Owner][Group][Other] <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#cd","title":"cd","text":"<code>cd</code> <p>(default) Go back to the <code>root</code> home directory of the current user.</p> <p> </p> <code>cd ~</code> <p>Go to the <code>root</code> home directory of the current user.</p> <p> </p> <code>cd /</code> <p>Takes you back to the root directory of the current drive. </p> <code>cd .</code> <p>Go to the <code>present working</code> directory.  </p> <p> </p> <code>cd ..</code> <p>Go to the <code>parent</code> directory.  </p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#pwd","title":"pwd","text":"<code>pwd</code> <p>Present working directory.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#grep","title":"grep","text":"<code>grep</code> <p>Search a <code>string</code> in a <code>given file</code>.</p> <p> </p> <code>grep -i</code> <p>Search a <code>string</code> in the <code>file</code> directory, with case-insensitive. The output will mix both <code>up &amp; low -case</code> results.</p> <p>The case below will search: <code>What</code>, <code>WhaT</code>, <code>wHAt</code>, <code>wHat</code>, .etc.</p> <p> </p> <code>grep -r</code> <p>Search a <code>string</code> from all files in the <code>current directory</code> (or in a <code>given file</code> if send the parameter) and in all of its <code>subdirectories</code>.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#chmod","title":"chmod","text":"<code>chmod</code> <p>Set <code>authority</code> for the given file. </p> <p>Note that: there are two ways to use chmod.  For example, <code>chmod 644 &lt;filename&gt;</code> and <code>chmod u+rw &lt;filename&gt;</code></p> <p> </p> Digit cheating sheetAlphabet cheating sheet Person user group other Decimal 6 4 4 Binary 110 100 100 Meaning rwx rwx rwx <p>[Person][Verb][Behavior]</p> Person u g o Meaning user group other Verb + - Meaning add remove Behavior r w x Meaning read write excute"},{"location":"2_Software_Engineering/Terminal/contents/#find","title":"find","text":"<code>find . -name &lt;filename&gt;</code> <p>Find <code>file</code> with the given <code>name</code> in the <code>current directory</code>.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#history","title":"history","text":"<code>history</code> <p>Check command <code>using history</code>.</p> <p> </p> <p></p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#pip-","title":"Pip (|)","text":"<code>|</code> -- pip operator <p>Combine two or more commands.</p> <p>e.g. I want to use <code>history</code> and <code>grep ls</code> in sequence. I use <code>history | grep ls</code></p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#output-redirect-","title":"Output Redirect (&gt;)","text":"<code>&gt;</code> -- output redirection operator <p>Redirect the contents of a command/file to another by <code>overwriting</code> it.</p> <p>e.g. </p> <p>I want to save the output of <code>history | grep ls</code> in the file <code>output.log</code>. I use <code>history | grep ls &gt; output.log</code>.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#cat","title":"cat","text":"<code>cat</code> <p><code>Print</code> the content of a <code>file</code> onto the standard output stream.</p> Cat outputVim editor comparison <p> </p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#man","title":"man","text":"<code>man</code> <p>The function of <code>man</code> is like <code>--help</code>(in GitBash). It shows the <code>manual pages</code> for a command.</p> <p>e.g. I want to check <code>less</code> command using manu:</p> <p> </p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#more-less-most","title":"more, less, most","text":"<code>more, less, most</code> <p>The three commands are used to view the text files in the command prompt, displaying one screen at a time in case the file is large (For example log files). </p> <code>more</code><code>less</code><code>most</code> <ul> <li>Support <code>forward navigation</code> and <code>limited backward navigation</code>.</li> </ul> <ul> <li>Support both <code>forward navigation</code> and <code>backward navigation</code>.</li> <li>Has <code>search</code> options. </li> <li>Can go to the <code>beginning</code> and the <code>end</code> of a file instantly. </li> <li>Can switch to an <code>editor</code> (like opening the file in <code>vi</code> or <code>vim</code>). </li> </ul> <p>It is noticeably quicker than editor when the file is large.</p> <ul> <li>Has <code>all</code> the features of <code>more</code> and <code>less</code>.</li> <li>Can also open <code>multiple files</code>, close 1 file at a time when you have multiple files open.</li> <li>Allows <code>locking</code> and <code>scrolling</code> of the open windows.</li> <li>Allows for <code>splitting</code> of open windows.</li> </ul>"},{"location":"2_Software_Engineering/Terminal/contents/#alias","title":"alias","text":"<code>alias</code> <p>Create a <code>shortcut</code> that references a command.</p> <p>e.g. Create a shortcut for <code>ls -la</code> as <code>ll</code>: <code>alias ll=\"ls -la\"</code></p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#unalias","title":"unalias","text":"<code>unalias</code> <p>Remove <code>alias</code>.</p> Note <p><code>unalias</code> not only remove the <code>alias</code> from the current session but also remove them permanently from <code>shell's configuration file</code>.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#echo","title":"echo","text":"<code>echo</code> <p>A built-in Linux feature that prints out arguments as the <code>standard output</code>. Example see in PATH.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#which","title":"which","text":"<code>which</code> <p>Use to identify the <code>location</code> of <code>executables</code>.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#path","title":"PATH","text":"<code>PATH</code> display <p>By using <code>echo $PATH</code>.</p> <p> </p> <code>PATH</code> edit <p>Q: How to make scripts execute from the present working directory without having to type a <code>./</code> before the script's name (e.g. <code>hello</code> instead of <code>./hello</code>)?</p> <p>A: <code>./</code> executes files that are not in <code>${PATH}</code>, \u201c.\u201d means it directly execute file in the current directory. Thus, we need to add hello\u2019s absolute directory in <code>${PATH}</code>, such as:</p> <p><code>PATH DEFAULT=${PATH}:/path/to/hello</code></p>"},{"location":"2_Software_Engineering/Terminal/contents/#ln","title":"ln","text":"<code>ln -s</code> <p>Create a <code>soft link</code> for an existing file.</p> <p> </p>"},{"location":"2_Software_Engineering/Terminal/contents/#background-processing-","title":"Background Processing (&amp;)","text":"<code>&amp;</code> <p>For example, launching Node.js using <code>node app.js &amp;</code> vs. <code>node app.js</code></p> <p>Use the <code>background process</code> can help to keep the process running without terminal effects. However, a <code>foreground process</code> will be killed when we close the terminal.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#code","title":"code","text":"<code>code</code> <p>Open <code>VS Code</code> to edit some file.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#source","title":"source","text":"<code>source</code> <p><code>source</code> is used to read and execute the content of a file (generally a set of commands) right now instead of relaunching the shell. Those commands are passed as an argument in the current shell script.</p> <p>Let's create a <code>.bash_profile</code> in the <code>root</code> directory:</p> <p> </p> <p>Then execute the file:</p> <p> </p> <p>Oh no! All the dependencies have gone!  </p> <p>\ud83d\ude06 Do not worry about it. Remove the code in <code>.bash_profile</code> and relaunch your shell. Then your shell will be brand new! (The theory see in next topic .bash_profile vs .bashrc).</p> <p>There is another way to fix the problem: change <code>export PATH=.:</code> into <code>export PATH=.:$PATH</code>.</p>"},{"location":"2_Software_Engineering/Terminal/contents/#bash_profile-vs-bashrc","title":".bash_profile vs .bashrc","text":"<code>.bash_profile</code> v.s. <code>.bashrc</code> <p>When invoked, <code>Bash</code> reads and excutes commands from a set of startup files, which is read depending on whether <code>shell (command explainer)</code> is invoked as [interactive/non-interactive] or [login/non-login] shell.</p> Shell type interactive non-interactive login non-login Example terminal (shell read, write) non-terminal (execute a script) remotely (via ssh) locally <code>.bash_profile</code><code>.bashrc</code> <p>For: Interactive log-in shell.</p> <p>For: Interactive non-login shell.</p> Note! <p>The components you write in <code>.bash_profile</code> and <code>.bashrc</code> is just appending more works to the current default shell settings. It is not overlapping.</p> <p>E.g. situations </p> <ul> <li>If you create an empty <code>.bash_profile</code> and execute (use <code>source</code>) immediately, it will make any changes to your shell's setting. </li> <li>If you make any changes in <code>.bash_profile</code> and execute it immediately, it will implement the changes in your shell. However, if you delete the code in <code>.bash_profile</code> for the changes and restart shell, the shell will run as the original default.</li> </ul>"},{"location":"2_Software_Engineering/Terminal/contents/#shebang-","title":"Shebang (#!)","text":"<code>#!</code> <p><code>Bash</code> commands can be used not only in command lines but also in scripts. The head of <code>Bash script</code> should mention using Bash shell with <code>#!</code>.</p> <p>e.g: With <code>#!/bin/bash</code>, generate SHA hash for <code>[A-Za-z0-9]</code>:</p> <p></p> How to run a bash script? <p>There are two ways to run a bash script:</p> <ol> <li> <p>Use <code>source</code>. Source it immediately!</p> </li> <li> <p>Make it executable with <code>chmod 7xx &lt;script_name&gt;</code>. Then run it in any way below. Let's assume the script is named <code>Donow</code>:</p> <ul> <li>Add script path into <code>PATH</code>. Then Run it with script name. e.g.: <code>$ Donow</code></li> <li>Run relative path. e.g.: <code>$ ./Donow</code></li> <li>Run absolute path. e.g.: <code>$ &lt;Path_from_root&gt;/Donow</code></li> </ul> </li> </ol>"},{"location":"2_Software_Engineering/Terminal/contents/#sha1sum","title":"sha1sum","text":"<code>sha1sum</code> <p><code>sha1sum</code> is a cryptographic hash function. The algorithm transfer data into <code>Checksum</code>, which is convenient for confirming if your copy is the same as the original one.</p> <p> </p>"},{"location":"2_Software_Engineering/Test/","title":"Test","text":""},{"location":"2_Software_Engineering/Test/#table-of-content","title":"Table of content","text":"<ol> <li>Test Basic.</li> </ol>"},{"location":"2_Software_Engineering/Test/test/","title":"Test","text":""},{"location":"2_Software_Engineering/Test/test/#types-of-tests","title":"Types of Tests","text":"<p>There are four major types of <code>tests</code>. You can see their relations in the diagram below:</p> <p></p> Definitions Unit testsIntegration testsSystem testsE2E testsManual tests <ul> <li>Formula: \\(A\\)</li> <li>Explanation: test the function of the smallest functional unit <code>A</code>. Each unit is independent.</li> <li>Note: <code>Code coverage</code>: for quantity, measure how much of the original code has been tested.</li> </ul> <ul> <li>Formula: \\(A\\supset B\\) or \\(A\\rightarrow B\\)</li> <li>Explanation: test the function of the parent function <code>A</code> including <code>B</code>. </li> <li>Note: Test <code>A</code> individually needs <code>dependency injection</code>. Test <code>B</code> individually can just use <code>unit test</code>.</li> </ul> <p></p> <ul> <li>Formula: \\(A\\supset B + C\\)</li> <li>Explanation: test object: Some system function from frontend <code>C</code> to backend <code>A</code>. </li> <li>Note: The <code>system test</code> is the same as <code>UI test</code>, which focuses on some system functions.</li> </ul> <ul> <li>Formula: \\(U_{Frontend} + U_{Backend}\\)</li> <li>Explanation: End to end tests. From frontend to backend for all the system functions. </li> <li>Note: One specific <code>E2E test</code> or a few <code>E2E tests</code> specific to some feature is classified into <code>system tests</code>.</li> </ul> <ul> <li>Formula: \\(\\forall \\{A|A\\in U_{Frontend}\\} + \\{C|C\\in U_{Backend}\\}\\)</li> <li>Explanation: manual and arbitrary tests from customers or maintainers.</li> </ul>"},{"location":"2_Software_Engineering/Test/test/#syntax-of-tests","title":"Syntax of Tests","text":"Tests syntax <ol> <li>Given: setup &amp; assumptions</li> <li>When: thing that actually be tested</li> <li>Then: assertions (what do you expect)</li> </ol>"},{"location":"2_Software_Engineering/Test/test/#references","title":"References:","text":"<ul> <li>Picture Resource 1</li> </ul>"},{"location":"2_Software_Engineering/VS_Code/","title":"VS Code","text":"Text Only<pre><code>{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n</code></pre> <p>{% include list.liquid all=true %}</p>"},{"location":"3_C%2B%2B/","title":"C++","text":"<p>C++ comprehension</p>"},{"location":"3_C%2B%2B/#this-chapter-can-be-separated-into-below-sections","title":"This chapter can be separated into below sections:","text":"<ol> <li> <p>Before C++98 (original fundamentals)</p> </li> <li> <p>Modern C++ (C++ 11/14/17/20 functions)</p> </li> <li> <p>STL (C++ Standard Template Library)</p> </li> </ol>"},{"location":"3_C%2B%2B/fast_read/","title":"\u516b\u80a1\u6587","text":"<p>Here is the component that used for C++ interview:</p> <ol> <li> <p>OOP Concepts</p> </li> <li> <p>Smart Pointer</p> </li> <li> <p>Pointer &amp; Reference </p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/","title":"C++ 11/14/17/20","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>C++11</p> </li> <li> <p>C++14</p> </li> <li> <p>C++17</p> </li> <li> <p>C++20</p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/#references","title":"References:","text":"<ul> <li>Functional in C++17 and C++20</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/","title":"C++11","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>auto &amp; decltype</p> </li> <li> <p>Smart pointer</p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/","title":"auto &amp; decltype","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#auto-type","title":"auto type","text":"<p><code>auto</code> type can help the compiler to derivate the type of a variable from the right side of <code>=</code> when it is in the compiling stage.</p> auto.cpp<pre><code>auto m_int = 10; // since 10 is int type, the type of `m_int` has been automatially derivated as `int`\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#decltypeexp-type","title":"decltype(exp) type","text":"<p><code>decltype(exp)</code> can be understood as: \"declare type\" from expression. <code>decltype</code> can derivate the type of the variable from the expression <code>exp</code>. It does not care about what is showing on the right side of <code>=</code>.</p> decltype.cpp<pre><code>int m_variable = 0;\ndecltype(m_variable) m_test1 = 1;  //`m_test1` has been derivated to `int`\ndecltype(10.8) m_test2 = 5.5;      //`m_test2` has been derivated to `double`\ndecltype(m_test2 + 100) m_test3;   //`m_test3` has been derivated to `double`\n</code></pre> Watch out! <ul> <li> <p><code>auto</code> requires the initialization of the variable. <code>decltype</code> do not.</p> </li> <li> <p><code>decltype</code> can process any complex expression. But! the result of the <code>exp</code> should not be <code>void</code>.</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#decltypeexp-type-advance","title":"decltype(exp) type [advance]","text":"<p>Before we go in advance, let's figure out <code>lvalue</code> and <code>rvalue</code>:</p> \\[lvalue = rvalue\\] <ul> <li><code>lvalue</code>: data that persists after the expression is executed, that is, persistent data. We can retrieve the data by referring to its address.</li> <li><code>rvalue</code>: data that no longer exists at the end of the expression execution, that is, temporary data.</li> </ul> Three principles for compiler processing the <code>decltype(exp)</code>: <ol> <li>If <code>exp</code> is any of the cases below, the type of <code>decltype(exp)</code> is the same as <code>exp</code>.<ul> <li>an expression not surrounded by parentheses <code>()</code>;</li> <li>an expression to access a class member;</li> <li>a single variable.</li> </ul> </li> <li>If <code>exp</code> is any of the cases below, the type of <code>decltype(exp)</code> is the same as <code>exp</code>'s reference (i.e if <code>T exp</code>, then <code>T&amp; decltype(exp)</code>).<ul> <li>an lvalue;</li> <li>an expression surrounded by parentheses <code>()</code>.</li> </ul> </li> <li>If <code>exp</code> is a function call, then the type of <code>decltype(exp)</code> is the same as the type of the value returned by the function.</li> </ol> Case 1 case1.cpp<pre><code>#include &lt;string&gt;\nusing namespace std;\nclass Student{\npublic:\nstatic int m_ID;\nstring m_name;\n};\nint Student::m_ID = 0;\nint  main(){\nStudent Daming;\nint n_int = 0;\nconst int &amp;n_refint = n_int;\ndecltype(n_int) test1 = n_int;             //`n_int` is of type `int`, and `test1` is derived as type `int`\ndecltype(n_refint) test2 = test1;          //`n_refint` is of type `const int&amp;`, and `test2` is derived as type `const int&amp;`\ndecltype(Student::m_ID) test3 = 0;         //`total` is a member variable of type `int` of class `Student`, and `test3` is derived from typing `int`\ndecltype(Daming.m_name) test4 = \"Daming\";  //`total` is a string member variable of class `Student`, and `test4` is derived as a `string`\nreturn 0;\n}\n</code></pre> Case 2 case2.cpp<pre><code>#include &lt;string&gt;\nusing namespace std;\nint  main(){\nint&amp; func_int_r(int, char);  //the type of return is: int&amp;\nint&amp;&amp; func_int_rr(void);     //the type of return is: int&amp;&amp;\nint func_int(double);        //the type of return is: int\nconst int&amp; fun_cint_r(int, int, int);  //the type of return is: const int&amp;\nconst int&amp;&amp; func_cint_rr(void);        //the type of return is: const int&amp;&amp;\nint n = 100;\ndecltype(func_int_r(100, 'A')) a = n;  //a's type is `int&amp;`\ndecltype(func_int_rr()) b = 0;         //b's type `int&amp;&amp;`\ndecltype(func_int(10.5)) c = 0;        //c's type `int`\ndecltype(fun_cint_r(1,2,3))  x = n;    //x's type const `int&amp;`\ndecltype(func_cint_rr()) y = 0;        //y's type const `int&amp;&amp;`   \n}\n</code></pre> Case 3 case3.cpp<pre><code>using namespace std;\nclass Base{\npublic:\nint m_x;\n};\nint main(){\nconst Base obj;\ndecltype(obj.m_x) a = 0;    //`obj.m_x` is an access expression for a class member, which follows principle 1. The type of `a` is `int`\ndecltype((obj.m_x)) b = a;  //`obj.m_x` includes `()`, which follows principle 3. The type of `b` is `int&amp;`\nint n = 0, m = 0;\ndecltype(n + m) c = 0;      //`n+m` get a rvalue, which follows principle 1, thus type is `int`\ndecltype(n = n + m) d = c;  //`n=n+m` get a lvalue, , which follows principle 3, thus type is `int&amp;`\nreturn 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/auto/#references","title":"References:","text":"<ul> <li> <p>Tencent Cloud</p> </li> <li> <p>C++11</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/","title":"Smart Pointer","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#smart-pointer_1","title":"Smart pointer","text":"<p><code>Smart pointer</code> were first popularized during the first half of the 1990s. However, it has been refined by <code>C++ 11</code>. Let's learn this modern C++ feature!</p>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#benifits","title":"Benifits","text":"Advantages <ol> <li>Prevent memory leak. It provides Garbage Collection Mechanisms when we forget to release the mm space.</li> <li>Smart pointer is a class. When the class is out of scope, the class automatically calls the destructor, which automatically frees the resource.</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#theory","title":"Theory","text":"How? (click to unfold) <p>A <code>smart pointer</code> is a class template that you declare on the stack, and initialize by using a raw pointer that points to its heap-allocated object. </p> <p>After the <code>smart pointer</code> is initialized, it owns the raw pointer. This means that the smart pointer is responsible for deleting the memory that the raw pointer specifies.</p> <p>The <code>smart pointer</code> destructor contains the call to delete, and because the smart pointer is declared on the stack, its destructor is invoked when the smart pointer goes out of scope, even if an exception is thrown somewhere further up the stack.</p>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#compare-with-pointer","title":"Compare with pointer","text":"Comparison comparison.cpp<pre><code>void UseRawPointer()\n{\n// Using a raw pointer -- not recommended.\nSong* pSong = new Song(L\"Nothing on You\", L\"Bruno Mars\"); // Use pSong...\n// Don't forget to delete!\ndelete pSong;   }\nvoid UseSmartPointer()\n{\n// Declare a smart pointer on stack and pass it the raw pointer.\nunique_ptr&lt;Song&gt; song2(new Song(L\"Nothing on You\", L\"Bruno Mars\"));\n// Use song2...\nwstring s = song2-&gt;duration_;\n//...\n} // song2 is deleted automatically here.\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#details","title":"Details","text":"Library? <p>Use <code>#include &lt;memory&gt;</code>.</p> API? apis.cpp<pre><code>// T is the template parameter\nT* get();                      // Get the auto_ptr's native pointer encapsulated inside.\nT&amp; operator*();                // \"operator x ()\" overloads x\nT* operator-&gt;();               T&amp; operator=(const T&amp; val);    T* release();                  // Set auto_ptr's inside pointer to nullptr,\n//which will not effect resource it pointed\nvoid reset (T* ptr = nullptr); // Directly free the memory pointed to by the \n//encapsulated internal pointer, default set nullptr\n</code></pre> Types? <p>C++11 has already discarded original C++98 smart pointer <code>auto_ptr</code> introducing authority.</p> <p>There are three types of <code>smart pointers</code>:</p> <ol> <li>unique_ptr (substitude <code>auto_ptr</code>)</li> <li>shared_ptr (strong ref)</li> <li>weak_ptr (weak ref)</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#unique_ptr","title":"unique_ptr","text":"unique_ptr <p><code>unique_ptr</code> stores one pointer only. Only one smart pointer can point to the object at a time.</p> <ul> <li>To change the object resource control, we remove the current <code>unique_ptr</code> <code>P1</code> and assign a new <code>unique_ptr</code> <code>P2</code> so the pointer now points to <code>P2</code>.</li> </ul> <p> </p> Demo code unique_ptr.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\nusing namespace std;\n#include &lt;memory&gt;\nclass Rectangle {\nint length;\nint breadth;\npublic:\nRectangle(int l, int b){\nlength = l;\nbreadth = b;\n}\nint area(){\nreturn length * breadth;\n}\n};\nint main(){\nunique_ptr&lt;Rectangle&gt; P1(new Rectangle(10, 5));\nassert(P1-&gt;area()==50); // This'll print 50\n// unique_ptr&lt;Rectangle&gt; P2(P1); -- Illegal\nunique_ptr&lt;Rectangle&gt; P2;\n// P2 = P1 -- Illegal\nP2 = move(P1);\nassert(P2-&gt;area()==50);// This'll print 50\n// This'll give an error,\n//assert(P1-&gt;area()==50);\nreturn 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#shared_ptr","title":"shared_ptr","text":"shared_ptr <p>By using <code>shared_ptr</code>, more than one pointer can point to this one object at a time. </p> <ul> <li> <p>We can use the member function <code>use_count()</code> to check \"referencer\" number of object resources pointed by the pointer itself.</p> </li> <li> <p><code>shared_ptr</code> can call function <code>release()</code> to give up ownership of resource. The object resource counter will be minus one.</p> </li> <li> <p>The object resources will be destroyed when the last reference has been deleted (i.e. <code>Ptr.use_count() == 0</code>).</p> </li> </ul> <p> </p> Demo code shared_ptr.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\nusing namespace std;\n#include &lt;memory&gt;\nclass Rectangle {\nint length;\nint breadth;\npublic:\nRectangle(int l, int b)\n{\nlength = l;\nbreadth = b;\n}\nint area()\n{\nreturn length * breadth;\n}\n};\nint main()\n{\nshared_ptr&lt;Rectangle&gt; P1(new Rectangle(10, 5));\n// This'll print 50\nassert(P1-&gt;area()==50);\nshared_ptr&lt;Rectangle&gt; P2;\nP2 = P1;\n// This'll print 50\nassert(P2-&gt;area()==50);\n// This'll now not give an error,\nassert(P1-&gt;area()==50);\n// This'll also print 50 now\n// This'll print 2 as Reference Counter is 2\nassert(P1.use_count()==2);\nreturn 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#weak_ptr","title":"weak_ptr","text":"weak_ptr <p><code>weak_ptr</code> does not control the life cycle of an object.</p> <ul> <li>It points to an object managed by <code>shared_ptr</code>.</li> <li>It NOT maintains a Reference Counter (<code>use_count()</code>). </li> <li><code>weak_ptr</code> do not stronghold on the object. It is designed to assist <code>shared_ptr</code> to avoid Deadlock (when two <code>shared_ptr</code> refer each other):<ul> <li>BAD: <code>shared_ptr1.use_count()</code> = <code>1</code> \u2194 <code>shared_ptr2.use_count()</code> = <code>1</code></li> <li>GOOD: <code>shared_ptr.use_count()</code> = <code>0</code> \u2194 <code>weak_ptr</code></li> </ul> </li> </ul> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B11/smart_pointer/#references","title":"References:","text":"<ul> <li> <p>Smart pointers (Modern C++)</p> </li> <li> <p>Smart Pointers in C++ and How to Use Them</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/","title":"C++14","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/#table-of-contents","title":"Table of contents","text":"<ol> <li>C++14</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/content/","title":"C++14","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B14/content/#references","title":"References:","text":"<ul> <li>Commits are snapshots, not diffs</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/","title":"C++17","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/#table-of-contents","title":"Table of contents","text":"<ol> <li>Content</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/content/","title":"C++17","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B17/content/#references","title":"References:","text":"<ul> <li>Commits are snapshots, not diffs</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/","title":"C++20","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/#table-of-contents","title":"Table of contents","text":"<ol> <li>Content</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/content/","title":"C++20","text":""},{"location":"3_C%2B%2B/C%2B%2BNEW/C%2B%2B20/content/#references","title":"References:","text":"<ul> <li>Commits are snapshots, not diffs</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/","title":"oldschool C++","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>Inheritance</p> </li> <li> <p>Template</p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/","title":"OOP concepts","text":"<p>This material is for listing different OOP concepts:</p> <ul> <li>Inheritance</li> <li>Polymorphism</li> <li>Encapsulation</li> <li>Interface</li> <li>Abstract class</li> <li>Virtual function</li> <li>Overloading</li> <li>Overriding</li> <li>Compile &amp; Run time</li> <li>Static methods and variables</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#inheritance","title":"Inheritance","text":"<code>Inheritance</code> <p>A mechanism in OOP that allows <code>subclass(derived class)</code> to inherit properties and methods from a <code>parent class(base class)</code>. And it can add new properties and methods or override the old class's methods</p> <ul> <li> <p>Usage: <code>Subclasses</code> can inherit public and protected members from the <code>parent class</code>, but NOT private members.</p> </li> <li> <p>Advantages: It is an important way of code reuse. (for avoiding duplicates, organizing code structure, and improving code readability and maintainability).</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#polymorphism","title":"Polymorphism","text":"<code>Polymorphism</code> <p>The ability of different objects to respond to the same message in different ways.</p> <ul> <li> <p>Usage: method overloading, method overriding, interface implementation, and more. </p> </li> <li> <p>Advantages: Improve code flexibility and extensibility, reduce code repetition, and better adhere to the open-closed principle.</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#encapsulation","title":"Encapsulation","text":"<code>Encapsulation</code> <p>A mechanism for combining data and methods together as a single entity (class) and controls access to these data and methods through a public interface.</p> <ul> <li> <p>Usage: By encapsulating, the internal details of an object can be hidden, and only the interface exposed to the outside world can be used.</p> </li> <li> <p>Advantages: Improve code security and reliability, reduce unnecessary coupling, and make code more maintainable and easier to extend.</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#interface","title":"Interface","text":"<code>Interface</code> <p>An abstract type defines a standard specification for a set of methods WITHOUT providing an implementation.</p> <ul> <li> <p>Usage: Interfaces allow different classes to implement the same methods with specific implementation.</p> </li> <li> <p>Advantages: Improve code flexibility and extensibility (code decoupling).</p> </li> </ul> C++<pre><code>/*an interface declaration*/\nclass InterfaceClass{\npublic:\nvirtual void method_first() = 0 ; // declaring a pure virtual method by assigning 0\nvirtual void method_second() = 0;\n};\n</code></pre> Interface classAbstrac class <p>Satisfy: </p> <ol> <li>has all methods declared as pure virtual methods.</li> <li>has no variable declaration.</li> </ol> <p>Satisfy: </p> <ol> <li>must have at least one pure virtual method.</li> <li>can have implemented methods.</li> <li>can have variables declaration.</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#abstract-class","title":"Abstract class","text":"<code>Abstract class</code> <p>A class that CANNOT be instantiated and defines some methods without implementation.</p> <ul> <li> <p>Usage: Its main purpose is to allow derived classes to implement these methods, thus achieving polymorphism. </p> </li> <li> <p>Subclasses must implement all the abstract methods in the abstract class, otherwise, the subclass must also be an abstract class.</p> </li> <li>The abstract class &lt;==&gt; contains at least one abstract method (pure virtual function).</li> <li>Advantages: Provide standard. (Provide a template and standard for subclasses to ensure that subclasses implement the methods and properties defined in the abstract class.)</li> </ul> C++<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n/*Declaring an abstract class*/\nclass AbstractClass{\npublic:\nAbstractClass(std::string msg): message(msg){}\nvirtual void method_first() = 0; // a pure virtual method\nvirtual void method_second(){   // implemented virtual method\nstd::cout &lt;&lt; message &lt;&lt; std::endl;\n}\nprivate:\nstd::string message;    }; </code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#virtual-function-method","title":"Virtual function (method)","text":"<code>Virtual function (method)</code> <ul> <li><code>Abstract methods</code>: are pure virtual methods, which have no actual code in them, and (non-abstract) subclasses HAVE TO override the method.</li> <li><code>Virtual methods</code>: can have code, which is usually a default implementation of something, and any subclasses CAN override the method using the override modifier and provide a custom implementation to achieve polymorphism.</li> </ul> C++<pre><code>virtual void method_first() = 0; // a pure virtual method\nvirtual void method_second(){   // implemented virtual method\nstd::cout &lt;&lt; message &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#overloading","title":"Overloading","text":"<code>Overloading</code> <p>A concept specifies more than one definition for a function name or an operator in the same scope, which is called <code>function overloading</code> and <code>operator overloading</code> respectively. </p> <ul> <li> <p>Usage: when a program calls a method with the same name, the compiler automatically matches and calls the corresponding method based on the differences in parameter types and numbers. </p> </li> <li> <p>Advantages: make the code more concise and flexible, reducing code duplication and redundancy.</p> </li> </ul> Function overloadingOperator overloading function_overloading.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass printData {\npublic:\nvoid print(int i) {\ncout &lt;&lt; \"Printing int: \" &lt;&lt; i &lt;&lt; endl;\n}\nvoid print(double  f) {\ncout &lt;&lt; \"Printing float: \" &lt;&lt; f &lt;&lt; endl;\n}\nvoid print(char* c) {\ncout &lt;&lt; \"Printing character: \" &lt;&lt; c &lt;&lt; endl;\n}\n};\nint main(void) {\nprintData pd;\n// Call print to print integer\npd.print(5);\n// Call print to print float\npd.print(500.263);\n// Call print to print character\npd.print(\"Hello C++\");\nreturn 0;\n}\n</code></pre> operator_overloading.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Point {\npublic:\nint x, y;\nPoint operator+ (const Point&amp; other) {\nPoint result;\nresult.x = x + other.x;\nresult.y = y + other.y;\nreturn result;\n}\n};\nint main() {\nPoint p1, p2, p3;\np1.x = 5;\np1.y = 10;\np2.x = 3;\np2.y = 2;\n// Add two Point objects using operator overloading\np3 = p1 + p2;\ncout &lt;&lt; \"Result of point addition: (\" &lt;&lt; p3.x &lt;&lt; \", \" &lt;&lt; p3.y &lt;&lt; \")\" &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#overriding","title":"Overriding","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#compile--run-time","title":"Compile &amp; Run time","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#static-methods-and-variables","title":"Static methods and variables","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/concepts/#reference","title":"Reference","text":"<ul> <li>OpenAI</li> <li>Abstract class vs Interface in C++</li> <li>C++ Overloading (Operator and Function)</li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/","title":"Pointer and Reference","text":"<p>This material is focusing on describing the difference when passing parameters</p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#definition-difference","title":"Definition difference","text":"Definition diff? DefinitionVariabilityConstNULLsizeof++SafetyLayers <ul> <li>A <code>pointer</code> is a variable, except that the variable stores an address that points to a storage unit in memory.</li> <li>A <code>reference</code> is essentially the same thing as the original variable, just an alias for the original variable</li> </ul> <ul> <li>The value of the <code>pointer</code> is changeable after initialization</li> <li>A <code>reference</code> can only be initialized once in a definition. Then it cannot be changed.</li> </ul> <ul> <li>Const pointer: <code>int* const a</code></li> <li>No const reference: no <code>int&amp; const a</code></li> <li>We can have a const referred value\uff1a <code>const int&amp; a</code></li> </ul> <ul> <li><code>Pointer</code>'s value can be <code>NULL</code>.</li> <li><code>Reference</code>'s value cannot be <code>NULL</code>. References must be initialized when they are defined</li> </ul> <ul> <li><code>Pointer</code>: the size of pointer.</li> <li><code>Reference</code>': the size of referred variable.</li> </ul> C++<pre><code>int a[2] = {0,10}\nint *pa =a\uff1bpa++   //now pa == a[1] == 10;\nint &amp;pa =a\uff1bpa++   //now pa == a[0] == 1;\n</code></pre> <ul> <li><code>Pointer</code> is not type safe</li> <li><code>Reference</code> is type safe since it has type checking</li> </ul> <ul> <li><code>Pointer</code> can have several layers such as <code>int** p</code></li> <li><code>Reference</code> can not have several layer such as <code>int&amp;&amp; p</code> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#parameter-passing-diff","title":"Parameter passing diff","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#pass-by-value","title":"Pass by value","text":"What is pass by value? <ul> <li> <p>When calling function passes parameter in called function, <code>stack</code> will open up a new space for storing a memory copy of the value of <code>actual parameter</code> from the calling function.</p> </li> <li> <p>Any operation in the called function on a formal parameter is performed as a local variable since you are using the copied value. It does not affect the value of the <code>actual parameter</code> of the main calling function.</p> </li> </ul> value.cpp<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid Rfun(int p) // Called function: copy the value from \"a\"\n{\ncout&lt;&lt;\"local p's address:\"&lt;&lt;&amp;p&lt;&lt;endl;         //0x6ffdf0\ncout&lt;&lt;\"local p's value:\"&lt;&lt;p&lt;&lt;endl;            //16\np=0Xff;\n}\nint main()\n{\nint a=0x10;\ncout&lt;&lt;\"a's address:\"&lt;&lt;&amp;a&lt;&lt;endl;               //0x6ffe1c\ncout&lt;&lt;\"a's value:\"&lt;&lt;a&lt;&lt;endl;                  //16\nRfun(a);     // Calling function: passing a's value\ncout&lt;&lt;\"a's now address:\"&lt;&lt;a&lt;&lt;endl;            //16\n}\n&gt;&gt;&gt;\na's address:0x7ffd8a777d04\na's value:16\nlocal p's address:0x7ffd8a777cec\nlocal p's value:16\na's now address:16\n</code></pre> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#pointer-passing","title":"Pointer passing","text":"Pointer passing <p><code>Pointer parameter passing</code> is essentially <code>Pass by value</code>. It passes an address as value. </p> pointer.cpp<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid Pfun(int* p) // Called function: copy the address value from \"a\"\n{\n//new address for storing address value passed by \"a\"\ncout&lt;&lt;\"local p's address:\"&lt;&lt;&amp;p&lt;&lt;endl;         //0x6ffdf0\ncout&lt;&lt;\"local p's value:\"&lt;&lt;p&lt;&lt;endl;            //0x6ffe1c\n//test if p points to a's value\ncout&lt;&lt;\"local p's pointing value:\"&lt;&lt;*p&lt;&lt;endl;  //16\n*p=0Xff;\n//test if p will affect \"a\"'s address value\np++;\ncout&lt;&lt;\"local p's updated value:\"&lt;&lt;p&lt;&lt;endl;    //0x6ffe1d\n}\nint main() {\nint a=0x10;\ncout&lt;&lt;\"a's address:\"&lt;&lt;&amp;a&lt;&lt;endl;               //0X6ffe1c\ncout&lt;&lt;\"a's value:\"&lt;&lt;a&lt;&lt;endl;                  //16\nPfun(&amp;a);   // Calling function: passing a's address\ncout&lt;&lt;\"a's now address:\"&lt;&lt;&amp;a&lt;&lt;endl;           //0X6ffe1c\ncout&lt;&lt;\"a's now value:\"&lt;&lt;a&lt;&lt;endl;              //255\n}\n&lt;&lt;&lt;\na's address:0x7ffd233a9854\na's value:16\nlocal p's address:0x7ffd233a9838\nlocal p's value:0x7ffd233a9854\nlocal p's pointing value:16\nlocal p's updated value:0x7ffd233a9858\na's now address:0x7ffd233a9854\na's now value:255\n</code></pre> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#reference-passing","title":"Reference passing","text":"Reference passing <ul> <li> <p>When calling function passes parameter in called function, <code>stack</code> will open up a new space for storing a memory copy of the address of <code>actual parameter</code> from the calling function.</p> </li> <li> <p>Any operation in the called function on a formal parameter will affect the value of the <code>actual parameter</code> since you are tracking and editing the content in the same address.</p> </li> </ul> reference.cpp<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid Rfun(int &amp;p)\n{\ncout&lt;&lt;\"local p's address:\"&lt;&lt;&amp;p&lt;&lt;endl;         //0x6ffdf0\ncout&lt;&lt;\"local p's value:\"&lt;&lt;p&lt;&lt;endl;            //16\np=0Xff;\n}\nint main()\n{\nint a=0x10;\ncout&lt;&lt;\"a's address:\"&lt;&lt;&amp;a&lt;&lt;endl;               //0x6ffe1c\ncout&lt;&lt;\"a's value:\"&lt;&lt;a&lt;&lt;endl;                  //16\nRfun(a);\ncout&lt;&lt;\"a's now address:\"&lt;&lt;a&lt;&lt;endl;            //255\n}\n&gt;&gt;&gt;\na's address:0x7ffebbcabd44\na's value:16\nlocal p's address:0x7ffebbcabd44\nlocal p's value:16\na's now address:255\n</code></pre> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/ptr_ref/#reference","title":"Reference","text":"<p>Picture source 1</p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/","title":"Inheritance","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>Basic Inheritance</p> </li> <li> <p>Multiple Inheritance</p> </li> <li> <p>Inheritance Access</p> </li> <li> <p><code>Public</code>, <code>Private</code>, and <code>Protected</code> Inheritances</p> </li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/","title":"Inheritance","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#basic-inheritance","title":"Basic Inheritance","text":"For? <p>Inherit <code>Attributes</code> and <code>Methods</code> from Base class (parent) to Derived class (child).</p> Grammar? <p>Use the <code>:</code> symbol.</p> Let's do it! <p>Problem: Let the <code>Car</code> class (child) inherits the Attributes and Methods from the <code>Vehicle</code> class (parent):</p> inher_base.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt; using namespace std;\n//Base class\nclass Vehicle{\npublic:\nVehicle(){}\n~Vehicle(){}\npublic:\nstring m_brand = \"Ford\";\npublic:\nstring Honk(){\nreturn \"Tu, tu! \\n\";\n}\n};\n//Derived class\nclass Car: public Vehicle{\npublic:\nstring m_model = \"Tesla\";\n};\nint main(){\nCar newCar;\nassert (newCar.Honk() == \"Tu, tu! \\n\");\nassert (newCar.m_brand == \"Ford\"); //cout &lt;&lt; newCar.brand   &lt;&lt; endl;\nassert (newCar.m_model == \"Tesla\"); //cout &lt;&lt; newCar.   model &lt;&lt; endl;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#multiple-inheritance","title":"Multiple Inheritance","text":"Let's do it! <p>Problem: Let the <code>Son</code> class (child) inherits the Attributes and Methods from both the <code>Mom</code> and <code>Dad</code> class (parents):</p> inher_multi_.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt; using namespace std;\n//Base class\nclass Mom{\npublic:\nint m_age = 32;\npublic:\nstring Speak(){\nreturn \"Mom is me!\";\n}\n};\nclass Dad{\npublic:\nint m_age = 44;\npublic:\nstring Say(){\nreturn \"Dad is me!\";\n}\n};\n//Derived class\nclass Son: public Mom, public Dad{\npublic:\nint m_age = 5;\npublic:\nstring Say(){\nreturn \"I am son!\";\n}\n};\nint main(){\nSon ason;\nassert (ason.Speak() == \"Mom is me!\");\nassert (ason.Say() == \"I am son!\"); assert (ason.m_age == 5);\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#inheritance-access","title":"Inheritance Access","text":"What is <code>access specifiers</code> for methods? <p>Access specifiers define how the members (attributes and methods) of a class can be accessed.</p> <p>There are three access specifiers: <code>public</code>, <code>private</code>, <code>protected</code>.</p> <ul> <li> <p><code>public</code>: members are accessible from outside the class.</p> </li> <li> <p><code>private</code>: members cannot be accessed (or viewed) from outside the class (but is accessable with in the class).</p> </li> <li> <p><code>protected</code>: members cannot be accessed from outside the class. However, they can be accessed in inherited classes.</p> </li> </ul> Let's do it! <p>Problem: Let the <code>Programmer</code> class (child) inherits the Attributes and Methods from both the <code>Employee</code> class (parents) in a safe way:</p> inher_access.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt; using namespace std;\n//Base class\nclass Employee{\nprotected:\nint m_salary = 32;\n};\n//Derived class\nclass Programmer: public Employee{\npublic:\nint m_bonus = 44;\npublic:\nvoid setSalary(int s){\nm_salary = s;\n}\nint getSalary(){\nreturn m_salary;\n}\n};\nint main(){\nProgrammer Mark;\nMark.setSalary(50000);\nassert (Mark.getSalary() == 50000);\nMark.m_salary = 90000;     //error: \u2018int Employee::m_salary\u2019 is protected within this context\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#public-private-and-protected-inheritances","title":"<code>Public</code>, <code>Private</code>, and <code>Protected</code> Inheritances","text":"What is <code>access specifiers</code> for inheritances? <ul> <li> <p><code>public inheritances</code>: Basic class's <code>public</code> and <code>protected</code> members remain the original status in the derived class.</p> </li> <li> <p><code>private inheritances</code>: Basic class's <code>public</code> and <code>protected</code> members become private in the derived class.</p> </li> <li> <p><code>protected inheritances</code>: Basic class's <code>public</code> and <code>protected</code> members become protected in the derived class.</p> </li> <li> <p>Note: <code>private</code> members of the base class are inaccessible to the derived class.</p> </li> </ul> Let's do it! <p>Problem: illustrate all the inheritances method:</p> inher_allway.c++<pre><code>class Base {\npublic:\nint x;\nprotected:\nint y;\nprivate:\nint z;\n};\nclass PublicDerived: public Base {\n// x is public\n// y is protected\n// z is not accessible from PublicDerived\n};\nclass ProtectedDerived: protected Base {\n// x is protected\n// y is protected\n// z is not accessible from ProtectedDerived\n};\nclass PrivateDerived: private Base {\n// x is private\n// y is private\n// z is not accessible from PrivateDerived\n};\n</code></pre> Let's do it! <p>Problem 1: C++ <code>public</code> Inheritance:</p> <p>inher_pub_inher.c++<pre><code>// C++ program to demonstrate the working of public inheritance\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\nprivate:\nint pvt = 1;\nprotected:\nint prot = 2;\npublic:\nint pub = 3;\n// function to access private member\nint getPVT() {\nreturn pvt;\n}\n};\nclass PublicDerived : public Base {\npublic:\n// function to access protected member from Base\nint getProt() {\nreturn prot;\n}\n};\nint main() {\nPublicDerived object1;\ncout &lt;&lt; \"Private = \" &lt;&lt; object1.getPVT() &lt;&lt; endl;\ncout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\ncout &lt;&lt; \"Public = \" &lt;&lt; object1.pub &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> output<pre><code>Private = 1\nProtected = 2\nPublic = 3\n</code></pre></p> Let's do it! <p>Problem 2: C++ <code>protected</code> Inheritance:</p> <p>inher_pro_inher.c++<pre><code>// C++ program to demonstrate the working of protected inheritance\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\nprivate:\nint pvt = 1;\nprotected:\nint prot = 2;\npublic:\nint pub = 3;\n// function to access private member\nint getPVT() {\nreturn pvt;\n}\n};\nclass ProtectedDerived : protected Base {\npublic:\n// function to access protected member from Base\nint getProt() {\nreturn prot;\n}\n// function to access public member from Base\nint getPub() {\nreturn pub;\n}\n};\nint main() {\nProtectedDerived object1;\ncout &lt;&lt; \"Private cannot be accessed.\" &lt;&lt; endl;\ncout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\ncout &lt;&lt; \"Public = \" &lt;&lt; object1.getPub() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> output<pre><code>Private cannot be accessed.\nProtected = 2\nPublic = 3\n</code></pre></p> Let's do it! <p>Problem 3: C++ <code>private</code> Inheritance:</p> <p>inher_pri_inher.c++<pre><code>// C++ program to demonstrate the working of private inheritance\n#include &lt;iostream&gt;\nusing namespace std;\nclass Base {\nprivate:\nint pvt = 1;\nprotected:\nint prot = 2;\npublic:\nint pub = 3;\n// function to access private member\nint getPVT() {\nreturn pvt;\n}\n};\nclass PrivateDerived : private Base {\npublic:\n// function to access protected member from Base\nint getProt() {\nreturn prot;\n}\n// function to access private member\nint getPub() {\nreturn pub;\n}\n};\nint main() {\nPrivateDerived object1;\ncout &lt;&lt; \"Private cannot be accessed.\" &lt;&lt; endl;\ncout &lt;&lt; \"Protected = \" &lt;&lt; object1.getProt() &lt;&lt; endl;\ncout &lt;&lt; \"Public = \" &lt;&lt; object1.getPub() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> output<pre><code>Private cannot be accessed.\nProtected = 2\nPublic = 3\n</code></pre></p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Inheritance/Inheritance/#references","title":"References:","text":"<ul> <li> <p>w3schools: C++ Inheritance</p> </li> <li> <p>Programiz: C++ Public, Protected and Private Inheritance</p> </li> </ul>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/","title":"Template","text":""},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/#table-of-contents","title":"Table of contents","text":"<ol> <li>Basic Inheritance</li> </ol>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/","title":"Template","text":"What? <p>C++ adds two new keywords to support templates: <code>template</code> and <code>typename</code>. <code>typename</code> can always be replaced by the keyword <code>class</code>.</p> For? <p>When we want to use some classes or functions for different data types. But we do not want to write multiple versions of the identical code implementation.</p> How does it work? <p>Templates are expanded at compiler time. </p> <p>The function is basically like macros. The DIFFERENCE is:</p> <ul> <li>Compiler needs to do type checking before template expansion.</li> <li>Compiled code will finally contain multiple copies of the same templated class/function</li> <li>For the same type of function/class calling, the compiler will not create a new copy; instead, it uses the old copy. </li> </ul> <p> </p>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#function-templates","title":"Function Templates","text":"<p>For functions that are used for different data types:</p> Function Templates func_temp.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\nusing namespace std;\n//Function template that is used to compare size.\ntemplate &lt;typename T&gt; T myMax(T x, T y)\n{\nreturn (x &gt; y) ? x : y;\n}\nint main()\n{\nassert(myMax&lt;int&gt;(3, 7) == 7); // Call myMax for int\nassert(myMax&lt;double&gt;(3.0, 7.0) == 7); // call myMax for double\nassert(myMax&lt;char&gt;('g', 'e') == 'g'); // call myMax for char\nreturn 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#class-templates","title":"Class Templates","text":"<p>For classes that are used for different data types:</p> Class Templates class_temp.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;cassert&gt;\nusing namespace std;\ntemplate &lt;typename T&gt; class Array {\nprivate:\nT* ptr;\nint size;\npublic:\nArray(T arr[], int s);\nstring print();\n};\ntemplate &lt;typename T&gt; Array&lt;T&gt;::Array(T arr[], int s)\n{\nptr = new T[s];\nsize = s;\nfor (int i = 0; i &lt; size; i++)\nptr[i] = arr[i];\n}\ntemplate &lt;class T&gt; string Array&lt;T&gt;::print()\n{\nstring result = \"\";\nfor (int i = 0; i &lt; size; i++)\nresult += \" \" + to_string(*(ptr + i));\nreturn result;\n}\nint main()\n{\nint arr[5] = { 1, 2, 3, 4, 5 };\nArray&lt;int&gt; a(arr, 5);\nassert(a.print() == \" 1 2 3 4 5\");\nreturn 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#multiple-arguments-to-templates","title":"Multiple arguments to Templates","text":"Multiple Arguments Templates mul_temp.c++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\ntemplate &lt;class T, class U&gt; class A {\nT x;\nU y;\npublic:\nA() { cout &lt;&lt; \"Constructor Called\" &lt;&lt; endl; }\n};\nint main()\n{\nA&lt;char, char&gt; a;\nA&lt;int, double&gt; b;\nreturn 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#default-argument-type-to-templates","title":"Default argument type to Templates","text":"Default Argument Type Templates da_temp.c++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\ntemplate &lt;class T, class U = char&gt; class A {\npublic:\nT x;\nU y;\nA() { cout &lt;&lt; \"Constructor Called\" &lt;&lt; endl; }\n};\nint main()\n{\nA&lt;char&gt; a; // This will call A&lt;char, char&gt;\nreturn 0;\n}\n</code></pre>"},{"location":"3_C%2B%2B/C%2B%2BOLD/Template/content/#references","title":"References:","text":"<ul> <li>Templates in C++ with Examples</li> </ul>"},{"location":"3_C%2B%2B/STL/","title":"C++ STL","text":""},{"location":"3_C%2B%2B/STL/#this-section-can-be-separated-into-below-sub-sections","title":"This section can be separated into below sub-sections:","text":"<ol> <li> <p>xx.</p> </li> <li> <p>xx.</p> </li> <li> <p>Unordered_set.</p> </li> </ol>"},{"location":"3_C%2B%2B/STL/unodered_set/","title":"Unordered Set","text":"<p>This data structure is used for the case we DON'T need the key-value pairs like in the unordered_map. It is a easy way to implement presence/absence</p> Declaration declaration.c++<pre><code>std::unordered_set&lt;int&gt; Set;\n</code></pre>"},{"location":"3_C%2B%2B/STL/unodered_set/#directory","title":"Directory","text":"<ul> <li>Insert elements: insert().</li> <li>Count element presence time: count().</li> <li>Check element existence: find.</li> </ul>"},{"location":"3_C%2B%2B/STL/unodered_set/#insert","title":"insert()","text":"insert().c++<pre><code>Set.insert(1);\n</code></pre> Example <p> #include &lt;iostream&gt; #include &lt;unordered_set&gt; using namespace std;   //declare an unordered set globally unordered_set Set = {2, -1};   int main() {     //insert the element     Set.insert(1);           for (auto itr = Set.begin(); itr != Set.end(); itr++)     {         cout &lt;&lt; (*itr) &lt;&lt; endl;     } }"},{"location":"3_C%2B%2B/STL/unodered_set/#count","title":"count()","text":"count().c++<pre><code>Set.count(2);\n</code></pre> Details <p>Used to check if an element is present in the container or not. The function returns <code>1</code> if the element is present in the container; otherwise, it returns <code>0</code>.</p> <p>Equals to <code>return (Set.find(&lt;element&gt;) != Set.end());</code>. Same performance. See find().</p> Example <p> #include &lt;iostream&gt; #include &lt;unordered_set&gt; using namespace std;   //declare an unordered set globally unordered_set Set = {2, -1, 1, 2};   int main() {     cout &lt;&lt; \"2 exsists times: \" &lt;&lt; Set.count(2) &lt;&lt; endl;           cout &lt;&lt; \"All elements:\" &lt;&lt; endl;     for (auto itr = Set.begin(); itr != Set.end(); itr++)     {         cout &lt;&lt; (*itr) &lt;&lt; \" \" &lt;&lt; endl;     } }"},{"location":"3_C%2B%2B/STL/unodered_set/#find","title":"find()","text":"find().c++<pre><code>Set.find(-1);\n</code></pre> Example <p> #include &lt;iostream&gt; #include &lt;unordered_set&gt; using namespace std;   //declare an unordered set globally unordered_set Set = {2, -1, 1, 2};   int main() {     //Check result using find()     cout &lt;&lt; (Set.find(-1) != Set.end()) &lt;&lt; endl;           //Check result using count()     cout &lt;&lt; Set.count(-1) &lt;&lt; endl; }"},{"location":"3_C%2B%2B/STL/unodered_set/#references","title":"References","text":""},{"location":"4_Algorithms/","title":"Algorithms","text":"<p>As a software engineer, being familier with algorithms and data structures is the basic skill for our job interview and solid skill improvement.</p>"},{"location":"4_Algorithms/#this-chapter-can-be-separated-into-two-sections","title":"This chapter can be separated into two sections:","text":"<ol> <li> <p>Typical Algorithms for the typical solution that I have learned before.</p> </li> <li> <p>Practice Sheet for the questions record of my practice.</p> </li> </ol>"},{"location":"4_Algorithms/Practice_Sheet/","title":"Practice Sheet","text":"<p>I record all the leetcode practice I have done here:</p>"},{"location":"4_Algorithms/Typical_Questions/","title":"Typical Algorithms","text":"<p>This is not a garage for questions. This section is aiming to record all the structured question type. That is to say, pseudo-code is more important than code itself.</p>"},{"location":"4_Algorithms/Typical_Questions/#the-questions-have-been-listed-here","title":"The questions have been listed here:","text":"<p>I. From  Leetcode:</p> MatrixGraphicsSlide WindowSorting <ol> <li>Topology Sort</li> <li>Backtracking </li> </ol> <ol> <li>Dijkstra</li> <li>Bipartition Check</li> <li>Union-Find </li> </ol> <ol> <li>Monotonic Queue</li> </ol> <ol> <li>Quick Sort</li> <li>Counting Sort</li> </ol> <p>II. From  Hackerrank:</p> <ol> <li>STDIN and STDOUT</li> </ol>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/","title":"STDIN and STDOUT","text":"<p>Keywords: Standard I/O</p>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#situation","title":"Situation","text":"<p>Below is the typical question format:</p> Question type C++<pre><code>#include &lt;cmath&gt;\n#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main() {\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */   return 0;\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#stdin","title":"STDIN","text":"<p>The situation of STDIN can be separated into below types:</p> <ul> <li>Load element</li> <li>Load single line</li> <li>Load several lines</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#load-element","title":"Load element","text":"Load element cin&gt;&gt;cin.get C++<pre><code>......\nint main() {\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */ char a;\nint b;\nstring c;\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\ncout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; c;\n//input: x 1 7g qt\n//output: x 1 7g\nreturn 0;\n}\n</code></pre> Warning! Space , Enter , and Tab <ul> <li><code>&gt;&gt;</code> will filter(auto jump) all the input unseen characters.</li> <li>If input type is <code>string</code> or <code>char[]</code>, the character loading will stop when meet the unseen characters.</li> </ul> C++<pre><code>......\nint main() {\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */ //WAY1: use \"int cin.get()\"\nint cha,chb,chc;\ncha = cin.get();\nchb = cin.get();\nchc = cin.get();\ncout &lt;&lt; cha &lt;&lt; \" \" &lt;&lt; chb &lt;&lt; \" \" &lt;&lt; chc &lt;&lt; endl;\n//input: a b c\n//output: 97(a) 32(space) 98(b)\n//WAY2: use \"istream&amp; cin.get(char&amp; var)\"\nchar a[4] = {};\ncin.get(a, 4);\n//input: a b c\n//output: a_b_ (\"_\" means space)\nreturn 0;\n}\n</code></pre> Warning! <ul> <li>Even though <code>get()</code> returns <code>int</code>, the return value represents <code>ASCll</code> value.<ul> <li>Successful read: return the of the <code>ASCll</code> value character. When an end-of-file character is encountered, return <code>EOF</code> or <code>-1</code>.</li> </ul> </li> <li>The <code>get()</code> function reads characters from the buffer WITHOUT ignoring the separator.</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#load-single-line","title":"Load single line","text":"Load single line Text Only<pre><code>```cpp\n......\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ \n    char a[10] = {};\n    char b[10] = {};\n    string line;\n    cin.getline(a,3);         //read line until: length (including 'enter') == 3\n    cin.getline(b,5,'\\n');    //indicate end symbol: '\\n'\n    getline(cin,line);        //read the whole line into string including space.\n    cout &lt;&lt; a &lt;&lt; \",\" &lt;&lt; b &lt;&lt; \",\" &lt;&lt; line; \n\n    //input:ak \n    //      ksks\n    //      cmas;ckmaslc\n    //output: ak,ksks,cmas;ckmaslc\n\n    return 0;\n}\n```\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#load-multiple-line","title":"Load multiple line","text":"Load multiple line WAY 1WAY 2 C++<pre><code>......\nint main() {\nvector&lt;int&gt; a;\nint temp;\ncin &gt;&gt; temp;\na.push_back(temp);\nwhile (cin.get() != '\\n') {\ncin &gt;&gt; temp;\na.push_back(temp);\n}\n//input: 1 2 3\n//output: 1 2 3\nreturn 0;\n}\n</code></pre> C++<pre><code>......\nvector&lt;int&gt; a;\nstring line, word;\nint main() {\ngetline(cin, line);\nistringstream record(line);\nwhile (record &gt;&gt; word)\n{\na.push_back(atoi(word.c_str()));\n}\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#stdout","title":"STDOUT","text":""},{"location":"4_Algorithms/Typical_Questions/Hackerrank/STDIN%26STDOUT/#references","title":"References:","text":"<ul> <li>Smart pointers (Modern C++)</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/","title":"Backtracking","text":"<p>Keywords: 2D Matrix</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#situation","title":"Situation","text":"Situation <p><code>Backtracking</code>, which is a methodology where we mark the current path of exploration, if the path does not lead to a solution, we then revert the change (i.e. backtracking) and try another path.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#question-example","title":"Question Example","text":"79. Word Search <p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> if word exists in the grid.</p> <p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#example","title":"Example","text":"Example Example 1:Example 2: <ul> <li>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"</li> <li>Output: true</li> </ul> <ul> <li>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"</li> <li>Output: true</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#pseudo-code","title":"Pseudo-code","text":"Code frame Pseudo<pre><code>bool Find_Solution(matrix, path) {\nfor candidate in matrix:\nif backtrace(candidate, path[0]) return true;\nreturn false;\n}\nbool backtrace(candidate, path[index]){\n//Step1. Check the bottom case\nif(index == path.end) -&gt; return true\n//Step2. Check if candidates locates at the outside the boundaries\nif(candidate at out || candidate != path[index]) -&gt; return false\n//Step3. If match explore the neighbors in DFS\ncandidate = '#'; // mark as used\nfor neighbor of candidate:\nif (backtrace(neighbor, path[index+1])) -&gt; return true\n//Step4. Clean up and return the false as the wrong path\ncandidate = path[index]; // mark back when fail\nreturn false;\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#answer","title":"Answer","text":"Simplified Solution solution.c++<pre><code>class Solution {\nprivate:\nint rows, cols;\npublic:\nbool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) {\nrows = board.size();\ncols = board[0].size();\nfor(int row = 0; row &lt; rows; row++){\nfor(int col = 0; col &lt; cols; col++){\nif(backtrace(row, col, board, word, 0)) return true;\n}\n}\nreturn false;\n}\nbool backtrace(int row, int col, vector&lt;vector&lt;char&gt;&gt;&amp; board, string word, int index){\n//Step1. Check the bottom case\nif(index&gt;=word.length())\nreturn true;\n//Step2. Check the boundaries\nif(row &lt; 0|| row == rows||col &lt; 0|| col == cols|| board[row][col] != word[index]){\nreturn false;\n}\n//Step3. If match explore the neighbors in DFS\nboard[row][col] = '#'; // mark as used\nint row_offset[4] = {0, 1, 0, -1}, col_offset[4] = {1, 0, -1, 0};\nfor(int i = 0; i &lt; 4; i++){\nif (backtrace(row+row_offset[i], col+col_offset[i], board, word, index+1))\nreturn true;\n}\n//Step4. Clean up and return the false as the wrong path\nboard[row][col] = word[index];\nreturn false;\n}\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Backtracking/#references","title":"References","text":"<p>Solution of 79. Word Search</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Bipartition/","title":"Bipartition Graph Check","text":"<p>Keywords: 2D Graphics</p> <p>See this link: Possible Bipartition</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/","title":"Counting Sort","text":"<p>Keywords: Sorting</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#description","title":"Description","text":"Counting Sort? <p><code>Counting Sort</code> works by iterating through the input, counting the number of times each item occurs, and using those counts to compute an item's index in the final, sorted array.</p> Efficiency? <p>Time complexity: \\(O(N+M)\\) (where <code>M</code> is \\(max(arr[])-min(arr[])\\) and <code>N</code> is equal to size(arr[])).</p> <p><code>Counting sort</code> is better than the comparison-based sorting techniques because there is no comparison between elements in counting sort. </p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#algorithm-details","title":"Algorithm Details","text":"Steps <p>Step1. \"Count\": pick a <code>pivot</code> in the array. We normally pick the most left element.</p> <p>Step2. \"Read\": scan the whole counting array in sequence, and output the sorted array.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#diagram","title":"Diagram","text":"Example of \"Partition\""},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#answer","title":"Answer","text":"Realization solution.c++<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan\"\n//--------------------------------------------\n#include &lt;iostream&gt;\n#include &lt;cassert&gt;\n#include &lt;vector&gt;\nusing namespace std;\nvector&lt;int&gt; countingSort(vector&lt;int&gt; array, int max_val){\n//Count\nint count[max_val+1] = {0};\nfor(auto a: array){\ncount[a] += 1;\n}\n//Read\nvector&lt;int&gt; result;\nfor(int i = 0; i &lt; max_val+1; i++){\nwhile(count[i]&gt;0){\nresult.push_back(i);\ncount[i]--;\n}\n}\nreturn result;\n}\nint main()\n{\nvector&lt;int&gt; input = {4,1,5,3,6};\nvector&lt;int&gt; output = countingSort(input, 6);\nvector&lt;int&gt; test = {1,3,4,5,6};\nassert(output == test);\n//cout&lt;&lt;\"output:\";\n//for(auto i: output)\n//{\n//    if(i==output.back()){\n//        cout&lt;&lt;i&lt;&lt;endl;\n//    }\n//    else cout&lt;&lt;i&lt;&lt;\",\";\n//}\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Counting_sort/#references","title":"References:","text":"<ul> <li>Counting Sort Algorithm</li> <li>Picture resource</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/","title":"Dijkstra","text":"<p>Keywords: 2D Graphics, shortest path</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#situation","title":"Situation","text":"Situation <p><code>Dijkstra</code> is an algorithm used to find the shortest path between nodes of the graph. The algorithm creates the tree of the shortest paths from the starting source vertex from all other points in the graph.</p> Working conditions <p>Dijkstra's algorithm only works with the graph that possesses positive weights. </p> Is Dijkstra BFS or DFS? <p>None of them. <code>Dijkstra</code> is a priority first algorithm (or <code>best first</code>). </p> <p>Between <code>BFS</code> and <code>DFS</code> algorithms, the priority will be more to <code>BFS</code> rather than <code>DFS</code>. However, <code>Dijkstra</code> is much more than the <code>BFS</code> algorithm. </p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#question","title":"Question","text":"Question <p>Consider the following situation: </p> <p> </p> Example: <ul> <li>Input: Graphic matrix[5][5], (A,B,C,D,E)</li> <li>Output: Dist[0,7,3,9,5], Trac matrix[path_for_A, path_for_B, path_for_C...]</li> <li>Explanation: Take \"B\" as an example: A --3\u2192 C --4\u2192 B =&gt; Dist[1] = 3+4 = 7 </li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#explanation","title":"Explanation","text":"Explanation Algorithm Description:Algorithm Diagram: <ol> <li>First of all, we will mark all vertex as unvisited vertex</li> <li>Then, we will mark the source vertex as 0 and all other vertices as infinity</li> <li>Consider the source vertex as current vertex</li> <li>Calculate the path length of all the neighboring vertex from the current vertex by adding the weight of  the edge in the current vertex</li> <li>Now, if the new path length is smaller than the previous path length, then replace it otherwise ignore it</li> <li>Mark the current vertex as visited after visiting the neighbor vertex of the current vertex</li> <li>Select the vertex with the smallest path length as the new current vertex and go back to step 4.</li> <li>Repeat this process until all the vertex are marked as visited.</li> </ol> <ol> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ol>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#pseudo-code","title":"Pseudo-code","text":"Pseudo-code Pseudo-code<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan, Shivali Bhadaniya\"\n//--------------------------------------------\n//G is the graph, S is the Sources Vertex\nfunction dijkstra(G, S){\ndist[] //record distance from each Vertex to the Source Vertex\nprev[]\nfor each vertex V in G\ndist[V] &lt;- infinite\nprev[V] &lt;- NULL\nIf V != S, add V to Priority Queue Q\ndist[S] &lt;- 0\nwhile Q != \u2205\n//U is another Vertex\nU &lt;- Extract MIN from Q //Pop the top of heap Q\nfor each unvisited neighbour V of U\ntemperoryDist &lt;- dist[U] + edgeWeight(U, V)\nif temperoryDist &lt; dist[V]\ndist[V] &lt;- temperoryDist\nprev[V] &lt;- U\nreturn dist[], prev[]\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#answer","title":"Answer","text":"Realization solution.c++<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan, Shivali Bhadaniya\"\n//--------------------------------------------\n#include&lt;iostream&gt;\nusing namespace std;\n// global variables\nint dimension;\nvector&lt;bool&gt; grabage_set; // boolean array to mark visited and unvisited for each node\nvector&lt;int&gt; distance_set; // // array to calculate the minimum distance for each node \nvector&lt;vector&lt;int&gt;&gt; prev_set;\n//Algorithm body\nvoid Dijkstra(vector&lt;vector&lt;int&gt;&gt; graph, int src)   // adjacency matrix \n{                     distance_set[src] = 0;   // Source vertex distance is set 0               \npriority_queue&lt;pair&lt;int,int&gt;, vector&lt;pair&lt;int,int&gt;&gt;, greater&lt;pair&lt;int,int&gt;&gt;&gt; heap;\nheap.push({src, 0});\nwhile (heap.size() != 0){\nauto current = heap.top().second;\nheap.pop();\ngrabage_set[current] = true;\nfor(int k = 0; k &lt; dimension; k++)                  {\n// updating the distance of neighbouring vertex\nint tempdist = distance_set[current] + graph[current][k];\nif(!grabage_set[k] &amp;&amp; graph[current][k])\n{\nif (tempdist &lt; distance_set[k])\n{   distance_set[k] = tempdist;\nprev_set[k].push_back(current);\n}                    heap.push({tempdist,k});\n//cout &lt;&lt; tempdist &lt;&lt; \",\" &lt;&lt; k  &lt;&lt; endl;\n}\n}\n}\n}\nvoid printout();\nint main()\n{\nvector&lt;vector&lt;int&gt;&gt; graph={\n{0, 10, 3, 0, 0},\n{0, 0, 1, 2, 0},\n{0, 4, 0, 8, 2},\n{0, 0, 0, 0, 7},\n{0, 0, 0, 9, 0}};\ndimension = graph[0].size();\ngrabage_set.resize(dimension,false); distance_set.resize(dimension,INT_MAX);\nprev_set.resize(dimension,vector&lt;int&gt;());\nDijkstra(graph,0);\nprintout();\nreturn 0;                           }\nvoid printout(){\nfor(auto i: distance_set)\n{\ncout &lt;&lt; i &lt;&lt; endl;\n}\ncout &lt;&lt; endl;\nfor(int k = 1; k &lt; prev_set.size(); k++)\n{\ncout &lt;&lt; char('A'+ k) &lt;&lt; \" to A: \";\nfor (int t = 0; t &lt; prev_set[k].size(); t++)\n{\nif (t &lt; prev_set[k].size() - 1)\ncout &lt;&lt; char('A'+ prev_set[k][t]) &lt;&lt; \" &lt;- \";\nelse\ncout &lt;&lt; char('A'+ prev_set[k][t]) &lt;&lt; \" &lt;- \" &lt;&lt; char('A'+ k) &lt;&lt; endl;\n}\n}\n}\n</code></pre> Output<pre><code>0\n7\n3\n9\n5\nB to A: A &lt;- C &lt;- B\nC to A: A &lt;- C\nD to A: C &lt;- B &lt;- D\nE to A: C &lt;- E\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Dijkstra/#references","title":"References:","text":"<ul> <li>Dijkstra's Algorithm in C++ | Shortest Path Algorithm</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/","title":"Monotonic Decreasing Queue","text":"<p>Keywords: Slide Window, Array</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#situation","title":"Situation","text":"239. Sliding Window Maximum <p>You are given an array of integers <code>nums</code>. There is a sliding window of size <code>k</code>, which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return the max sliding window.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#example","title":"Example","text":"Example Example 1:Example 2: <ul> <li>Input: <code>nums</code> = [1,3,-1,-3,5,3,6,7], <code>k</code> = 3</li> <li>Output: [3,3,5,5,6,7]</li> <li>Explanation: </li> </ul> Window position Max [1  3  -1] -3  5  3  6  7 3 1 [3  -1  -3] 5  3  6  7 3 1  3 [-1  -3  5] 3  6  7 5 1  3  -1 [-3  5  3] 6  7 5 1  3  -1  -3 [5  3  6] 7 6 1  3  -1  -3  5 [3  6  7] 7 <ul> <li>Input: <code>nums</code> = [1], <code>k</code> = 1</li> <li>Output: [1]</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#pseudo-code","title":"Pseudo-code","text":"Pseudo-code Pseudo-code<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan\"\n//--------------------------------------------\nclass Monoqueue {\ndeque&lt;int&gt; myque; // The monotonic queue is constructed based on dequeue. Every element in this queue is maintained to be monotonously decreasing.\npublic:\n//Monotonize: when push in a new element, keep popping out current back elements until E_back &gt;= E_pushin.\nvoid push(int n) {\nwhile(!myque.empty() &amp;&amp; myque.back() &lt; n) myque.pop_back();\nmyque.push_back(n);\n}\n//\"Large Front\": return front element (magnitude compared after monotonization) in the data structure\nint front() {\nreturn myque.front();\n}\n//Pop \"Large Front\": if the value has already been popped previously (small than the current, we do not have to pop it again)\nvoid pop(int n) {  if(n == myque.front())\nmyque.pop_front();\n}\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#explainations","title":"Explainations","text":"Monotonize &amp; \"Large Front\"? <p>Assume our <code>monotonic queue</code> looks like the below, and we need to monotonize it when pushing back elements in. Run the codes below:</p> <ul> <li><code>myque</code>: [6, 2] </li> <li><code>myque.push(-3)</code> \u2192 <code>-3</code> is smaller than any elements inside, which should stay in the queue back. </li> <li> <p><code>myque.push(5)</code> </p> <ul> <li>\u2192 <code>5</code> is bigger than <code>-3</code>; pop out <code>-3</code>, which is out.</li> <li>\u2192 <code>5</code> is bigger than <code>2</code>; pop out <code>2</code>, which is out.</li> <li>\u2192 <code>5</code> is smaller than <code>6</code>; stop popping and push back 5.</li> </ul> </li> <li> <p><code>myque.front()</code>: 6 now is the \"Large Front\".</p> </li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#answer","title":"Answer","text":"Realization solution.c++<pre><code>class Monoqueue {\ndeque&lt;int&gt; myque;\npublic:\nvoid push(int n) {\nwhile(!myque.empty() &amp;&amp; myque.back() &lt; n) myque.pop_back();\nmyque.push_back(n);\n}\nint front() {\nreturn myque.front();\n}\nvoid pop(int n) {\nif(n == myque.front()) myque.pop_front();\n}\n};\nclass Solution {\npublic:\nvector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\nMonoqueue mq;\nvector&lt;int&gt; res;\nfor(int i = 0; i &lt; nums.size(); ++i) { //scan all the elements\nif(i &lt; k-1) mq.push(nums[i]);      //initialize the dequeue\nelse {\nmq.push(nums[i]);           //push in new element, monotonize queue\nres.push_back(mq.front());  //record the \"large front\"\nmq.pop(nums[i-k+1]);        //start from the k-1 element, we pop the front of the monotonic queue\n}\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Monotonic_queue/#references","title":"References:","text":"<ul> <li>[L \u5916\u5546\u9762\u8a66\u8003\u984c] Sliding Window Maximum \u2013 Monotonic queue \u7684\u61c9\u7528</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/","title":"Quick Sort","text":"<p>Keywords: Sorting</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#description","title":"Description","text":"Quick Sort? <p><code>Quick Sort</code> is a sorting method that implements the <code>divide and conquer</code> idea. </p> <p>The related <code>Quickselect</code> algorithm is known as Hoare's selection algorithm, developed by Tony Hoare.</p> Efficiency? <p>Average time complexity: \\(O(n\\log n)\\)</p> <p>Worst time complexity: \\(O(n^2)\\)</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#algorithm-details","title":"Algorithm Details","text":"Steps <p>Step1. \"Pivot\": pick a <code>pivot</code> in the array. We normally pick the most left element.</p> <p>Step2. \"Partition\": scan the whole array. Compare the scanned element with the <code>pivot</code>: </p> <ul> <li><code>element &gt; pivot</code> -&gt; move the right part, get the right part.</li> <li><code>element &lt; pivot</code> -&gt; move the left part, get the left part.</li> </ul> <p>Step3. \"Recursive\": redo left and right parts separately with Step1 and Step2.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#diagram","title":"Diagram","text":"Example of \"Partition\" <p>Let's part the array below when setting the left element as the <code>pivot</code>:</p> <p> </p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#answer","title":"Answer","text":"Realization solution.c++<pre><code>#include &lt;iostream&gt;\n#include &lt;cassert&gt;\n#include &lt;vector&gt;\nusing namespace std;\n//partition\nint partitionArray(vector&lt;int&gt; &amp;nums, int low, int high){\nif(low &gt;= high) return -1;\nint pivot = low, l = pivot + 1, r = high;\nwhile(l &lt;= r){\nif(nums[l] &lt; nums[pivot]) l++;\nelse if(nums[r] &gt;= nums[pivot]) r--; // larger and  equal are all located at the right side\nelse swap(nums[l], nums[r]);\n}\nswap(nums[pivot], nums[r]);\nreturn r;\n}\n//recursive body\nvoid quickSort(vector&lt;int&gt; &amp;nums, int low, int high){  if(low &gt;= high) return;\nswap(nums[low + rand() % (high - low + 1)], nums[low]);\nint pivot = partitionArray(nums, low, high);\nquickSort(nums,low, pivot);\nquickSort(nums,pivot+1, high);\n}\nint main()\n{\nvector&lt;int&gt; input = {4,1,5,3,6};\n//cout&lt;&lt;\"input:\";\n//for(auto i: input)\n//{\n//    if(i==input.back()){\n//        cout&lt;&lt;i&lt;&lt;endl;\n//    }\n//    else cout&lt;&lt;i&lt;&lt;\",\";\n//}\nquickSort(input,0,input.size()-1);\nvector&lt;int&gt; test = {1,3,4,5,6};\nassert(output == test);\n//cout&lt;&lt;\"output:\";\n//for(auto i: input)\n//{\n//    if(i==input.back()){\n//        cout&lt;&lt;i&lt;&lt;endl;\n//    }\n//    else cout&lt;&lt;i&lt;&lt;\",\";\n//}\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Quick_sort/#references","title":"References:","text":"<ul> <li>7.8. The Quick Sort</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/","title":"Topology Sort","text":"<p>Keywords: 2D map, BFS</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#situation","title":"Situation","text":"207. Course Schedule <p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [ai, bi]</code> indicates that you must take course <code>bi</code> first if you want to take course <code>ai</code>.</p> <ul> <li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#example","title":"Example","text":"Example Example 1:Example 2: <ul> <li>Input: <code>numCourses</code> = 2, <code>prerequisites</code> = [[1,0]]</li> <li>Output: true</li> <li>Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.</li> </ul> <ul> <li>Input: <code>numCourses</code> = 2, <code>prerequisites</code> = [[1,0],[0,1]]</li> <li>Output: false</li> <li>Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#pseudo-code","title":"Pseudo-code","text":"Pseudo-code Pseudo-code<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan\"\n//--------------------------------------------\n//0. Results\n&lt;type&gt; result\n//1. Define adjecent matrix &amp; ingoing degree\nvector&lt;vector&lt;int&gt;&gt; adj(numCourses, vector&lt;int&gt;())\nvector&lt;int&gt; degree(numCourses, 0)\n//2. Initialization\nadj[][] &lt;-&gt; outgoing for each point\ndegree[] &lt;-&gt; ingoing for each point\n//3. Define Queue\nqueue&lt;int&gt; q\n//4. Initialize Queue\nfor all points{\n//some condiction, e.g:\nq.push(point -&gt; degree==0)\n}\n//5. Queue's Size satisfy some function\nwhile(q.size()!=0){\ncurrent = q.front\nq pop top\noperate result\nfor (next -&gt; adj[current])\n{\nif (--degree[next]==0/ some condition) q.push(next)\n}\n}\n//6. Output result\nreturn result\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Topology_sort/#answer","title":"Answer","text":"Realization solution.c++<pre><code>//--------------------------------------------\n// Author = \"Tianle Yuan\"\n//--------------------------------------------\nbool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp;prerequisites) { \"kk\"\nvector&lt;vector&lt;int&gt;&gt; adj(numCourses, vector&lt;int&gt;()); //good place!! initialize vector into fixed store size \nvector&lt;int&gt; degree(numCourses, 0);\nfor (auto p: prerequisites)\n{\n//\"0 &lt;= 1\"\nadj[p[1]].push_back(p[0]);//outgoing \ndegree[p[0]]++; //ingoing degree\n}\nqueue&lt;int&gt; q;\nfor (int i = 0; i &lt; numCourses; i++)\n{\nif (degree[i] == 0)\nq.push(i);\n}\nwhile(q.size() != 0)\n{\nint current = q.front();\nq.pop();\nnumCourses--;\nfor (auto next: adj[current])\n{\nif (--degree[next]==0) q.push(next);\n}\n}\nreturn numCourses==0;\n}\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/","title":"Union-find","text":"<p>Keywords: Graph, Set</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#situation","title":"Situation","text":"Situation <p>Need to process the structure of <code>disjoint-set</code> (which has no overlapping with other disjoint subsets).</p> <p>A <code>union-find</code> algorithm can help to do below two things:</p> <ul> <li>Find: Determine which subset a particular element is in. This can be used for determining if two elements are in the same subset.</li> <li>Union: Join two subsets into a single subset. Here first we have to check if the two subsets belong to same set. If no, then we cannot perform union. </li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#question-example","title":"Question Example","text":"323. Number of Connected Components in an Undirected Graph <p>You have a graph of <code>n</code> nodes. You are given an integer <code>n</code> and an array <code>edges</code> where <code>edges[i] = [ai, bi]</code> indicates that there is an edge between <code>ai</code> and <code>bi</code> in the graph.</p> <p>Return the number of connected components in the graph.</p>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#example","title":"Example","text":"Example Example 1:Example 2: <ul> <li>Input: <code>n</code> = 5, <code>edges</code> = [[0,1],[1,2],[3,4]]</li> <li>Output: 2</li> </ul> <ul> <li>Input: <code>n</code> = 5, <code>edges</code> = [[0,1],[1,2],[2,3],[3,4]]</li> <li>Output: 1</li> </ul>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#pseudo-code","title":"Pseudo-code","text":"Basic code structure Basic<pre><code>class Solution {\nprivate:\nvector&lt;int&gt; parents;\nint find(int x) {\nwhile (x != parents[x]) {\nparents[x] = parents[parents[x]];  // compression\nx = parents[x];\n}\nreturn x;\n}\nbool unions(int p, int q) {\nint x = find(p);\nint y = find(q);\nif (x != y) {\nparents[x] = y;\nreturn true;\n}\nreturn false;\n}\npublic:\nint countComponents(int n, vector&lt;pair&lt;int, int&gt;&gt;&amp; edges) {\nparents.resize(n);\nfor (int i = 0; i &lt; n; i++) {\nparents[i] = i;\n}\nint count = n;\nfor (const auto&amp; edge: edges) {\nif (unions(edge.first, edge.second)) {  //for each edges check if they are \"unionable\"\n--count;\n}\n}\nreturn count;\n}\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#answer","title":"Answer","text":"Simplified Solution solution.c++<pre><code>class Solution {\nint countComponents(int n, vector&lt;pair&lt;int, int&gt;&gt;&amp; edges) {\nvector&lt;int&gt; p(n);             //sets\niota(begin(p), end(p), 0);    //indexing\n//equivalent sentence:\n//for (int i=0; i&lt;n; i++)\n//    p[i] = i;\nfor (auto&amp; edge : edges) {\nint v = edge.first, w = edge.second;\nwhile (p[v] != v) v = p[v] = p[p[v]];  //find1\nwhile (p[w] != w) w = p[w] = p[p[w]];  //find2\np[v] = w;                 //union\nn -= v != w;              }\nreturn n;\n}\n};\n</code></pre>"},{"location":"4_Algorithms/Typical_Questions/Leetcode/Unionfind/#references","title":"References","text":"<p>C++ basic Union find solution, and BFS solution</p> <p>Short Union-Find in Python / Ruby / C++</p>"},{"location":"5_FullStack/","title":"\ud83d\udcbb Full Stack","text":""},{"location":"5_FullStack/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ul> <li> <p>Basic knowledge</p> </li> <li> <p>Programming language</p> </li> </ul>"},{"location":"5_FullStack/#references","title":"References:","text":"<ul> <li>Picture resource 1</li> </ul>"},{"location":"5_FullStack/BASIC/","title":"\ud83d\udcbb Full Stack Concepts","text":""},{"location":"5_FullStack/BASIC/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ol> <li> <p>Front End</p> </li> <li> <p>APIs</p> </li> <li> <p>Back End</p> </li> <li> <p>Networking</p> </li> </ol>"},{"location":"5_FullStack/BASIC/API/","title":"APIs","text":""},{"location":"5_FullStack/BASIC/API/#table-of-contents","title":"Table of contents:","text":"<ol> <li>REST API</li> </ol>"},{"location":"5_FullStack/BASIC/API/rest_api/","title":"REST API","text":"<p><code>REST API</code>, also known as <code>RESTful API</code>, is a web service that allows various clients  including browser apps to communicate with a server.</p>"},{"location":"5_FullStack/BASIC/API/rest_api/#basic-knowledge","title":"Basic Knowledge","text":""},{"location":"5_FullStack/BASIC/API/rest_api/#rest","title":"REST","text":"<code>REST</code>? <ul> <li> <p>Definition: Representational State Transfer. It describes a way how a clients and servers interact with each other. </p> </li> <li> <p>Property: REST conforms to specific architectural constraints, like stateless communication and cacheable data. </p> </li> </ul> Operating principle <p><code>REST</code> communication typically bases on HTTP protocol (but that isn't a requirement). Requests are made to a resource URI, possibly containing additional request data. Replies can be anything: <code>HTML</code>, <code>XML</code>, <code>JSON ([RFCs 8259](https://www.rfc-editor.org/rfc/rfc8259))</code>, <code>CSV</code>, <code>plain-text</code>, or even <code>raw binary data</code>. </p> Benifits <ul> <li>Scalability </li> <li>Independent </li> <li>Generality </li> <li>Latency </li> <li>Security </li> <li>Legacy </li> <li>Stateless </li> </ul>"},{"location":"5_FullStack/BASIC/API/rest_api/#rest-over-http-request-to-backend","title":"REST over HTTP (request to backend)","text":"notes <p>In computer programming, <code>create</code>, <code>read</code>, <code>update</code>, and <code>delete</code> (CRUD operations) are the four basic operations of persistent storage.</p> <p>Each letter in the acronym may be mapped to a Hypertext Transfer Protocol (HTTP) method:</p> CRUD HTTP Details Create <code>POST</code>, <code>PUT</code> if we have <code>id</code> or <code>uuid</code> submits new data to the server. Read <code>GET</code> retrieves resources. Update <code>PUT</code>, <code>PATCH</code> updates existing data (specific one). Delete <code>DELETE</code> removes data. Example <p>We can refer to the code described in Express.js to learn how to implement <code>CRUD</code>    operations using <code>Javascript</code>.</p>"},{"location":"5_FullStack/BASIC/API/rest_api/#rest-response-response-to-frontend","title":"REST Response (response to frontend)","text":"Number Meaning 2XX Success 4XX Client Problem 5XX Server Problem"},{"location":"5_FullStack/BASIC/API/rest_api/#implementation-sketch","title":"Implementation Sketch","text":""},{"location":"5_FullStack/BASIC/API/rest_api/#rest-api_1","title":"REST API","text":"<code>REST API</code>? <p><code>API</code>: application programming interface.</p> <p>To access a REST service, the client needs to know the <code>REST API</code> that the service if offering, so there must be documentation, and you need to write code according to that documentation. </p> <p>With <code>OpenAPI</code> this step is automated. With <code>OpenAPI</code>, there exists a machine parseable file that explains to computers how a <code>REST API</code> works. It tells the code what requests exist and what replies to expect.</p> <code>Open API</code>? <p>Suppose you have an OpenAPI implementation and an OpenAPI description file of a REST API. In that case, you can feed that description file to the OpenAPI implementation, and this implementation now knows how to use the REST API, it can generate human-readable documentation for you, or it could even auto-generate code to use the REST API in different languages.</p> Example: Happy Day! <p></p>"},{"location":"5_FullStack/BASIC/API/rest_api/#references","title":"References:","text":"<ul> <li> <p>Best practices for REST API design</p> </li> <li> <p>Open API vs. REST API - difference</p> </li> </ul>"},{"location":"5_FullStack/BASIC/Backend/","title":"Back End","text":""},{"location":"5_FullStack/BASIC/Backend/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Node.js.</p> </li> <li> <p>Express.js.</p> </li> <li> <p>Routing.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Backend/expressjs/","title":"Express.js","text":""},{"location":"5_FullStack/BASIC/Backend/expressjs/#definiton","title":"Definiton","text":"What <p><code>Express.js</code>, or simply <code>Express</code>, is a back end web application framework for building <code>RESTful APIs</code> with <code>Node.js</code>, released as free and open-source software under the MIT License. It has been called the de facto standard server framework for Node.js.</p> For <p>It is designed for building web applications and APIs. </p>"},{"location":"5_FullStack/BASIC/Backend/expressjs/#usage","title":"Usage","text":"Code using <p><pre>\n//declare using Express.js\nconst express = require('express')\nconst app = express() \n\u00a0\n//app starts a server listens on port 3000 for connections\nconst port = 3000\n\u00a0\n//app responds with \u201cHello World!\u201d for requests to the root URL (/) or route. For every other path, it will respond with a 404 Not Found.\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!')\n})\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p> Steps of running locally <ol> <li>Create a directory named <code>myapp</code>.</li> <li><code>cd</code> into the directory and run: <code>npm init</code>.</li> <li>Command prompts you for a number of things:<ul> <li>name: (RETURN for default).</li> <li>version of your application: (RETURN for default).</li> <li>entry point: (default: index.js) <code>app.js</code></li> </ul> </li> <li>Install express as a dependency (choose one):<ul> <li>install Express in the <code>myapp</code> directory and save it in the dependency list: <code>npm install express</code> </li> <li>install Express in the <code>myapp</code> directory temprarily and not add it to the dependency list: <code>npm install express --no-save</code> </li> </ul> </li> <li>Run the app with command: <code>node app.js</code></li> <li>Then, load <code>http://localhost:&lt;port&gt;/</code> in a browser to see the output.</li> </ol>"},{"location":"5_FullStack/BASIC/Backend/expressjs/#implement-routing","title":"Implement Routing","text":"<p>We have already learn Backend Routing. Here, let's see how to implement <code>Routing</code> by using Express.js.</p> Routing example <p>Please go to Hoppscotch for implementing <code>POST</code>, <code>PUT</code> and <code>DELETE</code></p> <p><pre>\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\u00a0\napp.use(bodyParser.json());\n\u00a0\napp.get('/articles', (req, res) =&gt; {\n  const articles = [];\n  // code to retrieve an article...\n  res.json(articles);\n});\n\u00a0\napp.post('/articles', (req, res) =&gt; {\n  // code to add a new article...\n  res.json(req.body);\n});\n\u00a0\napp.put('/articles/:id', (req, res) =&gt; {\n  const { id } = req.params;\n  // code to update an article...\n  res.json(req.body);\n});\n\u00a0\napp.delete('/articles/:id', (req, res) =&gt; {\n  const { id } = req.params;\n  // code to delete an article...\n  res.json({ deleted: id });\n});\n\u00a0\napp.listen(3000, () =&gt; console.log('server started'));\n</pre></p>"},{"location":"5_FullStack/BASIC/Backend/expressjs/#references","title":"References:","text":"<ul> <li>Express.js wiki</li> </ul>"},{"location":"5_FullStack/BASIC/Backend/nodejs/","title":"Node.js","text":"<p>Node.js represents a \"JavaScript everywhere\" paradigm, unifying web-application development around a single programming language, rather than different languages for server-side and client-side scripts.</p> What? <p><code>Node.js</code> is an open-source server environment. <code>Node.js</code> is cross-platform and runs on Windows, Linux, Unix, and macOS. </p> <p><code>Node.js</code> is a back-end JavaScript runtime environment. </p> <p><code>Node.js</code> runs on the V8 JavaScript Engine and executes JavaScript code outside a web browser.</p>"},{"location":"5_FullStack/BASIC/Backend/nodejs/#references","title":"References:","text":"<ul> <li>Node.js wiki</li> </ul>"},{"location":"5_FullStack/BASIC/Backend/routing/","title":"Backend Routing","text":""},{"location":"5_FullStack/BASIC/Backend/routing/#definiton","title":"Definiton","text":"When? (background) <p>client requests to a particular <code>endpoint</code> [ &lt;=&gt; <code>URI</code> + <code>HTTP</code> request method (<code>GET</code>, <code>POST</code>, ...) ]. </p> What? (import routing) <p>To handle the request, in <code>backend routing</code>, the server handles every request by responding to the client with a code <code>201</code>(I got that thing you want!) or a <code>404</code>(Nope, I don\u2019t have that!).</p> Situation? (example) <p>Let\u2019s say a user fills out a form with his name, address, favorite hobby and sends a <code>POST</code> request by submitting the form. That <code>GET request url</code> is sent to the server, and the server serves back the <code>requested url</code> to the client as a static file that is stored on the server. </p> <p>If the server doesn\u2019t have the requested file, then it returns a <code>404</code> response error. </p>"},{"location":"5_FullStack/BASIC/Backend/routing/#usage","title":"Usage","text":"Code using Express.js syntax <p><code>app.METHOD(PATH, HANDLER)</code></p> <ul> <li><code>app</code>: an instance of express.</li> <li><code>METHOD</code>: an HTTP request method, in lowercase.</li> <li><code>PATH</code>: a path on the server.</li> <li><code>HANDLER</code>: the function executed when the route is matched.</li> </ul> Example code <p><pre>\n//Respond with Hello World! on the homepage:\napp.get('/', (req, res) =&gt; {\n    res.send('Hello World!')\n})\n</pre></p> <p><pre>\n//Respond to POST request on the root route (/), the application\u2019s home page:\napp.post('/', (req, res) =&gt; {\n    res.send('Got a POST request')\n})\n</pre></p> <p><pre>\n//Respond to a PUT request to the /user route:\napp.put('/user', (req, res) =&gt; {\n    res.send('Got a PUT request at /user')\n})\n</pre></p> <p><pre>\n//Respond to a DELETE request to the /user route:\napp.delete('/user', (req, res) =&gt; {\n    res.send('Got a DELETE request at /user')\n})\n</pre></p>"},{"location":"5_FullStack/BASIC/Backend/routing/#handlers-for-routing","title":"Handlers for Routing","text":"<p>Open the boxes below to see the examples \ud83d\udc47</p> Four classes of handler 1\u00b0 <code>A single callback function</code> can handle a route <p><pre>\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\u00a0\napp.get('/', (req, res) =&gt; {\n    res.send('Hello from A!')\n})\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p> 2\u00b0 <code>More than one callback function</code> can handle a route (use <code>next()</code> to control the next callback.) <p><pre>\nconst express = require('express')\nconst app = express() \nconst port = 3000\n\u00a0\napp.get('/', (req, res, next) =&gt; {\n    console.log('the response will be sent by the next function ...')\n    next()\n}, (req, res) =&gt; {\n    res.send('Hello from B!')\n})\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p> 3\u00b0 <code>An array of callback functions</code> can handle a route <p><pre>\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\u00a0\nconst cb0 = function (req, res, next) {\n    console.log('CB0')\n    next()\n}\n\u00a0\nconst cb1 = function (req, res, next) {\n    console.log('CB1')\n    next()\n}\n\u00a0\nconst cb2 = function (req, res) {\n    res.send('Hello from C!')\n}\n\u00a0\napp.get('/', [cb0, cb1, cb2])\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p> 4\u00b0 <code>A combination of independent functions and arrays of functions</code> can handle a route <p><pre>\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\u00a0\nconst cb0 = function (req, res, next) {\n  console.log('CB0')\n  next()\n}\n\u00a0\nconst cb1 = function (req, res, next) {\n  console.log('CB1')\n  next()\n}\n\u00a0\napp.get('/', [cb0, cb1], (req, res, next) =&gt; {\n  console.log('the response will be sent by the next function ...')\n  next()\n}, (req, res) =&gt; {\n  res.send('Hello from D!')\n})\n\u00a0\napp.listen(port, () =&gt; {\n    console.log(`Example app listening on port ${port}`)\n})\n</pre></p>"},{"location":"5_FullStack/BASIC/Backend/routing/#references","title":"References:","text":"<ul> <li> <p>Frontend Routing vs Backend Routing</p> </li> <li> <p>Express.js wiki</p> </li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/","title":"Front End","text":""},{"location":"5_FullStack/BASIC/Frontend/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Mock</p> </li> <li> <p>Auth.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Frontend/Auth/","title":"Auth","text":""},{"location":"5_FullStack/BASIC/Frontend/Auth/#auth_1","title":"Auth","text":"Auth? <p><code>Auth</code> points to Authentication and Authorization. They come from REST API communication. </p> <ul> <li>Without Authentication \u2192 401 (Do not know who you are).</li> <li>Without Authorization \u2192 403 (Do not have permission to access resources).</li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#token","title":"Token","text":"<p>To realize the two Auth principles. Including <code>Token</code> becomes essential.</p> Why <code>Token</code>? <p>Compared with username &amp; password, tokens are temporary, stored in browser or device. When sessions complete or exceed the expiration time, not like username &amp; password, they are automatically destroyed.</p>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#jwtio","title":"JWT.io","text":"<code>JWT.io</code> for <code>Token</code> generation <p><code>JWT.io</code> is constructed by below components:</p> <ul> <li>Header: Identify:<ul> <li>Which algorithm(normally HS256) to generate the signature.</li> <li>What token type (Here JWT).</li> </ul> </li> <li>Payload: A set of claims.</li> <li>Signature: Securely validates the token, calculated by encoding the header and payload using <code>Base64URL Encoding [RFC 7519](https://www.rfc-editor.org/rfc/rfc7519)</code></li> </ul> <p> </p>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#how-to-use-token","title":"How to use Token","text":"How to apply <code>Token</code>? <p>We inject tokens in the HTTP header.</p>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#oauth-20","title":"OAuth 2.0","text":"Why need two <code>Tokens</code>? <p>It limits the <code>blast radius</code> of a <code>credential attack</code>.</p> Credential attack! Username-Password Auth <p> </p> One Token Auth <p> </p> Two Token Auth (OAuth 2.0) <p> </p>"},{"location":"5_FullStack/BASIC/Frontend/Auth/#implement-oauth-20","title":"Implement OAuth 2.0","text":"<p>For the two tokens, one is named <code>Access Token</code>; another is named <code>Refresh Token</code>.</p> Difference between the two tokens? <ul> <li> <p><code>Access token</code> have <code>\"Time-to-live\"</code>, which is the maximum that the access token will be valid for use within the application.</p> </li> <li> <p><code>Refresh tokens</code> have longer expiration times than access tokens. The exsistance of <code>refresh tokens</code> allows you to use shorter lifetimes for access tokens WITHOUT having to request user credentials multiple times.</p> </li> </ul> Iterations Diagram <p> </p> <p> </p> <p> </p> <p> </p> <p> </p>"},{"location":"5_FullStack/BASIC/Frontend/Mock/","title":"Mock","text":""},{"location":"5_FullStack/BASIC/Frontend/Mock/#mock_1","title":"Mock","text":"Mock? <p><code>Mock</code> means \"fake\". The point of using <code>mock</code> is for <code>parallelize development</code>. When we want to test the frontend, if the backend is still in development, we can use a <code>mock server</code> or <code>mock data</code> for temporal use.</p> When use mock? <ol> <li>Testing (unit test, integration test).</li> <li>Parallelize work (frontend and backend).</li> <li>Develop without the payment \ud83d\udcb0\ud83d\udcb0\ud83d\udcb0 for real server responses and requests.</li> </ol>"},{"location":"5_FullStack/BASIC/Frontend/Mock/#mock-server","title":"Mock Server","text":"Mock Server <p>Definition: imitate a real server by providing realistic mock responses to requests.</p> <p>Properties:</p> <ul> <li>Same abstract interface/contract (e.g. REST API).</li> <li>Not a real implementation.</li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/Mock/#mock-object","title":"Mock Object","text":"Mock Object <p>Definition: in OOP (object-oriented programming), <code>mock object</code> is a simulated object that mimics the behavior of real objects in controlled ways (e.g. Mock class, Mock struct).</p>"},{"location":"5_FullStack/BASIC/Frontend/uri/","title":"Uniform Resource Identifier(URI)","text":"<p>In web development we always say <code>endpoints</code>. The concept refers to <code>URI</code> + <code>HTTP request method</code> (GET, POST, etc.). So what is <code>URI</code>, what is the difference between <code>URI</code> and <code>URL</code>?</p>"},{"location":"5_FullStack/BASIC/Frontend/uri/#definition","title":"Definition","text":"What is <code>URI</code> and <code>URL</code> <ul> <li> <p><code>URI</code>: Uniform Resource Identifier.</p> </li> <li> <p><code>URL</code>: Uniform Resource Locator. </p> </li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/uri/#difference","title":"Difference","text":"Difference between <code>URI</code> and <code>URL</code>? <ul> <li><code>URI</code> identifies a resource and differentiates it from others by using a name, location, or both. </li> <li><code>URL</code> identifies the web address or location of a unique resource. </li> </ul>"},{"location":"5_FullStack/BASIC/Frontend/uri/#syntax","title":"Syntax","text":"Syntax of <code>URI</code>/<code>URL</code> <p><code>scheme:[//authority]path[?query][#fragment]</code></p> <p> </p> SchemeAuthority ComponentPathQuery ComponentFragment Component <p>The first component of a URI defines the addressing system: </p> <ol> <li>in some cases, it is a protocol used to access a resource. </li> <li>meanwhile, other techniques may NOT specify any protocol.</li> </ol> <p><code>Scheme</code> can contain any combination of letters, digits, plus signs, periods, or hyphens followed by a colon. The most common URI schemes include <code>HTTP</code>, <code>HTTPS</code>, <code>FTP</code>, <code>mailto</code>, and <code>file</code>.  </p> HTTP, HTTPS, and FTP <ol> <li><code>HTTP</code> (Hypertext transfer protocol) \u2013 allows users to access data from web pages using hypertext links.</li> <li><code>HTTPS</code> (Hypertext transfer protocol secure) \u2013 protects data transmission between the user\u2019s browser and site.</li> <li><code>FTP</code> (File transfer protocol) \u2013 used for a file transfer between different devices via a network.</li> </ol> <p>e.g. <code>file:website.com/pathtofile/intro.pdf</code></p> <p>An optional component preceded by a double slash and terminated by a slash, a question mark, or a hash symbol. It consists of three sub-components:</p> <ol> <li>Userinfo \u2013 includes a <code>username</code> and a <code>password</code> separated by a colon.</li> <li>Host \u2013 consists of either an <code>IP address</code> or a <code>registered name</code>. The IP address should be inserted into brackets.</li> <li>Port \u2013 a <code>protocol</code> used for connecting the server. It is an optional sub-component followed by a colon.</li> </ol> <p>e.g. <code>file:(//)website.com/pathtofile/intro.pdf</code></p> <p>The thrid component contains a sequence of data segments that describes the location of a resource in a directory structure. It should be empty or separated by a slash. </p> <p>e.g. <code>telnet://192.0.2.16:80/ </code> (valid URI with an empty path)</p> <p>e.g. <code>foo://info.example.com ?fred</code> (valid URI with an empty path)</p> <p>e.g. <code>file:(//)website.com/pathtofile/intro.pdf</code></p> <p>A component that contains a query string of non-hierarchical data. It is often a string of <code>key=value</code> pairs. This component is preceded by a <code>question mark</code>. </p> <p>e.g. <code>https://example.org/test/test1?search=test-question#part2</code></p> <p>This optional component includes a fragment identifier that provides the direction to a secondary resource. A fragment is preceded by a <code>hash symbol</code> and terminated by the end of a URI.</p> <p>e.g. <code>https://example.org/test/test1?search=test-question#part2</code></p>"},{"location":"5_FullStack/BASIC/Frontend/uri/#references","title":"References:","text":"<ul> <li> <p>URI vs URL: Differences and When to Use Them</p> </li> <li> <p>picture resource 1</p> </li> <li> <p>picture resource 2</p> </li> </ul>"},{"location":"5_FullStack/BASIC/Web/","title":"Computer Networking","text":""},{"location":"5_FullStack/BASIC/Web/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>Performance Indices, for basic indices knowledge.</p> </li> <li> <p>OIS, for system details of networking.</p> </li> <li> <p>Protocols, for only want to learn protocols.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/Indices/","title":"Performance Indices","text":""},{"location":"5_FullStack/BASIC/Web/Indices/#speed","title":"Speed","text":"Networking <code>speed</code>? <p>The data (bit: <code>0</code> or <code>1</code>) transmission speed.</p> <p>e.g. <code>bps</code> or <code>bit/sec</code> -- bits per second</p> <ul> <li><code>Mbps</code>: 1,000,000 bit/s, is how many millions of bits a network can theoretically transfer each second.   </li> <li><code>mbps</code>: 0.001 bit/s.</li> <li><code>kbps</code>: 1,000 bit/s.</li> <li><code>Gbps</code>: 1,000,000,000 bit/s.</li> </ul>"},{"location":"5_FullStack/BASIC/Web/Indices/#bandwidth","title":"Bandwidth","text":"Networking <code>bandwidth</code>? <p>Maximum amount of data your connection can handle at a moment (normally a second).</p> <p>e.g. Ethernet bandwidth: <code>10 Mbit/s</code> \u2192 the maximum amount of data can be transferred in a second is 10 Mbit.</p>"},{"location":"5_FullStack/BASIC/Web/Indices/#throughput","title":"Throughput","text":"Networking <code>throughput</code>? <p>The amount of data passing through a network (or channel, or interface) in a unit time.</p> <p>e.g. We can understand it as real-time \"traffic\" on a \"bandwidth lane\". But the number of \"cars\" cannot be more than the number the \"bandwidth lane\" allows.</p>"},{"location":"5_FullStack/BASIC/Web/Indices/#delay","title":"Delay","text":"Networking <code>delay</code>? <p>The time (<code>s</code>) required to travel from one end of a network to another end.</p> <p> </p> <p>There are 4 types of delays, corresponding to the concepts shown in the picture above:</p> Transmission delay <p>The <code>transmission delay</code> measures the speed of data. </p> <p>It's the time from when the first bit of a file reaches a link to when the last bit reaches the link.</p> \\[Transmission\\:Delay = \\dfrac{L(bis)}{R(bits/sec)}\\] <p>\\(L\\) is the file size (bits). \\(R\\) is the transmission speed (bits/sec).</p> Propagation delay <p>The <code>propagation delay</code> measures the speed of the medium. </p> <p>It's the amount of time a bit on the link needs to travel from the source to the destination, where the speed is dependent on the medium of communication.</p> \\[Propagation\\:Delay = \\dfrac{D(m)}{S(m/s)}\\] <p>\\(D\\) is the distance (meter). \\(S\\) is the propagation speed (meter/sec).</p> Queuing delay <p>The <code>queuing delay</code> measures the buffering rate. </p> <p>If a packet arrives at its destination and the destination is busy, it will not handle that packet immediately. Instead, the packet has to wait in the <code>input/output queues</code>. </p> <p>This delay depends on the following factors:</p> <ul> <li>The number of packets arriving in a short time interval.</li> <li>The transmission capacity.</li> <li>The size of the queue.</li> </ul> Processing Delay <p>The <code>processing delay</code> measures the speed of the processor (router or host machine).</p> <p>It is the time taken by a processor to process the data packet. </p>"},{"location":"5_FullStack/BASIC/Web/Indices/#round-trip-time","title":"Round-Trip Time","text":"Networking <code>Round-Trip time</code>? <p>The duration in milliseconds (ms), taken by the network to go from a start-point sending a request to the start-point getting the response that the end-point has received the data.</p>"},{"location":"5_FullStack/BASIC/Web/Indices/#bandwidth-delay-product","title":"Bandwidth-Delay Product","text":"Networking <code>bandwidth-delay product</code>? \\[Transmission\\: delay\\times Bandwidth\\]"},{"location":"5_FullStack/BASIC/Web/Indices/#references","title":"References","text":"<p>What are the different kinds of computing network delays?</p> <p>Picture resource</p>"},{"location":"5_FullStack/BASIC/Web/SSH/","title":"SSH and HTTPS","text":""},{"location":"5_FullStack/BASIC/Web/SSH/#https","title":"HTTPS","text":"HTTPS?"},{"location":"5_FullStack/BASIC/Web/SSH/#ssh","title":"SSH","text":"SSH? <p><code>SSH</code> is Secured Shell, which is a protocol that needs to use public-key and private-key cryptography to finish communication authority. SSH is like HTTPS, which is much safer than HTTP.</p>"},{"location":"5_FullStack/BASIC/Web/OIS/","title":"OIS","text":""},{"location":"5_FullStack/BASIC/Web/OIS/#ois-model","title":"OIS Model","text":"<p><code>OIS</code> (Open Systems Interconnection) model can be split into 7 levels:</p> <p> </p>"},{"location":"5_FullStack/BASIC/Web/OIS/#ois-catlog","title":"OIS Catlog","text":"<ol> <li> <p> Physical Layer.</p> </li> <li> <p> Data Link Layer.</p> </li> <li> <p> Network Layer.</p> </li> <li> <p>Transport Layer.</p> </li> <li> <p>Session Layer.</p> </li> <li> <p>Presentaion Layer.</p> </li> <li> <p>Application Layer.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/application/","title":"Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/application/#_1","title":"****","text":"?"},{"location":"5_FullStack/BASIC/Web/OIS/application/#references","title":"References","text":""},{"location":"5_FullStack/BASIC/Web/OIS/datalink/","title":"Data Link Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#definition","title":"Definition","text":"Demand? <p>The <code>bitstream</code> can cause errors (see physical layer's cons) when it is transmitted on a medium. We need a new layer that provides high-quality (error free) data transfer services to topper layers (such as network layer).</p> <pre><code>graph LR\n    A[Network Layer] -- packets --- B[Data Link Layer]\n    B -- \"frames (bit-by-bit)\" --- C[Physical Layer]</code></pre> For? <p><code>Data Link Layer</code> has below functions:</p> <ol> <li>Framing. </li> <li>Addressing.</li> <li>Transparent Transmission.</li> <li>Error Detection</li> <li>Error Correction</li> <li>Flow Control</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#abstracting","title":"Abstracting","text":"From <code>physical layer</code> to <code>data link layer</code> <p>We know that in the <code>physical layer</code>, information is communicated with bit stream through cable or WIFI. </p> <p>To abstract the <code>data link Layer</code>, we classify the \"communication channel\" in this layer into two types:</p> <ol> <li>Point-to-point communication channel (use P2P protocol).</li> <li>Broadcast communication channel (use CSMA/CA protocol).</li> </ol> <p> </p> Notice! <p>To understand the <code>data link layer</code> better, we think about the case of broadcasting first. </p> <p>LAN (local area network) is a computer network that has the broadcasting function.</p> <p>Furthermore, from all the <code>LAN</code> products, we peak <code>Ethernet</code>, which fllow the standard of DIX Ethernet V2 or IEEE 802.3.</p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#anatomy","title":"Anatomy","text":"Dissect the <code>data link layer</code> <p>In order to make the <code>data link layer</code> more suitable for  various <code>LAN</code> standards, the 802 committee divided the <code>data link layer</code> into two sub-layers:</p> <ul> <li>Logical Link Control (LLC): provides the logic for the data link.</li> <li>Medium Access Control (MAC)\uff1aprovides controls for accessing the transmission medium. It is transparent to <code>LLC</code> sublayer</li> </ul> <p> </p> <p>Let's go to check them one by one! \ud83d\udef8\ud83d\udef8 Drink some coffee first!  </p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#1-mac-sublayer","title":"1. MAC Sublayer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#mac-address","title":"Mac address","text":"MAC Address? <p><code>MAC Address</code> is also called as the <code>physical Address</code> of a network device. <code>MAC Address</code> is used by the <code>MAC sublayer</code>. <code>MAC Address</code> is worldwide unique (since millions of network devices exist, we need to uniquely identify each). </p> <p></p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#functions-of-mac-sublayer","title":"Functions of MAC Sublayer","text":"<p><code>MAC</code> sublayer is responsible for:</p> <ol> <li>Framing</li> <li>Addressing</li> <li>Transparent Transmission</li> <li>Control physical medium access</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#11-framing","title":"1.1 Framing","text":"<code>Framing</code>? <p>Transfer network data (a stream of <code>bits</code>) into <code>frames</code>, which is discernible blocks of information.</p> <code>Frame</code>? <p>Transferred <code>protocol data units</code> (PDUs) in the <code>data link layer</code>.</p> Types of <code>Framing</code> <p> </p> <p>There are two types of <code>Framing</code>:</p> <ul> <li> <p>Fixed-size Framing:</p> <p>The <code>frame</code> is of fixed size. No need to add delimiters.</p> Con <p>When the data size is smaller than the fixed frame size, the frame itself will suffer   internal fragmentation. We need to <code>pad</code> it.</p> </li> <li> <p>Variable-size Framing:</p> <p>The <code>frame</code> needs to indicate the begin and end to be distinguished.</p> Ways to implement <ol> <li> <p><code>Length field</code> : define the length in the frame.</p> <ul> <li>e.g. Ethernet (802.3) \u2192 <code>Ethernet frame</code>.</li> <li>Cons: Length field may get corrupted sometimes.</li> </ul> </li> <li> <p><code>ED (End Delimeter)</code> : add end delimiter (like Period in English).</p> <ul> <li>e.g. Token Ring (802.5).</li> <li>Cons: The end delimiter can appear in the data.</li> <li>Types: <ul> <li>Character/Byte Stuffing (see later in 1.2 Transparent transmission)</li> <li>Bit Stuffing</li> </ul> </li> </ul> </li> </ol> </li> </ul> Schematic Diagram of <code>Ethernet frame</code> <p>Here below is the <code>Ethernet frame</code> format:</p> <p> </p> <ol> <li> <p>The Preamble area is used by the receiving interface\u2019s circuitry to determine when a frame arrives and the amount of time between encoded bits (called <code>clock recovery</code>).</p> </li> <li> <p>The SFD and Preamble area indicates when the frame start.</p> </li> <li> <p>The Basic Frame (/Frame) field starts from the <code>Destination (DST)</code> and <code>Source (SRC)</code> address fields. </p> </li> <li> <p>Both DST (destination) and SRC (source) areas are all MAC addresses or known by other names such as:</p> <ul> <li>Link-layer address</li> <li>802 address</li> <li>Hardware address</li> <li>Physical address</li> </ul> </li> <li> <p>The Type/Lenth area identifies the type of data that follows the header. It is for layer three using layer two frames. It indicates which layer three's protocol is used. Popular values used with <code>TCP/IP</code> networks include:</p> <ul> <li>IPv4 (0x0800)</li> <li>IPv6 (0x86DD)</li> <li>ARP (0x0806).</li> </ul> </li> <li> <p>The DST, SRC, and Type/Lenth are composed as the <code>MAC header</code>.</p> </li> <li> <p>In the MAC Client Data field, we ignore the optional parts and only focus on the Payload area, which is the data the frame carries from source to destination. The Payload data is <code>encapsulated</code> by the layer three.</p> </li> <li> <p>The FCS (frame check sequence) is used to identify any errors in the frame.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#12-addressing","title":"1.2 Addressing","text":"<p>As we know, <code>MAC address</code> is unique for each device. Thus, we can encapsulate the unique <code>MAC address</code> -- the source (<code>SRC</code>) and destination (<code>DST</code>) address in the header of each <code>frame</code> to ensure node-to-node delivery.</p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#13-transparent-transmission","title":"1.3 Transparent transmission","text":"What is the <code>transparent transmission</code>? <p>It describes a phenomenon of data transmission without error. It's as if the transmission itself doesn't exist.</p> Why? <ul> <li>If the data transmitted is printable characters (95 in total) in <code>ASCII</code> code, everything is okay.</li> <li>However, if the data transmitted contains unprintable characters, errors will show up.</li> </ul> How? <p>Remember <code>Variable-size Framing</code>? Besides using the <code>length field</code> to implement <code>frame</code>, we can also refer the <code>ED (End Delimeter)</code> method! Here we use <code>Byte Stuffing</code>(or <code>Character Stuffing</code>) \ud83d\udc24.</p> Implement <code>Byte Stuffing</code> <p></p> <p>As the diagram shows above, we give the following explanations:</p> <ol> <li><code>Flag</code> can be <code>SOH</code> or <code>EOT</code>. </li> <li><code>SOH</code> is the head part of the frame. We can use the <code>Preamble</code>+<code>SFD</code> areas as an example.</li> <li><code>EOT</code> is the tail part of the frame. We can use the <code>Carrier Extension</code> areas as an example.</li> <li>When the <code>MAC Client Data</code> field exists unprintable characters such as <code>Flag</code> (<code>SOH</code> or <code>EOT</code>) OR <code>ESC</code>, we can add an extra <code>escape character</code> -- <code>ESC</code> to diminish ambiguation.</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#14-control-physical-medium-access","title":"1.4 Control physical medium access","text":"<p>No more explanations here; just know it as literal meaning.</p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#2-llc-sublayer","title":"2. LLC Sublayer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#functions-of-llc-sublayer","title":"Functions of LLC Sublayer","text":"<p><code>LLC</code> sublayer is responsible for:</p> <ol> <li>Error Detection</li> <li>Error Correction</li> <li>Flow Control</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#21-error-detection","title":"2.1 Error Detection","text":"What Error? <p>When data is transmitted, ,<code>0</code> can possibly be changed into <code>1</code>, which we call it as <code>bit errors</code>. It can be caused by: - Noise - Interference - Distortion - Bit synchronization errors</p> <code>BER</code> (Bit Error Rate) <p><code>BER</code> (Bit Error Rate): The percentage of incorrect transmitted bits to the total number of transmitted bits.</p> <p>\\(BER = \\frac{Error\\;Bits}{Transmitted\\;Bits}\\)</p> How to detect? <p><code>CRC</code> (Cyclic redundancy check) is the method we use for error detection. </p> <p>Below diagram shows the idea of <code>CRC</code>:</p> <p> </p> <p>A good link for checking the methods for Error Detection: Error Detection in Computer Networks</p> Unreliable Transmission Protocols <p>Generally, on the transmission link with poor communication quality (<code>errors</code> exists), we will add the <code>acknowledgement</code> and <code>retransmission</code> mechanisms to make sure the correctness of frame data. </p> <p>Without the two mechanisms we call the protocol an <code>unreliable transmission protocol</code>, such as:</p> <ul> <li>PPP (for Point-to-point communication)</li> <li>CSMA/CD (for Broadcast communication)</li> <li>UDP (for the third layer, we will mention it later)</li> </ul>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#22-error-correction","title":"2.2 Error Correction","text":"<p>Just for simple knowing:</p> <p>Error Correction Techniques:</p> <ol> <li> <p>Backward Error Correction (Retransmission) \u2212  If the receiver detects an error in the incoming frame, it requests the sender to retransmit the frame. It is a relatively simple technique. But it can be efficiently used only where retransmitting is not expensive, as in fiber optics and the time for retransmission is low relative to the requirements of the application.</p> </li> <li> <p>Forward Error Correction \u2212  If the receiver detects some error in the incoming frame, it executes the error-correcting code that generates the actual frame. This saves the bandwidth required for retransmission. It is inevitable in real-time systems. However, if there are too many errors, the frames need to be retransmitted.</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#23-flow-control","title":"2.3 Flow Control","text":"<p>It is about processing the frame flow when transmitting. Details about the concepts see in Flow Control in Data Link Layer. There are basically two type of methods:</p> <p> </p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#devices-in-data-link","title":"Devices in Data Link","text":"<p>Finally, let's check some devices used in the <code>Data Link Layer</code>. </p> <code>Network Interface Card (NIC)</code> <p> </p> <p>Computer output data, through the <code>Network Interface Card</code> (NIC / Ethernet Card), will become <code>Ethernet frames</code>. <code>Network card</code> will also complete some broadcast link management (CDMA/CD implementation).</p> <code>Network bridge</code> <p>A bridge can be used to: - Interconnect two <code>LANs</code> together. - Separate network <code>segments</code>, which is a section of a network separated by <code>bridges</code>, <code>switches</code>, and <code>routers</code>.</p> <p> </p> <code>Ethernet switches</code> <p>Picture first: \ud83d\udc40  </p> <p>If you have ever traveled to any computer room before, you must have seen the sightseeing below: </p> <p>Roughly, we can use <code>Hub</code>, <code>Switch</code>, and <code>Router</code> for <code>Ethernet switches</code>.  </p> <p>But what is the difference?</p> Hub <p><code>Hub</code> is a type of device that\u2019s commonly used as a connection point for various devices in a <code>Local Area Network (LAN)</code>.</p> <ul> <li>It works by receiving packets that arrive at one of its multiple ports, copying the packets, and sending them to its other ports so that all <code>LAN</code> segments can see the data.</li> </ul> Watch out! <p><code>Hub</code> cannot handle the transmit collision. Once the collision happens, the collision will repeat and impact all the devices it connects to. That's why we should use <code>Switch.</code></p> Switch (switching hub) <p><code>Switch</code> is a more efficient, more intelligent version of a <code>hub</code>.</p> <ul> <li> <p>It uses packet switching to receive and forward data to its intended destination within a network.</p> </li> <li> <p>Rather than blindly passing along data to all devices in a network as <code>Hub</code>, a switch records and \"learn\" the addresses of the connected devices.</p> </li> <li> <p>Thus, <code>switch</code> can isolated <code>conflict domains</code> (which refers to the range that only one device can send information at a time).</p> </li> </ul> <p> </p> Router <p><code>Router</code> is the most intelligent and complex of the three network connection devices. <code>Router</code> is the device in the <code>network layer</code>.</p> <ul> <li> <p>Rather than just forwarding data packets to other devices in a single network, routers are designed to forward data packets between two or more networks. It also directs traffic between those networks.</p> </li> <li> <p><code>Router</code>'s function = <code>Switch</code> + <code>Hub</code> + More.</p> </li> <li> <p>Thus, <code>router</code> can isolated <code>broadcast domain</code> (which refers to the range when the site sends out a broadcast signal, all the devices can receive the signal).</p> </li> </ul> <p>Okay, no more knowledge today! Enough details! Cheers the coffee \u2615\u2615  </p>"},{"location":"5_FullStack/BASIC/Web/OIS/datalink/#references","title":"References","text":"<p>Picture Resource 1</p> <p>Picture Resource 2</p> <p>Picture Resource 3</p> <p>Picture Resource 4</p> <p>Picture Resource 5</p> <p>Picture Resource 6</p> <p>Picture Resource 7</p> <p>Error Detection and Correction in Data link Layer</p> <p>Picture Resource 8</p> <p>Picture Resource 9</p> <p>Picture Resource 10</p> <p>Networking Fundamentals: OSI 7 - Layer 2 - the data link layer - Part 2</p> <p>THE DIFFERENCE BETWEEN A HUB, SWITCH, &amp; ROUTER</p>"},{"location":"5_FullStack/BASIC/Web/OIS/network/","title":"Network Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/network/#definition","title":"Definition","text":"Demand? <p>Data need to be transferred from one location to another.</p> Why don't we use <code>Data Link Layer</code>? <p>If we need the data to be transferred from the western coast <code>LAN</code> to the eastern coast <code>LAN</code> across the US, we have the below plans:</p> <ul> <li>Plan A: LAN is limited locally. So we should use other long-distance links such as using <code>PPP</code>/<code>MPLS</code>/<code>ATM</code>. Obviously, building specific <code>p2p</code> networking is costly and messy. </li> <li>Plan B: The <code>protocols</code> used in the <code>Layer2 network</code> are not always the same. Compatibility is a problem.</li> </ul> <p> </p> How? <p>To solve this problem, we need to import a new layer. <code>Layer3</code> -- <code>Network Layer</code> is where <code>Internetworking</code> comes from. </p> <p>We need to use <code>IP protocol</code> and <code>IP packets</code>.</p> <p></p>"},{"location":"5_FullStack/BASIC/Web/OIS/network/#ip-packets","title":"IP packets","text":"<code>IP packets</code>? <p><code>IP packets</code> is the data unit used within the Internet Protocol. It is similar to <code>frame</code> in the <code>Layer 2</code>. </p> <p><code>Datagram</code> is an alternative term for \"packet\".</p> Structure <p>There are two types of IP packets for <code>IPv4</code> (Internet Protocol version 4) and <code>IPv6</code> (Internet Protocol version 6):</p> <p> </p>"},{"location":"5_FullStack/BASIC/Web/OIS/network/#references","title":"References","text":"<p>Networking Fundamentals: OSI 7 - Layer 3 - the network layer - Part 1</p>"},{"location":"5_FullStack/BASIC/Web/OIS/physical/","title":"Physical Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/physical/#definition","title":"Definition","text":"What? <p>Instead of representing physical mediums, <code>physical layer</code> is a standard:</p> <ul> <li>Electrical Specification: The logic level is used in <code>+10v ~ +15v</code> to represent binary <code>0</code>; <code>-10v ~ -15v</code> to represent binary <code>1</code>.</li> <li>Physical Specification: Such as timing, rates, distances, modulation, and connectors.</li> <li>Rules: For transmission media interfaces -- transmission and reception of raw <code>bit streams</code>.</li> </ul>"},{"location":"5_FullStack/BASIC/Web/OIS/physical/#transmission-mediums","title":"Transmission Mediums","text":"Transmission Mediums <p>There are three major types:</p> <ol> <li>Copper (electrical).</li> <li>Optical Fiber (light).</li> <li>WIFI (RF).</li> </ol> Optical Fiber for network? <p>Principles of <code>optical fiber</code> communication:</p> <pre><code>graph LR\n    A[\"Device (network card)\"]-- electrical signal --&gt;B([transportation])\n    subgraph Optical Fiber\n    B-. optical pulse .-&gt;C([Before the server])\n    end\n    C-- electrical signal --&gt;D[server]</code></pre> Why faster? <p>In the time sequence, turning on the light pulse means <code>1</code>, and turning off the light pulse means <code>0</code>. </p> <p>Since the frequency of visible light is about <code>10~8 MHz</code>, the bandwidth of the <code>optical fiber</code> communication system is much larger than that of other transmission media.</p> Repeater? Background? <p>The <code>signal power</code> transmitted on the physical medium will gradually decay. When the attenuation reaches a certain level, the signal will be distorted. Thus the <code>reception error</code> will be caused.</p> What? <p><code>Repeater</code> is a device that can regenerate and restore the signal to increase the transmission distance of the signal.</p> Note! <p>The two ends of the repeater are connected to different <code>network segments</code>, NOT <code>subnets</code>.</p> Example! <ul> <li> <p>wireless: Normally, we can see a wireless <code>repeater</code> as a <code>WIFI extender</code>. There is a free Ad. here \ud83d\ude06:</p> <p> </p> </li> <li> <p>wired: The old school uses wired ones:</p> <p> </p> </li> </ul>"},{"location":"5_FullStack/BASIC/Web/OIS/physical/#cons","title":"Cons","text":"Cons of Physical Layer <p>There are three major cons that <code>Physical Layer</code> has:</p> <ol> <li>No access control (e.g. \"entrance guard\").</li> <li>No collision detection (e.g. \"traffic police\") \u2192 there are collisions.</li> <li>No uniquely identified devices (e.g. \"workers without names in one office\").</li> <li>No device communications (e.g. \"cannot find specific worker since he/she doesn't have a name\").</li> </ol>"},{"location":"5_FullStack/BASIC/Web/OIS/physical/#references","title":"References","text":"<p>Network Byte</p> <p>Xiaomi Exterder</p> <p>Network Basics: Repeaters</p>"},{"location":"5_FullStack/BASIC/Web/OIS/presentation/","title":"Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/presentation/#_1","title":"****","text":"?"},{"location":"5_FullStack/BASIC/Web/OIS/presentation/#references","title":"References","text":""},{"location":"5_FullStack/BASIC/Web/OIS/session/","title":"Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/session/#_1","title":"****","text":"?"},{"location":"5_FullStack/BASIC/Web/OIS/session/#references","title":"References","text":""},{"location":"5_FullStack/BASIC/Web/OIS/transport/","title":"Layer","text":""},{"location":"5_FullStack/BASIC/Web/OIS/transport/#_1","title":"****","text":"?"},{"location":"5_FullStack/BASIC/Web/OIS/transport/#references","title":"References","text":""},{"location":"5_FullStack/BASIC/Web/Protocols/","title":"Protocols","text":""},{"location":"5_FullStack/BASIC/Web/Protocols/#table-of-contents","title":"Table of contents:","text":"<ol> <li> <p>TCP/IP</p> </li> <li> <p>HTTP.</p> </li> <li> <p>FTP</p> </li> </ol>"},{"location":"5_FullStack/BASIC/Web/Protocols/HTTP/","title":"HTTP","text":""},{"location":"5_FullStack/BASIC/Web/Protocols/HTTP/#http_1","title":"HTTP","text":"HTTP? <p><code>HTTP</code>, Hypertext Transfer Protocol, is a protocol. <code>HTTP</code> uses plain text for all information communication between client and server, which is unsafe as it uses the internet. </p>"},{"location":"5_FullStack/BASIC/Web/Protocols/HTTP/#anatomy-of-an-http-request","title":"Anatomy of an HTTP request","text":"Level Details Response &amp; Request URL Structure: CRUD method + HEAD (optional) + Path + HTTP version Details: see in URL. Password &amp; Key HTTP Header - Request headers  - General headers - Representation headers JWT (Base64 encoded RFC 7519) HTTP body (optional) - Single-resource body  - Multiple-resource bodys JSON (RFCs 8259)"},{"location":"5_FullStack/LANG/","title":"\ud83d\udcbb Full Stack Language","text":""},{"location":"5_FullStack/LANG/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ul> <li>Javascript</li> <li>SQL</li> </ul>"},{"location":"5_FullStack/LANG/#references","title":"References:","text":"<ul> <li>Picture resource 1</li> </ul>"},{"location":"5_FullStack/LANG/SQL/","title":"SQL","text":""},{"location":"5_FullStack/LANG/SQL/#this-chapter-is-split-into-below-sections","title":"This chapter is split into below sections:","text":"<ul> <li>Basic Management</li> <li>Structural Operators</li> <li>Higher level Management</li> <li>Multiple Table Operation</li> </ul>"},{"location":"5_FullStack/LANG/SQL/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"5_FullStack/LANG/SQL/basic/","title":"Basic Management","text":""},{"location":"5_FullStack/LANG/SQL/basic/#glance-of-contents","title":"Glance of contents","text":"<p>To better review <code>SQL</code> management pipeline, I sort the famouse \"verbs\" in the sequence from <code>0 - 1</code>:</p> <ul> <li><code>CREATE TABLE</code> - creates a new table</li> <li><code>INSERT INTO</code> - inserts new data into a database</li> <li><code>SELECT</code> - extracts data from a database</li> <li><code>WHERE</code> - filter records</li> <li><code>UPDATE</code> - edit data in a database</li> <li><code>DELETE</code> - deletes data from a database</li> <li><code>DROP TABLE</code> - deletes a table</li> </ul>"},{"location":"5_FullStack/LANG/SQL/basic/#create-table","title":"Create Table","text":"Create Table <p>The <code>CREATE TABLE</code> statement is used to create a new table in a database.</p> Syntax SQL<pre><code>CREATE TABLE table_name (\ncolumn1 datatype;\ncolumn2 datatype;\ncolumn3 datatype;\n....\n);\n</code></pre> <p>Then, you will get a table like below:</p> PersonID LastName FirstName Address City click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) );  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#insert-into","title":"Insert Into","text":"Insert Into <p>The <code>INSERT INTO</code> statement is used to insert new records in a table.</p> Syntax SQL<pre><code>INSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n</code></pre> <p>After the example below, you will get a table like:</p> PersonID LastName FirstName Address City 123 Tom Skage OR Albany click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) );   INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'Skage', 'OR', 'Albany');  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#select","title":"Select","text":"Select <p>The <code>SELECT</code> statement is used to select data from a database</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name;\n</code></pre> SQL<pre><code>SELECT * FROM table_name; -- select all the fields available in the table\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'Skage', 'OR', 'Albany');   SELECT * FROM Marks_family; SELECT PersonID, City FROM Marks_family;       </p>"},{"location":"5_FullStack/LANG/SQL/basic/#where","title":"Where","text":"Where <p>The <code>WHERE</code> clause is used to filter records. It is used in statements: <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>, etc.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Euguene');   SELECT * FROM Marks_family WHERE City='Albany';  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#update","title":"Update","text":"Update <p>The <code>UPDATE</code> statement is used to modify the existing records in a table.</p> Syntax SQL<pre><code>UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition; -- if omit this line, all records in the table will be updated\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Euguene');   UPDATE Marks_family SET LastName = 'Changed', FirstName = 'Haha' WHERE PersonID ='123'; -- Out put and check SELECT * FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#delete","title":"Delete","text":"Delete <p>The <code>DELETE</code> statement is used to delete existing records in a table.</p> Syntax SQL<pre><code>DELETE FROM table_name WHERE condition;  -- if omit this line, all records in the table will be deleted\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Euguene');   DELETE FROM Marks_family WHERE PersonID = '124'; -- Out put and check SELECT * FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/basic/#drop-table","title":"Drop Table","text":"Drop Table <p>The <code>DROP TABLE</code> statement is used to drop an existing table in a database.</p> Syntax SQL<pre><code>DROP TABLE table_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), //hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) );   DROP TABLE Marks_family;  </p> Note! <p>We can also use <code>TRUNCATE TABLE</code> to delete the data inside a table; instead of deleting the table itself.</p>"},{"location":"5_FullStack/LANG/SQL/basic/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"5_FullStack/LANG/SQL/higher/","title":"Higher Level Management","text":""},{"location":"5_FullStack/LANG/SQL/higher/#glance-of-contents","title":"Glance of contents","text":"<p>Here are some higher-level uses:</p> <ul> <li><code>SELECT DISTINCT</code> - extracts distinct data from a database</li> <li><code>ALTER TABLE</code> - modifies a table</li> <li>[<code>Like</code>]</li> <li>[<code>Wildcards</code>]</li> <li>[<code>Select Into</code>]</li> <li>[<code>Insert Into Select</code>]</li> <li>[<code>Case</code>]</li> </ul>"},{"location":"5_FullStack/LANG/SQL/higher/#select-distinct","title":"Select Distinct","text":"Select Distinct <p>The <code>SELECT DISTINCT</code> statement is used to return only distinct (different) values.</p> Syntax SQL<pre><code>SELECT DISTINCT column1, column2, ...\nFROM table_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (223,'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (123,'Albany');   SELECT * FROM Marks_family;       SELECT DISTINCT PersonID, City FROM Marks_family; --will return distinct tuples SELECT DISTINCT City FROM Marks_family; SELECT DISTINCT PersonID FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/higher/#update","title":"Update","text":"Update <p>The <code>UPDATE</code> statement is used to modify the existing records in a table.</p> Syntax SQL<pre><code>UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n</code></pre> <p>After the example below, you will get a table like:</p> PersonID LastName FirstName Address City 123 Tom Skage OR Albany click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) );   INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'Skage', 'OR', 'Albany');  </p>"},{"location":"5_FullStack/LANG/SQL/higher/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"5_FullStack/LANG/SQL/multi_table/","title":"Multiple Table Operation","text":""},{"location":"5_FullStack/LANG/SQL/multi_table/#glance-of-contents","title":"Glance of contents","text":"<p>Here are some higher-level uses:</p> <ul> <li><code>Joins</code> - Basic Join Concept.</li> <li><code>Inner Join</code> - Inner join two different tables.</li> <li><code>Left Join</code> - Left join two different tables.</li> <li><code>Right Join</code> - Right join two different tables.</li> <li><code>Full Join</code> - Outer join two different tables.</li> <li><code>Self Join</code> - Inner join a table with itself.</li> <li><code>Union</code> - Combine two tables with the same number of columns.</li> </ul>"},{"location":"5_FullStack/LANG/SQL/multi_table/#joins","title":"Joins","text":"Joins <p>Here are the different types of the <code>JOINs</code> in SQL:</p> <ul> <li><code>(INNER) JOIN</code>: Returns records that have matching values in both tables</li> <li><code>LEFT (OUTER) JOIN</code>: Returns all records from the left table, and the matched records from the right table</li> <li><code>RIGHT (OUTER) JOIN</code>: Returns all records from the right table, and the matched records from the left table</li> <li><code>FULL (OUTER) JOIN</code>: Returns all records when there is a match in either left or right table</li> </ul> <p> </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#inner-join","title":"Inner Join","text":"Inner Join Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 INNER JOIN table2\nON table1.column_name = table2.column_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT Marks_family.PersonID, Marks_family.City, Student_List.StudentName FROM Marks_family INNER JOIN Student_List ON Marks_family.City = Student_List.City;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#left-join","title":"Left Join","text":"Left Join Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 Left JOIN table2\nON table1.column_name = table2.column_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT Marks_family.PersonID, Marks_family.City, Student_List.StudentName FROM Student_List LEFT JOIN Marks_family ON Student_List.City = Marks_family.City; </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#right-join","title":"Right Join","text":"Right Join Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 RIGHT JOIN table2\nON table1.column_name = table2.column_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT Marks_family.PersonID, Marks_family.City, Student_List.StudentName FROM Marks_family RIGHT JOIN Student_List ON Marks_family.City = Student_List.City;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#full-join","title":"Full Join","text":"Full Join Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 FULL OUTER JOIN table2\nON table1.column_name = table2.column_name\n(WHERE/ORDER BY);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (127, 'Linclon'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT Marks_family.PersonID, Marks_family.City, Student_List.StudentName FROM Marks_family FULL OUTER JOIN Student_List ON Marks_family.City = Student_List.City;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#self-join","title":"Self Join","text":"Self Join <p>A <code>self join</code> is a regular join, but the table is joined with itself.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table1 T1, table2 T2\nWHERE condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (127, 'Albany');   SELECT A.PersonID, A.City, B.PersonID FROM Marks_family A, Marks_family B WHERE A.City = B.City AND A.PersonID &lt;&gt; B.PersonID;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#union","title":"Union","text":"Union <p>The <code>UNION</code> operator is used to combine the result-set of two or more SELECT statements.</p> <ul> <li>Every <code>SELECT</code> statement within <code>UNION</code> must have the same number of columns</li> <li>The columns must also have similar data types</li> <li>The columns in every <code>SELECT</code> statement must also be in the same order</li> <li><code>UNION</code> selects only distinct values. Use <code>UNION ALL</code> to also select duplicate values!</li> </ul> Syntax SQL<pre><code>SELECT column_name(s) FROM table1 (WHERE)\nUNION (ALL)\nSELECT column_name(s) FROM table2 (WHERE)\n(ORDER BY);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     City varchar(255) ); CREATE TABLE Student_List (     StudentName varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family (PersonID, City) VALUES (124, 'Salem'); INSERT INTO Marks_family (PersonID, City) VALUES (127, 'Linclon'); INSERT INTO Student_List (StudentName, City) VALUES ('Tonny', 'Albany'); INSERT INTO Student_List (StudentName, City) VALUES ('Daming', 'Salem'); INSERT INTO Student_List (StudentName, City) VALUES ('King', 'Euguene');   SELECT * FROM Marks_family UNION ALL SELECT * FROM Student_List;  </p>"},{"location":"5_FullStack/LANG/SQL/multi_table/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"5_FullStack/LANG/SQL/particle/","title":"Structural Operators","text":""},{"location":"5_FullStack/LANG/SQL/particle/#glance-of-contents","title":"Glance of contents","text":"<p>There are some structural operators that are used to complete SQL sentences:</p> <ul> <li><code>Operators</code> for expression.</li> <li><code>NULL</code> for null expression.</li> <li><code>Min &amp; Max</code> for expression.</li> <li><code>Count, Avg, Sum</code> for aggregation function expressions.</li> <li><code>AND, OR, NOT</code> for conditional <code>WHERE</code> filtering.</li> <li><code>Exists</code> for checking the existence of any record.</li> <li><code>In</code> shorthand for multiple <code>OR</code> conditions.</li> <li><code>Any &amp; All</code> perform a comparison between a single column value and a range of other values.</li> <li><code>Order By</code> for sorting condition.</li> <li><code>Group By</code> for summarizing rows with the same value.</li> <li><code>BETWEEN</code> for selecting values within a given range.</li> <li><code>As</code> for name alias.</li> <li><code>Having</code> for using aggregation condition.</li> </ul>"},{"location":"5_FullStack/LANG/SQL/particle/#operators","title":"Operators","text":"Operators Syntax SQL Arithmetic OperatorsSQL Comparison OperatorsSQL Bitwise Operators + - * / % Add Subtract Multiply Divide Modulo <p> SELECT 30 + 20; SELECT 30 - 20; SELECT 30 * 20; SELECT 30 / 20; SELECT 30 % 20; </p> = &gt; &lt; &gt;= &lt;= &lt;&gt; Equal to Greater than Less than Greater than or equal to Less than or equal to Not equal to <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (129, 'Kim', 'B', 'TX', 'Salem');   SELECT * FROM Marks_family WHERE PersonID = 129; SELECT * FROM Marks_family WHERE PersonID &gt; 123; SELECT * FROM Marks_family WHERE PersonID &lt; 129; SELECT * FROM Marks_family WHERE PersonID &gt;= 123; SELECT * FROM Marks_family WHERE PersonID &lt;= 129; SELECT * FROM Marks_family WHERE PersonID &lt;&gt; 129;  </p> &amp; | ^ Bitwise AND Bitwise OR Bitwise exclusive OR"},{"location":"5_FullStack/LANG/SQL/particle/#null","title":"Null","text":"Null <p>The <code>NULL</code> statements help the comparison where <code>=,</code> <code>&lt;</code>, <code>&lt;&gt;</code>, etc cannot express.</p> Syntax SQL<pre><code>SELECT column_names\nFROM table_name\nWHERE column_name IS NULL/ IS NOT NULL;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, '', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem');   SELECT * FROM Marks_family WHERE LastName IS NULL;   SELECT * FROM Marks_family WHERE LastName IS NOT NULL;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#min--max","title":"Min &amp; Max","text":"Min &amp; Max <ul> <li>The <code>MIN()</code> function returns the smallest value of the selected column.</li> <li>The <code>MAX()</code> function returns the largest value of the selected column.</li> </ul> Syntax SQL<pre><code>SELECT MIN(column_name) / MAX(column_name)\nFROM table_name\nWHERE condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, '', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem');   SELECT MAX(PersonID) FROM Marks_family;   SELECT MIN(PersonID) FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#and-or-and-not","title":"And, Or, and Not","text":"And, Or, and Not <p>The <code>AND, OR, NOT</code> statements are used to express conditional <code>WHERE</code> filtering.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\n--and\nWHERE condition1 AND condition2 AND condition3 ...;\n--or\nWHERE condition1 OR condition2 OR condition3 ...;\n--not\nWHERE NOT condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Albany');   SELECT PersonID, LastName FROM Marks_family WHERE City = 'Albany' AND LastName = 'Tom';   SELECT PersonID, LastName FROM Marks_family WHERE City = 'Albany' OR LastName = 'Tom';   SELECT PersonID, LastName FROM Marks_family WHERE NOT City = 'Albany';  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#exists","title":"Exists","text":"Exists <p>The <code>EXISTS</code> operator is used to test for the existence of any record in a subquery. Return <code>TRUE</code> when there are one or more records.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE EXISTS\n(SELECT column_name FROM table_name WHERE condition);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family1 (     PersonID int,     City varchar(255) ); CREATE TABLE Marks_family2 (     City varchar(255) ); INSERT INTO Marks_family1 (PersonID, City) VALUES (123, 'Albany'); INSERT INTO Marks_family2 (City) VALUES ('Albany'); INSERT INTO Marks_family2 (City) VALUES ('Eugene'); INSERT INTO Marks_family2 (City) VALUES ('Salem');   SELECT * FROM Marks_family1 WHERE EXISTS (SELECT City FROM Marks_family2);  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#in","title":"In","text":"In <p>The <code>IN</code> operator is a shorthand for multiple <code>OR</code> conditions, which allow you to specify multiple values in a <code>WHERE</code> clause.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE column_name (NOT) IN (value1, value2, ...)/(SELECT STATEMENT) ;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   SELECT * FROM Marks_family WHERE PersonID NOT IN (123,125);   SELECT * FROM Marks_family WHERE CITY IN (SELECT City FROM Marks_family WHERE City = 'Salem');  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#any--all","title":"Any &amp; All","text":"Any &amp; All <p>The <code>ANY</code> and <code>ALL</code> operators allow you to perform a comparison between a single column value and a range of other values.</p> <ul> <li>operator must be a standard comparison operator (<code>=</code>, <code>&lt;&gt;</code>, <code>!=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, or <code>&lt;=</code>).</li> <li><code>ALL</code> can be used with <code>SELECT</code>, <code>WHERE</code> and <code>HAVING</code> statements</li> <li><code>ANY</code> means that the condition will be true if the operation is true for any of the values in the range.</li> <li><code>ALL</code> means that the condition will be true only if the operation is true for all values in the range. </li> </ul> Symbol Equal Expression ANY SOME =ANY IN &lt;&gt;ALL NOT IN Syntax SQL<pre><code>-- ANY can be used with WHERE and HAVING statements\nSELECT column_name(s)\nFROM table_name\nWHERE column_name operator ANY\n(SELECT column_name\nFROM table_name\nWHERE condition);\n-- ALL can be used with SELECT, WHERE and HAVING statements\n-- WAY1\nSELECT ALL column_name(s)\nFROM table_name\nWHERE condition;\n-- WAY2\nSELECT column_name(s)\nFROM table_name\nWHERE column_name operator ALL\n(SELECT column_name\nFROM table_name\nWHERE condition);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family1 (     PersonID int,     City varchar(255) ); CREATE TABLE Marks_family2 (     PersonID2 int,     City varchar(255) ); INSERT INTO Marks_family1 VALUES (123, 'Albany'); INSERT INTO Marks_family2 VALUES (477,'Salem'); INSERT INTO Marks_family2 VALUES (123,'Eugene'); INSERT INTO Marks_family2 VALUES (123,'Salem');   SELECT ALL City FROM Marks_family2;   SELECT * FROM Marks_family1 WHERE PersonID = ANY (     SELECT PersonID2     FROM Marks_family2     WHERE PersonID2 &lt; 447 );   <p> </p>"},{"location":"5_FullStack/LANG/SQL/particle/#count-avg-sum","title":"Count, Avg, Sum","text":"Count, Avg, Sum <p>The <code>COUNT, AVG, SUM</code> statements are used to express conditional <code>WHERE</code> filtering.</p> Syntax SQL<pre><code>SELECT COUNT(column_name) / AVG(column_name) / SUM(column_name)\nFROM table_name\nWHERE condition;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (124, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Albany');   SELECT COUNT(PersonID) FROM Marks_family;   SELECT AVG(PersonID) FROM Marks_family;   SELECT SUM(PersonID) FROM Marks_family;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#order-by","title":"Order By","text":"Order By <p>The <code>ORDER BY</code> keyword is used to sort the result-set in ascending or descending order.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\n(WHERE some_condition)\nORDER BY column1, column2, ... ASC|DESC; --Default ASC\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Yong', 'C', 'NC', 'Albany');   SELECT * FROM Marks_family ORDER BY PersonID, LastName ASC;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#group-by","title":"Group By","text":"Group By <p>The <code>GROUP BY</code> statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\". For summarized information, we always use aggregate functions (<code>COUNT()</code>, <code>MAX()</code>, <code>MIN()</code>, <code>SUM()</code>, <code>AVG()</code>) to group the result-set by one or more columns.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nORDER BY column_name(s);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   -- Static the number of people in each city. SELECT COUNT(PersonID), City FROM Marks_family GROUP BY City ORDER BY COUNT(PersonID) DESC;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#between","title":"Between","text":"Between <p>The <code>BETWEEN</code> operator selects values within a given range. The values can be numbers, text, or dates.</p> Syntax SQL<pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE column_name (NOT) BETWEEN value1 AND value2;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   SELECT * FROM Marks_family WHERE PersonID NOT BETWEEN 123 AND 125;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#as","title":"As","text":"As <p>The <code>AS</code> keyword is used to give a table, or a column in a table, a temporary name for better understanding.</p> Syntax SQL<pre><code>SELECT column_name AS alias_name\nFROM table_name;\nSELECT column1, column2, ...\nFROM table_name AS alias_name;\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   SELECT M.PersonID FROM Marks_family AS M WHERE City = 'Salem';   SELECT PersonID AS P, LastName AS L FROM Marks_family WHERE City = 'Salem';  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#having","title":"Having","text":"Having <p>The <code>HAVING</code> clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.</p> Syntax SQL<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nHAVING condition\nORDER BY column_name(s);\n</code></pre> click to see an example <p> CREATE TABLE Marks_family (     PersonID int,     LastName varchar(255), --hold characters     FirstName varchar(255),     Address varchar(255),     City varchar(255) ); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (123, 'Tom', 'A', 'OR', 'Albany'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (125, 'Kim', 'B', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (126, 'Rim', 'F', 'TX', 'Salem'); INSERT INTO Marks_family (PersonID, LastName, FirstName, Address, City) VALUES (127, 'Yong', 'C', 'NC', 'Albany');   SELECT COUNT(PersonID), City FROM Marks_family GROUP BY City HAVING COUNT(PersonID) &gt; 1 ORDER BY COUNT(PersonID) DESC;  </p>"},{"location":"5_FullStack/LANG/SQL/particle/#references","title":"References:","text":"<ul> <li>SQL Tutorial</li> </ul>"},{"location":"6_Math/","title":"Math","text":"Text Only<pre><code>{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n</code></pre> <p>{% include list.liquid all=true %}</p>"},{"location":"6_Math/Numerical/","title":"Numerical Methods","text":""},{"location":"6_Math/Numerical/#ois-model","title":"OIS Model","text":"<p>In numerical analysis, there are several methods deserve to be mentioned:</p> <ol> <li> <p>Bisection Method.</p> </li> <li> <p>Newton's method.</p> </li> </ol>"},{"location":"7_Casual_Literary_Notes/","title":"Casual Literary Notes","text":"Text Only<pre><code>{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n</code></pre> <p>{% include list.liquid all=true %}</p>"},{"location":"7_Casual_Literary_Notes/Dunhuang/","title":"Dunhunag Wall Painting Learning","text":""},{"location":"8_Japanese_Learning/","title":"\ud83d\udc7a Japanese Learning Notes","text":""},{"location":"8_Japanese_Learning/#this-chapter-is-split-into-sections-below","title":"This chapter is split into sections below:","text":"<ol> <li>\u4e94\u5341\u97f3\u56f3(\u3054\u3058\u3085\u3046\u304a\u3093\u305a).</li> </ol>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/","title":"\ud83d\uddfe \u4e94\u5341\u97f3\u56f3","text":""},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#welcome-to-\u65e5\u672c\u8a9e\u306b\u307b\u3093\u3054","title":"Welcome to \u65e5\u672c\u8a9e(\u306b\u307b\u3093\u3054)","text":"Components? <p>There are three types of Japanese in Japanese Writing System: </p> <code>hiragana (\u5e73\u4eee\u540d)</code><code>katakana (\u7247\u4eee\u540d)</code><code>Kanji (\u6f22\u5b57)</code> <p><code>Hiragana</code> is used to express the inherent vocabulary and grammatical auxiliary words in modern Japanese.</p> <p><code>Hiragana</code> evolved from the cursive script (\u8349\u4e66) of Chinese characters. </p> <p> </p> <p>Early <code>Hiragana</code> was wildly used by Japanese women. It was used more for lyrical text, called female characters, female hand.</p> <p><code>Katakana</code> is used for foreign words, foreign names, onomatopoeia, biological, mineral, etc., in modern Japanese.</p> <p><code>Katakana</code> evolved from regular script (\u6977\u4e66) or its radicals of Chinese characters.</p> <p></p> <p><code>Kanji</code> are the logographic Chinese characters taken from the Chinese script and used in the writing of Japanese.</p> <p> </p> <p>Early <code>Kanji</code> was wildly used by Japanese men for history, and papers, which are called male characters, male hands.</p> Before Learning! <p>Since the author is Chinese, concepts will be preferred to be expressed by <code>(\u6f22\u5b57)</code>.</p>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#table-for-\u4e94\u5341\u97f3\u56f3\u3054\u3058\u3085\u3046\u304a\u3093\u305a","title":"Table for \u4e94\u5341\u97f3\u56f3(\u3054\u3058\u3085\u3046\u304a\u3093\u305a)","text":"Introduction <p>For the table of the <code>\u4e94\u5341\u97f3\u56f3</code>\uff08Kana syllabary Pro), we call each column <code>\u6bb5</code> and each row <code>\u884c</code>. The diagram is split into diagrams for <code>\u5e73\u4eee\u540d</code> and <code>\u7247\u4eee\u540d</code>.</p>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u5e73\u4eee\u540d\u7247\u4eee\u540d","title":"\u5e73\u4eee\u540d&amp;\u7247\u4eee\u540d","text":"\u5e73\u4eee\u540d&amp;\u7247\u4eee\u540d \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304b<code>\u30ab</code>(k)\u884c \u304b<code>\u30ab</code> \u304d<code>\u30ad</code> \u304f<code>\u30af</code> \u3051<code>\u30b1</code> \u3053<code>\u30b3</code> \u3055<code>\u30b5</code>(s)\u884c \u3055<code>\u30b5</code> \u3057<code>\u30b7</code>(shi) \u3059<code>\u30b9</code> \u305b<code>\u30bb</code> \u305d<code>\u30bd</code> \u305f<code>\u30bf</code>(t)\u884c \u305f<code>\u30bf</code> \u3061<code>\u30c1</code>(ti/chi) \u3064<code>\u30c4</code>(tsu) \u3066<code>\u30c6</code> \u3068<code>\u30c8</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u306f<code>\u30cf</code>(h)\u884c \u306f<code>\u30cf</code> \u3072<code>\u30d2</code> \u3075<code>\u30d5</code> \u3078<code>\u30d8</code> \u307b<code>\u30db</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u5e73\u4eee\u540d\u3072\u3089\u304c\u306a-hiragana","title":"\u5e73\u4eee\u540d(\u3072\u3089\u304c\u306a) \"hiragana\"","text":"\u5e73\u4eee\u540d \u3042(a)\u6bb5 \u3044(i)\u6bb5 \u3046(u)\u6bb5 \u3048(e)\u6bb5 \u304a(o)\u6bb5 \u3042(a)\u884c \u3042 \u3044 \u3046 \u3048 \u304a \u304b(k)\u884c \u304b \u304d \u304f \u3051 \u3053 \u3055(s)\u884c \u3055 \u3057(shi) \u3059 \u305b \u305d \u305f(t)\u884c \u305f \u3061(ti/chi) \u3064(tsu) \u3066 \u3068 \u306a(n)\u884c \u306a \u306b \u306c \u306d \u306e \u306f(h)\u884c \u306f \u3072 \u3075 \u3078 \u307b \u307e(m)\u884c \u307e \u307f \u3080 \u3081 \u3082 \u3084(y)\u884c \u3084 \u3086 \u3088 \u3089(r)\u884c \u3089 \u308a \u308b \u308c \u308d \u308f(w)\u884c \u308f \u3092 \u3093(n) \u3093"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u7247\u4eee\u540d\u304b\u305f\u304b\u306a-katakana","title":"\u7247\u4eee\u540d(\u304b\u305f\u304b\u306a) \"katakana\"","text":"\u7247\u4eee\u540d \u30a2(a)\u6bb5 \u30a4(i)\u6bb5 \u30a6(u)\u6bb5 \u30a8(e)\u6bb5 \u30aa(o)\u6bb5 \u30a2(a)\u884c \u30a2 \u30a4 \u30a6 \u30a8 \u30aa \u30ab(k)\u884c \u30ab \u30ad \u30af \u30b1 \u30b3 \u30b5(s)\u884c \u30b5 \u30b7(shi) \u30b9 \u30bb \u30bd \u30bf(t)\u884c \u30bf \u30c1(ti/chi) \u30c4(tsu) \u30c6 \u30c8 \u30ca(n)\u884c \u30ca \u30cb \u30cc \u30cd \u30ce \u30cf(h)\u884c \u30cf \u30d2 \u30d5 \u30d8 \u30db \u30de(m)\u884c \u30de \u30df \u30e0 \u30e1 \u30e2 \u30e4(y)\u884c \u30e4 \u30e6 \u30e8 \u30e9(r)\u884c \u30e9 \u30ea \u30eb \u30ec \u30ed \u30ef(w)\u884c \u30ef \u30f2 \u30f3(n) \u30f3"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u304a\u3093-on","title":"\u304a\u3093 \"on\"","text":"\u304a\u3093 \u6e05\u97f3(\u305b\u3044\u304a\u3093) \"seion\"\u6fc1\u97f3(\u3060\u304f\u304a\u3093) \"dakuon\"\u534a\u6fc1\u97f3(\u306f\u3093\u3060\u304f\u304a\u3093) \"handakuon\"\u9577\u97f3(\u3061\u3087\u3046\u304a\u3093) \"chouon\"\u64a5\u97f3(\u306f\u3064\u304a\u3093) \"hatsuon\"\u4fc3\u97f3(\u305d\u304f\u304a\u3093) \"sokuon\"\u62d7\u97f3(\u3088\u3046\u304a\u3093) \"youon\" <p>The original character writing:</p> \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304b<code>\u30ab</code>(k)\u884c \u304b<code>\u30ab</code> \u304d<code>\u30ad</code> \u304f<code>\u30af</code> \u3051<code>\u30b1</code> \u3053<code>\u30b3</code> \u3055<code>\u30b5</code>(s)\u884c \u3055<code>\u30b5</code> \u3057<code>\u30b7</code>(shi) \u3059<code>\u30b9</code> \u305b<code>\u30bb</code> \u305d<code>\u30bd</code> \u305f<code>\u30bf</code>(t)\u884c \u305f<code>\u30bf</code> \u3061<code>\u30c1</code>(ti/chi) \u3064<code>\u30c4</code>(tsu) \u3066<code>\u30c6</code> \u3068<code>\u30c8</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u306f<code>\u30cf</code>(h)\u884c \u306f<code>\u30cf</code> \u3072<code>\u30d2</code> \u3075<code>\u30d5</code> \u3078<code>\u30d8</code> \u307b<code>\u30db</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code> <p>The character writing added with <code>\u309b</code>:</p> \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304c<code>\u30ac</code>(g)\u884c \u304c<code>\u30ac</code> \u304e<code>\u30ae</code> \u3050<code>\u30b0</code> \u3052<code>\u30b2</code> \u3054<code>\u30b4</code> \u3056<code>\u30b6</code>(z)\u884c \u3056<code>\u30b6</code> \u3058<code>\u30b8</code>(ji) \u305a<code>\u30ba</code> \u305c<code>\u30bc</code> \u305e<code>\u30be</code> \u3060<code>\u30c0</code>(d)\u884c \u3060<code>\u30c0</code> \u3062<code>\u30c2</code>(ji) \u3065<code>\u30c5</code>(zu) \u3067<code>\u30c7</code> \u3069<code>\u30c9</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u3070<code>\u30d0</code>(b)\u884c \u3070<code>\u30d0</code> \u3073<code>\u30d3</code> \u3076<code>\u30d6</code> \u30d9<code>\u30d9</code> \u307c<code>\u30dc</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code> <p>The character writing added with <code>\u309c</code>:</p> \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304c<code>\u30ac</code>(g)\u884c \u304c<code>\u30ac</code> \u304e<code>\u30ae</code> \u3050<code>\u30b0</code> \u3052<code>\u30b2</code> \u3054<code>\u30b4</code> \u3056<code>\u30b6</code>(z)\u884c \u3056<code>\u30b6</code> \u3058<code>\u30b8</code>(ji) \u305a<code>\u30ba</code> \u305c<code>\u30bc</code> \u305e<code>\u30be</code> \u3060<code>\u30c0</code>(d)\u884c \u3060<code>\u30c0</code> \u3062<code>\u30c2</code>(ji) \u3065<code>\u30c5</code>(zu) \u3067<code>\u30c7</code> \u3069<code>\u30c9</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u3071<code>\u30d1</code>(p)\u884c \u3071<code>\u30d1</code> \u3074<code>\u30d4</code> \u3077<code>\u30d7</code> \u307a<code>\u30da</code> \u307d<code>\u30dd</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code> <ul> <li>In <code>\u5e73\u4eee\u540d</code>, we use <code>\u3042</code>, <code>\u3044</code>, <code>\u3046</code>, <code>\u3048</code>, and <code>\u304a</code> to extend the pronunciation.</li> <li>In <code>\u7247\u4eee\u540d</code>, we use <code>\u30fc</code> to extend the pronunciation.</li> </ul> \u3042(a)\u6bb5 + \u3042 \u3044(i)\u6bb5 + \u3044 \u3046(u)\u6bb5 + \u3046 \u3048(e)\u6bb5 + \u3044 \u304a(o)\u6bb5 + \u3046 ... <p>The <code>\u3093\u30f3</code> at the end of <code>\u4e94\u5341\u97f3\u56f3</code>.</p> <p>Add <code>\u3064\u30c4(tsu)</code> to express a short pause.</p> <p>E.g: <code>\u304a\u3068</code>\"oto\" \u2192 <code>\u304a\u3064\u3068</code>\"ot_to\".</p> <p>The tiny version of <code>\u3084\u30e4</code>, <code>\u3086\u30e6</code>, and <code>\u3088\u30e8</code>: <code>\u3083\u30e3</code>, <code>\u3085\u30e5</code>, and <code>\u3087\u30e7</code></p> <p>The characters can add <code>\u62d7\u97f3</code>:</p> \u3042<code>\u30a2</code>(a)\u6bb5 \u3044<code>\u30a4</code>(i)\u6bb5 \u3046<code>\u30a6</code>(u)\u6bb5 \u3048<code>\u30a8</code>(e)\u6bb5 \u304a<code>\u30aa</code>(o)\u6bb5 \u3042<code>\u30a2</code>(a)\u884c \u3042<code>\u30a2</code> \u3044<code>\u30a4</code> \u3046<code>\u30a6</code> \u3048<code>\u30a8</code> \u304a<code>\u30aa</code> \u304b<code>\u30ab</code>(k)\u884c \u304b<code>\u30ab</code> \u304d<code>\u30ad</code> \u304f<code>\u30af</code> \u3051<code>\u30b1</code> \u3053<code>\u30b3</code> \u3055<code>\u30b5</code>(s)\u884c \u3055<code>\u30b5</code> \u3057<code>\u30b7</code>(shi) \u3059<code>\u30b9</code> \u305b<code>\u30bb</code> \u305d<code>\u30bd</code> \u305f<code>\u30bf</code>(t)\u884c \u305f<code>\u30bf</code> \u3061<code>\u30c1</code>(ti/chi) \u3064<code>\u30c4</code>(tsu) \u3066<code>\u30c6</code> \u3068<code>\u30c8</code> \u306a<code>\u30ca</code>(n)\u884c \u306a<code>\u30ca</code> \u306b<code>\u30cb</code> \u306c<code>\u30cc</code> \u306d<code>\u30cd</code> \u306e<code>\u30ce</code> \u306f<code>\u30cf</code>(h)\u884c \u306f<code>\u30cf</code> \u3072<code>\u30d2</code> \u3075<code>\u30d5</code> \u3078<code>\u30d8</code> \u307b<code>\u30db</code> \u307e<code>\u30de</code>(m)\u884c \u307e<code>\u30de</code> \u307f<code>\u30df</code> \u3080<code>\u30e0</code> \u3081<code>\u30e1</code> \u3082<code>\u30e2</code> \u3084<code>\u30e4</code>(y)\u884c \u3084<code>\u30e4</code> \u3086<code>\u30e6</code> \u3088<code>\u30e8</code> \u3089<code>\u30e9</code>(r)\u884c \u3089<code>\u30e9</code> \u308a<code>\u30ea</code> \u308b<code>\u30eb</code> \u308c<code>\u30ec</code> \u308d<code>\u30ed</code> \u308f<code>\u30ef</code>(w)\u884c \u308f<code>\u30ef</code> \u3092<code>\u30f2</code> \u3093<code>\u30f3</code>(n) \u3093<code>\u30f3</code> <p>E.g: </p>"},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#\u3042a\u884c","title":"\u3042(a)\u884c","text":""},{"location":"8_Japanese_Learning/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%B3/#references","title":"References:","text":"<ul> <li>\u5e73\u5047\u540d</li> <li>\u7247\u5047\u540d</li> <li>Kanji</li> <li>picture source 1</li> <li>picture source 2</li> <li>picture source 3</li> <li>picture source 4</li> </ul>"},{"location":"9_Guitar_Garage/","title":"Guitar Garage","text":"<p> This is a chapter for collecting some of the guitar sheets that I am into</p> <ol> <li>\u6bcf\u5929\u591a\u7231\u4f60\u4e00\u4e9b\uff08\u56fd\u8bed\uff09</li> </ol>"},{"location":"9_Guitar_Garage/Sheet/%E6%AF%8F%E5%A4%A9%E5%A4%9A%E7%88%B1%E4%BD%A0%E4%B8%80%E4%BA%9B/","title":"\u6bcf\u5929\u591a\u7231\u4f60\u4e00\u4e9b\uff08\u56fd\u8bed\uff09","text":"<p>Author: \u5f20\u5b66\u53cb Key: G Capo: #1</p> Sheet <p> </p> C++<pre><code>Prelude\nG D/F# Em Bm C G Am7 D\nVerse A\nG       D/F# \u4e5f\u66fe\u8ffd\u6c42\uff0c\u4e5f\u66fe\u5931\u843d\nEm7      Bm\n\u4e0d\u518d\u6709\u68a6\uff0c\u662f\u4f60\u4e3a\u6211\nC        G \u63a8\u5f00\u5929\u7a97\uff0c\u6253\u5f00\u5fc3\u9501\nAm7     D\n\u8ba9\u5e0c\u671b\uff0c\u53c8\u8f6c\u52a8\nVerse B\nG       D/F# \u5fd9\u788c\u5954\u6ce2\uff0c\u5076\u5c14\u8ff7\u60d1\n\u5fc3\u4e2d\u6709\u7231\uff0c\u4eba\u751f\u5982\u6b4c\nEm7      Bm\n\u4e3a\u4e86\u4ec0\u4e48\uff0c\u662f\u4f60\u7ed9\u6211\n\u5531\u7740\u6b22\u4e50\uff0c\u6d77\u9614\u5929\u7a7a\nC        G \u4e00\u4efd\u611f\u52a8\uff0c\u4e00\u4e2a\u7406\u7531\n\u6765\u53bb\u4ece\u5bb9\uff0c\u4e0d\u60f9\u70e6\u5fe7\nAm7  D   G\n\u4e0d\u75b2\u5026\uff0c\u4e0d\u8106\u5f31\n\u6709\u4e86\u4f60\uff0c\u522b\u65e0\u6c42\nBridge\nCmaj7   D       Bm      E7\n\u8fd9\u4e16\u754c\u7684\u6c38\u6052\u4e0d\u591a\uff0c\u8ba9\u6211\u4eec\u4e5f\u6210\u4e3a\u4e00\u79cd\nAm7    Am7/G#   Am7/G D\n\u60c5\u6df1\u5982\u6d77\u4e0d\u79fb\u5982\u5c71\uff0c\u7528\u4e00\u751f\u7231\u4e0d\u5b8c\nChorus\nG          D/F#       Em       Dm7      G7\n\u6211\u7684\u7231\u4e00\u5929\u6bd4\u4e00\u5929\u66f4\u70ed\u70c8\uff0c\u8981\u7ed9\u4f60\u591a\u4e9b\u518d\u591a\u4e9b\u4e0d\u505c\u6b47\nC           B          Am7  Cm7   D \u8ba9\u4f60(\u7684)\u751f\u547d\u53ea\u6709\u751c\u548c\u7f8eOHOH\uff0c\u9057\u5fd8\u8be5\u600e\u4e48\u6d41\u6cea\nG          D/F#       Em       Dm7      G7\n\u6211\u7684\u7231\u4e00\u5929\u6bd4\u4e00\u5929\u66f4\u70ed\u70c8\uff0c\u8981\u7ed9\u4f60\u591a\u4e9b\u518d\u591a\u4e9b\u4e0d\u505c\u6b47\nC           B             Am7       D   G\n\u8ba9\u604b(\u4eba)\u949f\u7231(\u7684)\u6bcf\u53e5\u8a93\u8a00OHOH\uff0c\u4e0d\u518d\u96be\u8ffd\u5168 \u90fd\u5b9e\u73b0\nLast\n\u6211\u7684\u7231\u4e00\u5929\u6bd4\u4e00\u5929\u66f4\u70ed\u70c8\uff0c\u8981\u7ed9\u4f60\u591a\u4e9b\u518d\u591a\u4e9b\u4e0d\u505c\u6b47\n\u8ba9\u4f60\u7684\u751f\u547d\u53ea\u6709\u751c\u548c\u7f8e\uff0cOHOH\u9057\u5fd8\u8be5\u600e\u4e48\u6d41\u6cea\n\u6211\u7684\u7231\u4e00\u5929\u6bd4\u4e00\u5929\u8fd8\u8981\u575a\u51b3\uff0c\u8981\u7ed9\u4f60\u591a\u4e9b\u7136\u540e\u518d\u591a\u4e00\u4e9b\n\u8ba9\u604b\u4eba\u949f\u7231\u7684\u6bcf\u53e5\u8a93\u8a00\uff0cOHOH\u4e0d\u518d\u96be\u8ffd\u5168\u90fd\u5b9e\u73b0\n</code></pre>"}]}